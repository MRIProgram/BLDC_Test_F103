
BLDC_Test_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006120  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08006308  08006308  00016308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006744  08006744  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006744  08006744  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006744  08006744  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006744  08006744  00016744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006748  08006748  00016748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800674c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000060  080067ac  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080067ac  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7b0  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271a  00000000  00000000  0002e87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aca  00000000  00000000  00031d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0a3  00000000  00000000  0003284a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001232b  00000000  00000000  0004d8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eb15  00000000  00000000  0005fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000419c  00000000  00000000  000fe730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001028cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000060 	.word	0x20000060
 8000204:	00000000 	.word	0x00000000
 8000208:	080062f0 	.word	0x080062f0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000064 	.word	0x20000064
 8000224:	080062f0 	.word	0x080062f0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_dmul>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800023e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000246:	bf1d      	ittte	ne
 8000248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800024c:	ea94 0f0c 	teqne	r4, ip
 8000250:	ea95 0f0c 	teqne	r5, ip
 8000254:	f000 f8de 	bleq	8000414 <__aeabi_dmul+0x1dc>
 8000258:	442c      	add	r4, r5
 800025a:	ea81 0603 	eor.w	r6, r1, r3
 800025e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000262:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000266:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800026a:	bf18      	it	ne
 800026c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000278:	d038      	beq.n	80002ec <__aeabi_dmul+0xb4>
 800027a:	fba0 ce02 	umull	ip, lr, r0, r2
 800027e:	f04f 0500 	mov.w	r5, #0
 8000282:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000286:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800028a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800028e:	f04f 0600 	mov.w	r6, #0
 8000292:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000296:	f09c 0f00 	teq	ip, #0
 800029a:	bf18      	it	ne
 800029c:	f04e 0e01 	orrne.w	lr, lr, #1
 80002a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002ac:	d204      	bcs.n	80002b8 <__aeabi_dmul+0x80>
 80002ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002b2:	416d      	adcs	r5, r5
 80002b4:	eb46 0606 	adc.w	r6, r6, r6
 80002b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002d0:	bf88      	it	hi
 80002d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002d6:	d81e      	bhi.n	8000316 <__aeabi_dmul+0xde>
 80002d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002dc:	bf08      	it	eq
 80002de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002e2:	f150 0000 	adcs.w	r0, r0, #0
 80002e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002f0:	ea46 0101 	orr.w	r1, r6, r1
 80002f4:	ea40 0002 	orr.w	r0, r0, r2
 80002f8:	ea81 0103 	eor.w	r1, r1, r3
 80002fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000300:	bfc2      	ittt	gt
 8000302:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000306:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800030a:	bd70      	popgt	{r4, r5, r6, pc}
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000310:	f04f 0e00 	mov.w	lr, #0
 8000314:	3c01      	subs	r4, #1
 8000316:	f300 80ab 	bgt.w	8000470 <__aeabi_dmul+0x238>
 800031a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800031e:	bfde      	ittt	le
 8000320:	2000      	movle	r0, #0
 8000322:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000326:	bd70      	pople	{r4, r5, r6, pc}
 8000328:	f1c4 0400 	rsb	r4, r4, #0
 800032c:	3c20      	subs	r4, #32
 800032e:	da35      	bge.n	800039c <__aeabi_dmul+0x164>
 8000330:	340c      	adds	r4, #12
 8000332:	dc1b      	bgt.n	800036c <__aeabi_dmul+0x134>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f305 	lsl.w	r3, r0, r5
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000350:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	fa21 f604 	lsr.w	r6, r1, r4
 800035c:	eb42 0106 	adc.w	r1, r2, r6
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 040c 	rsb	r4, r4, #12
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f304 	lsl.w	r3, r0, r4
 8000378:	fa20 f005 	lsr.w	r0, r0, r5
 800037c:	fa01 f204 	lsl.w	r2, r1, r4
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f1c4 0520 	rsb	r5, r4, #32
 80003a0:	fa00 f205 	lsl.w	r2, r0, r5
 80003a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a8:	fa20 f304 	lsr.w	r3, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea43 0302 	orr.w	r3, r3, r2
 80003b4:	fa21 f004 	lsr.w	r0, r1, r4
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	fa21 f204 	lsr.w	r2, r1, r4
 80003c0:	ea20 0002 	bic.w	r0, r0, r2
 80003c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f094 0f00 	teq	r4, #0
 80003d8:	d10f      	bne.n	80003fa <__aeabi_dmul+0x1c2>
 80003da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003de:	0040      	lsls	r0, r0, #1
 80003e0:	eb41 0101 	adc.w	r1, r1, r1
 80003e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3c01      	subeq	r4, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1a6>
 80003ee:	ea41 0106 	orr.w	r1, r1, r6
 80003f2:	f095 0f00 	teq	r5, #0
 80003f6:	bf18      	it	ne
 80003f8:	4770      	bxne	lr
 80003fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	eb43 0303 	adc.w	r3, r3, r3
 8000404:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000408:	bf08      	it	eq
 800040a:	3d01      	subeq	r5, #1
 800040c:	d0f7      	beq.n	80003fe <__aeabi_dmul+0x1c6>
 800040e:	ea43 0306 	orr.w	r3, r3, r6
 8000412:	4770      	bx	lr
 8000414:	ea94 0f0c 	teq	r4, ip
 8000418:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800041c:	bf18      	it	ne
 800041e:	ea95 0f0c 	teqne	r5, ip
 8000422:	d00c      	beq.n	800043e <__aeabi_dmul+0x206>
 8000424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000428:	bf18      	it	ne
 800042a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042e:	d1d1      	bne.n	80003d4 <__aeabi_dmul+0x19c>
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000442:	bf06      	itte	eq
 8000444:	4610      	moveq	r0, r2
 8000446:	4619      	moveq	r1, r3
 8000448:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800044c:	d019      	beq.n	8000482 <__aeabi_dmul+0x24a>
 800044e:	ea94 0f0c 	teq	r4, ip
 8000452:	d102      	bne.n	800045a <__aeabi_dmul+0x222>
 8000454:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000458:	d113      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800045a:	ea95 0f0c 	teq	r5, ip
 800045e:	d105      	bne.n	800046c <__aeabi_dmul+0x234>
 8000460:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000464:	bf1c      	itt	ne
 8000466:	4610      	movne	r0, r2
 8000468:	4619      	movne	r1, r3
 800046a:	d10a      	bne.n	8000482 <__aeabi_dmul+0x24a>
 800046c:	ea81 0103 	eor.w	r1, r1, r3
 8000470:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000474:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd70      	pop	{r4, r5, r6, pc}
 8000482:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000486:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800048a:	bd70      	pop	{r4, r5, r6, pc}

0800048c <__aeabi_fmul>:
 800048c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000490:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000494:	bf1e      	ittt	ne
 8000496:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800049a:	ea92 0f0c 	teqne	r2, ip
 800049e:	ea93 0f0c 	teqne	r3, ip
 80004a2:	d06f      	beq.n	8000584 <__aeabi_fmul+0xf8>
 80004a4:	441a      	add	r2, r3
 80004a6:	ea80 0c01 	eor.w	ip, r0, r1
 80004aa:	0240      	lsls	r0, r0, #9
 80004ac:	bf18      	it	ne
 80004ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004b2:	d01e      	beq.n	80004f2 <__aeabi_fmul+0x66>
 80004b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004c0:	fba0 3101 	umull	r3, r1, r0, r1
 80004c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004cc:	bf3e      	ittt	cc
 80004ce:	0049      	lslcc	r1, r1, #1
 80004d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004d4:	005b      	lslcc	r3, r3, #1
 80004d6:	ea40 0001 	orr.w	r0, r0, r1
 80004da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004de:	2afd      	cmp	r2, #253	; 0xfd
 80004e0:	d81d      	bhi.n	800051e <__aeabi_fmul+0x92>
 80004e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ea:	bf08      	it	eq
 80004ec:	f020 0001 	biceq.w	r0, r0, #1
 80004f0:	4770      	bx	lr
 80004f2:	f090 0f00 	teq	r0, #0
 80004f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004fa:	bf08      	it	eq
 80004fc:	0249      	lsleq	r1, r1, #9
 80004fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000502:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000506:	3a7f      	subs	r2, #127	; 0x7f
 8000508:	bfc2      	ittt	gt
 800050a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800050e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000512:	4770      	bxgt	lr
 8000514:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000518:	f04f 0300 	mov.w	r3, #0
 800051c:	3a01      	subs	r2, #1
 800051e:	dc5d      	bgt.n	80005dc <__aeabi_fmul+0x150>
 8000520:	f112 0f19 	cmn.w	r2, #25
 8000524:	bfdc      	itt	le
 8000526:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800052a:	4770      	bxle	lr
 800052c:	f1c2 0200 	rsb	r2, r2, #0
 8000530:	0041      	lsls	r1, r0, #1
 8000532:	fa21 f102 	lsr.w	r1, r1, r2
 8000536:	f1c2 0220 	rsb	r2, r2, #32
 800053a:	fa00 fc02 	lsl.w	ip, r0, r2
 800053e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000542:	f140 0000 	adc.w	r0, r0, #0
 8000546:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800054a:	bf08      	it	eq
 800054c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000550:	4770      	bx	lr
 8000552:	f092 0f00 	teq	r2, #0
 8000556:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800055a:	bf02      	ittt	eq
 800055c:	0040      	lsleq	r0, r0, #1
 800055e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000562:	3a01      	subeq	r2, #1
 8000564:	d0f9      	beq.n	800055a <__aeabi_fmul+0xce>
 8000566:	ea40 000c 	orr.w	r0, r0, ip
 800056a:	f093 0f00 	teq	r3, #0
 800056e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000572:	bf02      	ittt	eq
 8000574:	0049      	lsleq	r1, r1, #1
 8000576:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800057a:	3b01      	subeq	r3, #1
 800057c:	d0f9      	beq.n	8000572 <__aeabi_fmul+0xe6>
 800057e:	ea41 010c 	orr.w	r1, r1, ip
 8000582:	e78f      	b.n	80004a4 <__aeabi_fmul+0x18>
 8000584:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000588:	ea92 0f0c 	teq	r2, ip
 800058c:	bf18      	it	ne
 800058e:	ea93 0f0c 	teqne	r3, ip
 8000592:	d00a      	beq.n	80005aa <__aeabi_fmul+0x11e>
 8000594:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000598:	bf18      	it	ne
 800059a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800059e:	d1d8      	bne.n	8000552 <__aeabi_fmul+0xc6>
 80005a0:	ea80 0001 	eor.w	r0, r0, r1
 80005a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a8:	4770      	bx	lr
 80005aa:	f090 0f00 	teq	r0, #0
 80005ae:	bf17      	itett	ne
 80005b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005b4:	4608      	moveq	r0, r1
 80005b6:	f091 0f00 	teqne	r1, #0
 80005ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005be:	d014      	beq.n	80005ea <__aeabi_fmul+0x15e>
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d101      	bne.n	80005ca <__aeabi_fmul+0x13e>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	d10f      	bne.n	80005ea <__aeabi_fmul+0x15e>
 80005ca:	ea93 0f0c 	teq	r3, ip
 80005ce:	d103      	bne.n	80005d8 <__aeabi_fmul+0x14c>
 80005d0:	024b      	lsls	r3, r1, #9
 80005d2:	bf18      	it	ne
 80005d4:	4608      	movne	r0, r1
 80005d6:	d108      	bne.n	80005ea <__aeabi_fmul+0x15e>
 80005d8:	ea80 0001 	eor.w	r0, r0, r1
 80005dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005e8:	4770      	bx	lr
 80005ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005f2:	4770      	bx	lr

080005f4 <__aeabi_drsub>:
 80005f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e002      	b.n	8000600 <__adddf3>
 80005fa:	bf00      	nop

080005fc <__aeabi_dsub>:
 80005fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000600 <__adddf3>:
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000606:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800060a:	ea94 0f05 	teq	r4, r5
 800060e:	bf08      	it	eq
 8000610:	ea90 0f02 	teqeq	r0, r2
 8000614:	bf1f      	itttt	ne
 8000616:	ea54 0c00 	orrsne.w	ip, r4, r0
 800061a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800061e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000622:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000626:	f000 80e2 	beq.w	80007ee <__adddf3+0x1ee>
 800062a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800062e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000632:	bfb8      	it	lt
 8000634:	426d      	neglt	r5, r5
 8000636:	dd0c      	ble.n	8000652 <__adddf3+0x52>
 8000638:	442c      	add	r4, r5
 800063a:	ea80 0202 	eor.w	r2, r0, r2
 800063e:	ea81 0303 	eor.w	r3, r1, r3
 8000642:	ea82 0000 	eor.w	r0, r2, r0
 8000646:	ea83 0101 	eor.w	r1, r3, r1
 800064a:	ea80 0202 	eor.w	r2, r0, r2
 800064e:	ea81 0303 	eor.w	r3, r1, r3
 8000652:	2d36      	cmp	r5, #54	; 0x36
 8000654:	bf88      	it	hi
 8000656:	bd30      	pophi	{r4, r5, pc}
 8000658:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800065c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000660:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000664:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000668:	d002      	beq.n	8000670 <__adddf3+0x70>
 800066a:	4240      	negs	r0, r0
 800066c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000670:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000674:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000678:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800067c:	d002      	beq.n	8000684 <__adddf3+0x84>
 800067e:	4252      	negs	r2, r2
 8000680:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000684:	ea94 0f05 	teq	r4, r5
 8000688:	f000 80a7 	beq.w	80007da <__adddf3+0x1da>
 800068c:	f1a4 0401 	sub.w	r4, r4, #1
 8000690:	f1d5 0e20 	rsbs	lr, r5, #32
 8000694:	db0d      	blt.n	80006b2 <__adddf3+0xb2>
 8000696:	fa02 fc0e 	lsl.w	ip, r2, lr
 800069a:	fa22 f205 	lsr.w	r2, r2, r5
 800069e:	1880      	adds	r0, r0, r2
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80006a8:	1880      	adds	r0, r0, r2
 80006aa:	fa43 f305 	asr.w	r3, r3, r5
 80006ae:	4159      	adcs	r1, r3
 80006b0:	e00e      	b.n	80006d0 <__adddf3+0xd0>
 80006b2:	f1a5 0520 	sub.w	r5, r5, #32
 80006b6:	f10e 0e20 	add.w	lr, lr, #32
 80006ba:	2a01      	cmp	r2, #1
 80006bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80006c0:	bf28      	it	cs
 80006c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006c6:	fa43 f305 	asr.w	r3, r3, r5
 80006ca:	18c0      	adds	r0, r0, r3
 80006cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d4:	d507      	bpl.n	80006e6 <__adddf3+0xe6>
 80006d6:	f04f 0e00 	mov.w	lr, #0
 80006da:	f1dc 0c00 	rsbs	ip, ip, #0
 80006de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80006e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80006ea:	d31b      	bcc.n	8000724 <__adddf3+0x124>
 80006ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80006f0:	d30c      	bcc.n	800070c <__adddf3+0x10c>
 80006f2:	0849      	lsrs	r1, r1, #1
 80006f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80006f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006fc:	f104 0401 	add.w	r4, r4, #1
 8000700:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000704:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000708:	f080 809a 	bcs.w	8000840 <__adddf3+0x240>
 800070c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000710:	bf08      	it	eq
 8000712:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000716:	f150 0000 	adcs.w	r0, r0, #0
 800071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071e:	ea41 0105 	orr.w	r1, r1, r5
 8000722:	bd30      	pop	{r4, r5, pc}
 8000724:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000728:	4140      	adcs	r0, r0
 800072a:	eb41 0101 	adc.w	r1, r1, r1
 800072e:	3c01      	subs	r4, #1
 8000730:	bf28      	it	cs
 8000732:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000736:	d2e9      	bcs.n	800070c <__adddf3+0x10c>
 8000738:	f091 0f00 	teq	r1, #0
 800073c:	bf04      	itt	eq
 800073e:	4601      	moveq	r1, r0
 8000740:	2000      	moveq	r0, #0
 8000742:	fab1 f381 	clz	r3, r1
 8000746:	bf08      	it	eq
 8000748:	3320      	addeq	r3, #32
 800074a:	f1a3 030b 	sub.w	r3, r3, #11
 800074e:	f1b3 0220 	subs.w	r2, r3, #32
 8000752:	da0c      	bge.n	800076e <__adddf3+0x16e>
 8000754:	320c      	adds	r2, #12
 8000756:	dd08      	ble.n	800076a <__adddf3+0x16a>
 8000758:	f102 0c14 	add.w	ip, r2, #20
 800075c:	f1c2 020c 	rsb	r2, r2, #12
 8000760:	fa01 f00c 	lsl.w	r0, r1, ip
 8000764:	fa21 f102 	lsr.w	r1, r1, r2
 8000768:	e00c      	b.n	8000784 <__adddf3+0x184>
 800076a:	f102 0214 	add.w	r2, r2, #20
 800076e:	bfd8      	it	le
 8000770:	f1c2 0c20 	rsble	ip, r2, #32
 8000774:	fa01 f102 	lsl.w	r1, r1, r2
 8000778:	fa20 fc0c 	lsr.w	ip, r0, ip
 800077c:	bfdc      	itt	le
 800077e:	ea41 010c 	orrle.w	r1, r1, ip
 8000782:	4090      	lslle	r0, r2
 8000784:	1ae4      	subs	r4, r4, r3
 8000786:	bfa2      	ittt	ge
 8000788:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800078c:	4329      	orrge	r1, r5
 800078e:	bd30      	popge	{r4, r5, pc}
 8000790:	ea6f 0404 	mvn.w	r4, r4
 8000794:	3c1f      	subs	r4, #31
 8000796:	da1c      	bge.n	80007d2 <__adddf3+0x1d2>
 8000798:	340c      	adds	r4, #12
 800079a:	dc0e      	bgt.n	80007ba <__adddf3+0x1ba>
 800079c:	f104 0414 	add.w	r4, r4, #20
 80007a0:	f1c4 0220 	rsb	r2, r4, #32
 80007a4:	fa20 f004 	lsr.w	r0, r0, r4
 80007a8:	fa01 f302 	lsl.w	r3, r1, r2
 80007ac:	ea40 0003 	orr.w	r0, r0, r3
 80007b0:	fa21 f304 	lsr.w	r3, r1, r4
 80007b4:	ea45 0103 	orr.w	r1, r5, r3
 80007b8:	bd30      	pop	{r4, r5, pc}
 80007ba:	f1c4 040c 	rsb	r4, r4, #12
 80007be:	f1c4 0220 	rsb	r2, r4, #32
 80007c2:	fa20 f002 	lsr.w	r0, r0, r2
 80007c6:	fa01 f304 	lsl.w	r3, r1, r4
 80007ca:	ea40 0003 	orr.w	r0, r0, r3
 80007ce:	4629      	mov	r1, r5
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	fa21 f004 	lsr.w	r0, r1, r4
 80007d6:	4629      	mov	r1, r5
 80007d8:	bd30      	pop	{r4, r5, pc}
 80007da:	f094 0f00 	teq	r4, #0
 80007de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80007e2:	bf06      	itte	eq
 80007e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80007e8:	3401      	addeq	r4, #1
 80007ea:	3d01      	subne	r5, #1
 80007ec:	e74e      	b.n	800068c <__adddf3+0x8c>
 80007ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007f2:	bf18      	it	ne
 80007f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007f8:	d029      	beq.n	800084e <__adddf3+0x24e>
 80007fa:	ea94 0f05 	teq	r4, r5
 80007fe:	bf08      	it	eq
 8000800:	ea90 0f02 	teqeq	r0, r2
 8000804:	d005      	beq.n	8000812 <__adddf3+0x212>
 8000806:	ea54 0c00 	orrs.w	ip, r4, r0
 800080a:	bf04      	itt	eq
 800080c:	4619      	moveq	r1, r3
 800080e:	4610      	moveq	r0, r2
 8000810:	bd30      	pop	{r4, r5, pc}
 8000812:	ea91 0f03 	teq	r1, r3
 8000816:	bf1e      	ittt	ne
 8000818:	2100      	movne	r1, #0
 800081a:	2000      	movne	r0, #0
 800081c:	bd30      	popne	{r4, r5, pc}
 800081e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000822:	d105      	bne.n	8000830 <__adddf3+0x230>
 8000824:	0040      	lsls	r0, r0, #1
 8000826:	4149      	adcs	r1, r1
 8000828:	bf28      	it	cs
 800082a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800082e:	bd30      	pop	{r4, r5, pc}
 8000830:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000834:	bf3c      	itt	cc
 8000836:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800083a:	bd30      	popcc	{r4, r5, pc}
 800083c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000840:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000844:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd30      	pop	{r4, r5, pc}
 800084e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000852:	bf1a      	itte	ne
 8000854:	4619      	movne	r1, r3
 8000856:	4610      	movne	r0, r2
 8000858:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800085c:	bf1c      	itt	ne
 800085e:	460b      	movne	r3, r1
 8000860:	4602      	movne	r2, r0
 8000862:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000866:	bf06      	itte	eq
 8000868:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800086c:	ea91 0f03 	teqeq	r1, r3
 8000870:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000874:	bd30      	pop	{r4, r5, pc}
 8000876:	bf00      	nop

08000878 <__aeabi_ui2d>:
 8000878:	f090 0f00 	teq	r0, #0
 800087c:	bf04      	itt	eq
 800087e:	2100      	moveq	r1, #0
 8000880:	4770      	bxeq	lr
 8000882:	b530      	push	{r4, r5, lr}
 8000884:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000888:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800088c:	f04f 0500 	mov.w	r5, #0
 8000890:	f04f 0100 	mov.w	r1, #0
 8000894:	e750      	b.n	8000738 <__adddf3+0x138>
 8000896:	bf00      	nop

08000898 <__aeabi_i2d>:
 8000898:	f090 0f00 	teq	r0, #0
 800089c:	bf04      	itt	eq
 800089e:	2100      	moveq	r1, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	b530      	push	{r4, r5, lr}
 80008a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80008b0:	bf48      	it	mi
 80008b2:	4240      	negmi	r0, r0
 80008b4:	f04f 0100 	mov.w	r1, #0
 80008b8:	e73e      	b.n	8000738 <__adddf3+0x138>
 80008ba:	bf00      	nop

080008bc <__aeabi_f2d>:
 80008bc:	0042      	lsls	r2, r0, #1
 80008be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80008c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80008c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008ca:	bf1f      	itttt	ne
 80008cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80008d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80008d8:	4770      	bxne	lr
 80008da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80008de:	bf08      	it	eq
 80008e0:	4770      	bxeq	lr
 80008e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80008e6:	bf04      	itt	eq
 80008e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80008ec:	4770      	bxeq	lr
 80008ee:	b530      	push	{r4, r5, lr}
 80008f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008fc:	e71c      	b.n	8000738 <__adddf3+0x138>
 80008fe:	bf00      	nop

08000900 <__aeabi_ul2d>:
 8000900:	ea50 0201 	orrs.w	r2, r0, r1
 8000904:	bf08      	it	eq
 8000906:	4770      	bxeq	lr
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	f04f 0500 	mov.w	r5, #0
 800090e:	e00a      	b.n	8000926 <__aeabi_l2d+0x16>

08000910 <__aeabi_l2d>:
 8000910:	ea50 0201 	orrs.w	r2, r0, r1
 8000914:	bf08      	it	eq
 8000916:	4770      	bxeq	lr
 8000918:	b530      	push	{r4, r5, lr}
 800091a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800091e:	d502      	bpl.n	8000926 <__aeabi_l2d+0x16>
 8000920:	4240      	negs	r0, r0
 8000922:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000926:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800092a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800092e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000932:	f43f aed8 	beq.w	80006e6 <__adddf3+0xe6>
 8000936:	f04f 0203 	mov.w	r2, #3
 800093a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800093e:	bf18      	it	ne
 8000940:	3203      	addne	r2, #3
 8000942:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000946:	bf18      	it	ne
 8000948:	3203      	addne	r2, #3
 800094a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800094e:	f1c2 0320 	rsb	r3, r2, #32
 8000952:	fa00 fc03 	lsl.w	ip, r0, r3
 8000956:	fa20 f002 	lsr.w	r0, r0, r2
 800095a:	fa01 fe03 	lsl.w	lr, r1, r3
 800095e:	ea40 000e 	orr.w	r0, r0, lr
 8000962:	fa21 f102 	lsr.w	r1, r1, r2
 8000966:	4414      	add	r4, r2
 8000968:	e6bd      	b.n	80006e6 <__adddf3+0xe6>
 800096a:	bf00      	nop

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_frsub>:
 8000a0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a10:	e002      	b.n	8000a18 <__addsf3>
 8000a12:	bf00      	nop

08000a14 <__aeabi_fsub>:
 8000a14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a18 <__addsf3>:
 8000a18:	0042      	lsls	r2, r0, #1
 8000a1a:	bf1f      	itttt	ne
 8000a1c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a20:	ea92 0f03 	teqne	r2, r3
 8000a24:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a28:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a2c:	d06a      	beq.n	8000b04 <__addsf3+0xec>
 8000a2e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a32:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a36:	bfc1      	itttt	gt
 8000a38:	18d2      	addgt	r2, r2, r3
 8000a3a:	4041      	eorgt	r1, r0
 8000a3c:	4048      	eorgt	r0, r1
 8000a3e:	4041      	eorgt	r1, r0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	2b19      	cmp	r3, #25
 8000a46:	bf88      	it	hi
 8000a48:	4770      	bxhi	lr
 8000a4a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4249      	negne	r1, r1
 8000a6a:	ea92 0f03 	teq	r2, r3
 8000a6e:	d03f      	beq.n	8000af0 <__addsf3+0xd8>
 8000a70:	f1a2 0201 	sub.w	r2, r2, #1
 8000a74:	fa41 fc03 	asr.w	ip, r1, r3
 8000a78:	eb10 000c 	adds.w	r0, r0, ip
 8000a7c:	f1c3 0320 	rsb	r3, r3, #32
 8000a80:	fa01 f103 	lsl.w	r1, r1, r3
 8000a84:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a88:	d502      	bpl.n	8000a90 <__addsf3+0x78>
 8000a8a:	4249      	negs	r1, r1
 8000a8c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a94:	d313      	bcc.n	8000abe <__addsf3+0xa6>
 8000a96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a9a:	d306      	bcc.n	8000aaa <__addsf3+0x92>
 8000a9c:	0840      	lsrs	r0, r0, #1
 8000a9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aa2:	f102 0201 	add.w	r2, r2, #1
 8000aa6:	2afe      	cmp	r2, #254	; 0xfe
 8000aa8:	d251      	bcs.n	8000b4e <__addsf3+0x136>
 8000aaa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ab2:	bf08      	it	eq
 8000ab4:	f020 0001 	biceq.w	r0, r0, #1
 8000ab8:	ea40 0003 	orr.w	r0, r0, r3
 8000abc:	4770      	bx	lr
 8000abe:	0049      	lsls	r1, r1, #1
 8000ac0:	eb40 0000 	adc.w	r0, r0, r0
 8000ac4:	3a01      	subs	r2, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000acc:	d2ed      	bcs.n	8000aaa <__addsf3+0x92>
 8000ace:	fab0 fc80 	clz	ip, r0
 8000ad2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ad6:	ebb2 020c 	subs.w	r2, r2, ip
 8000ada:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ade:	bfaa      	itet	ge
 8000ae0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ae4:	4252      	neglt	r2, r2
 8000ae6:	4318      	orrge	r0, r3
 8000ae8:	bfbc      	itt	lt
 8000aea:	40d0      	lsrlt	r0, r2
 8000aec:	4318      	orrlt	r0, r3
 8000aee:	4770      	bx	lr
 8000af0:	f092 0f00 	teq	r2, #0
 8000af4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af8:	bf06      	itte	eq
 8000afa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000afe:	3201      	addeq	r2, #1
 8000b00:	3b01      	subne	r3, #1
 8000b02:	e7b5      	b.n	8000a70 <__addsf3+0x58>
 8000b04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b0c:	bf18      	it	ne
 8000b0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b12:	d021      	beq.n	8000b58 <__addsf3+0x140>
 8000b14:	ea92 0f03 	teq	r2, r3
 8000b18:	d004      	beq.n	8000b24 <__addsf3+0x10c>
 8000b1a:	f092 0f00 	teq	r2, #0
 8000b1e:	bf08      	it	eq
 8000b20:	4608      	moveq	r0, r1
 8000b22:	4770      	bx	lr
 8000b24:	ea90 0f01 	teq	r0, r1
 8000b28:	bf1c      	itt	ne
 8000b2a:	2000      	movne	r0, #0
 8000b2c:	4770      	bxne	lr
 8000b2e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b32:	d104      	bne.n	8000b3e <__addsf3+0x126>
 8000b34:	0040      	lsls	r0, r0, #1
 8000b36:	bf28      	it	cs
 8000b38:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	4770      	bx	lr
 8000b3e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b42:	bf3c      	itt	cc
 8000b44:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bxcc	lr
 8000b4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b4e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b56:	4770      	bx	lr
 8000b58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b5c:	bf16      	itet	ne
 8000b5e:	4608      	movne	r0, r1
 8000b60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b64:	4601      	movne	r1, r0
 8000b66:	0242      	lsls	r2, r0, #9
 8000b68:	bf06      	itte	eq
 8000b6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b6e:	ea90 0f01 	teqeq	r0, r1
 8000b72:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_ui2f>:
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	e004      	b.n	8000b88 <__aeabi_i2f+0x8>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_i2f>:
 8000b80:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	bf48      	it	mi
 8000b86:	4240      	negmi	r0, r0
 8000b88:	ea5f 0c00 	movs.w	ip, r0
 8000b8c:	bf08      	it	eq
 8000b8e:	4770      	bxeq	lr
 8000b90:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b94:	4601      	mov	r1, r0
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	e01c      	b.n	8000bd6 <__aeabi_l2f+0x2a>

08000b9c <__aeabi_ul2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	e00a      	b.n	8000bc0 <__aeabi_l2f+0x14>
 8000baa:	bf00      	nop

08000bac <__aeabi_l2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__aeabi_l2f+0x14>
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc0:	ea5f 0c01 	movs.w	ip, r1
 8000bc4:	bf02      	ittt	eq
 8000bc6:	4684      	moveq	ip, r0
 8000bc8:	4601      	moveq	r1, r0
 8000bca:	2000      	moveq	r0, #0
 8000bcc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bda:	fabc f28c 	clz	r2, ip
 8000bde:	3a08      	subs	r2, #8
 8000be0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000be4:	db10      	blt.n	8000c08 <__aeabi_l2f+0x5c>
 8000be6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bea:	4463      	add	r3, ip
 8000bec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f102 0220 	add.w	r2, r2, #32
 8000c0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c10:	f1c2 0220 	rsb	r2, r2, #32
 8000c14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c18:	fa21 f202 	lsr.w	r2, r1, r2
 8000c1c:	eb43 0002 	adc.w	r0, r3, r2
 8000c20:	bf08      	it	eq
 8000c22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c26:	4770      	bx	lr

08000c28 <__gesf2>:
 8000c28:	f04f 3cff 	mov.w	ip, #4294967295
 8000c2c:	e006      	b.n	8000c3c <__cmpsf2+0x4>
 8000c2e:	bf00      	nop

08000c30 <__lesf2>:
 8000c30:	f04f 0c01 	mov.w	ip, #1
 8000c34:	e002      	b.n	8000c3c <__cmpsf2+0x4>
 8000c36:	bf00      	nop

08000c38 <__cmpsf2>:
 8000c38:	f04f 0c01 	mov.w	ip, #1
 8000c3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	bf18      	it	ne
 8000c4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c52:	d011      	beq.n	8000c78 <__cmpsf2+0x40>
 8000c54:	b001      	add	sp, #4
 8000c56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c5a:	bf18      	it	ne
 8000c5c:	ea90 0f01 	teqne	r0, r1
 8000c60:	bf58      	it	pl
 8000c62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c66:	bf88      	it	hi
 8000c68:	17c8      	asrhi	r0, r1, #31
 8000c6a:	bf38      	it	cc
 8000c6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c70:	bf18      	it	ne
 8000c72:	f040 0001 	orrne.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	d102      	bne.n	8000c84 <__cmpsf2+0x4c>
 8000c7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c82:	d105      	bne.n	8000c90 <__cmpsf2+0x58>
 8000c84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c88:	d1e4      	bne.n	8000c54 <__cmpsf2+0x1c>
 8000c8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c8e:	d0e1      	beq.n	8000c54 <__cmpsf2+0x1c>
 8000c90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_cfrcmple>:
 8000c98:	4684      	mov	ip, r0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	4661      	mov	r1, ip
 8000c9e:	e7ff      	b.n	8000ca0 <__aeabi_cfcmpeq>

08000ca0 <__aeabi_cfcmpeq>:
 8000ca0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ca2:	f7ff ffc9 	bl	8000c38 <__cmpsf2>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	bf48      	it	mi
 8000caa:	f110 0f00 	cmnmi.w	r0, #0
 8000cae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cb0 <__aeabi_fcmpeq>:
 8000cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb4:	f7ff fff4 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000cb8:	bf0c      	ite	eq
 8000cba:	2001      	moveq	r0, #1
 8000cbc:	2000      	movne	r0, #0
 8000cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_fcmplt>:
 8000cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc8:	f7ff ffea 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000ccc:	bf34      	ite	cc
 8000cce:	2001      	movcc	r0, #1
 8000cd0:	2000      	movcs	r0, #0
 8000cd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fcmple>:
 8000cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cdc:	f7ff ffe0 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000ce0:	bf94      	ite	ls
 8000ce2:	2001      	movls	r0, #1
 8000ce4:	2000      	movhi	r0, #0
 8000ce6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cea:	bf00      	nop

08000cec <__aeabi_fcmpge>:
 8000cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf0:	f7ff ffd2 	bl	8000c98 <__aeabi_cfrcmple>
 8000cf4:	bf94      	ite	ls
 8000cf6:	2001      	movls	r0, #1
 8000cf8:	2000      	movhi	r0, #0
 8000cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfe:	bf00      	nop

08000d00 <__aeabi_fcmpgt>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff ffc8 	bl	8000c98 <__aeabi_cfrcmple>
 8000d08:	bf34      	ite	cc
 8000d0a:	2001      	movcc	r0, #1
 8000d0c:	2000      	movcs	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_f2iz>:
 8000d14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d18:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d1c:	d30f      	bcc.n	8000d3e <__aeabi_f2iz+0x2a>
 8000d1e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d26:	d90d      	bls.n	8000d44 <__aeabi_f2iz+0x30>
 8000d28:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d30:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d34:	fa23 f002 	lsr.w	r0, r3, r2
 8000d38:	bf18      	it	ne
 8000d3a:	4240      	negne	r0, r0
 8000d3c:	4770      	bx	lr
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	4770      	bx	lr
 8000d44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d48:	d101      	bne.n	8000d4e <__aeabi_f2iz+0x3a>
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	d105      	bne.n	8000d5a <__aeabi_f2iz+0x46>
 8000d4e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d58:	4770      	bx	lr
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	4770      	bx	lr

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x28>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x28>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 fd01 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	200f      	movs	r0, #15
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f003 fd62 	bl	8004844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fd19 	bl	80017e2 <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 fce1 	bl	800178e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	20000004 	.word	0x20000004
 8000de8:	20000000 	.word	0x20000000

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000004 	.word	0x20000004
 8000e0c:	2000007c 	.word	0x2000007c

08000e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	2000007c 	.word	0x2000007c

08000e24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e0ce      	b.n	8000fe4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d109      	bne.n	8000e68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f003 f904 	bl	8004070 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fb11 	bl	8001490 <ADC_ConversionStop_Disable>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f040 80a9 	bne.w	8000fd2 <HAL_ADC_Init+0x1ae>
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 80a5 	bne.w	8000fd2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e90:	f023 0302 	bic.w	r3, r3, #2
 8000e94:	f043 0202 	orr.w	r2, r3, #2
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4951      	ldr	r1, [pc, #324]	; (8000fec <HAL_ADC_Init+0x1c8>)
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d10a      	bne.n	8000ec0 <HAL_ADC_Init+0x9c>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000eb2:	d002      	beq.n	8000eba <HAL_ADC_Init+0x96>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	e004      	b.n	8000ec4 <HAL_ADC_Init+0xa0>
 8000eba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ebe:	e001      	b.n	8000ec4 <HAL_ADC_Init+0xa0>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ec4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7b1b      	ldrb	r3, [r3, #12]
 8000eca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ecc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000edc:	d003      	beq.n	8000ee6 <HAL_ADC_Init+0xc2>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d102      	bne.n	8000eec <HAL_ADC_Init+0xc8>
 8000ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eea:	e000      	b.n	8000eee <HAL_ADC_Init+0xca>
 8000eec:	2300      	movs	r3, #0
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7d1b      	ldrb	r3, [r3, #20]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d119      	bne.n	8000f30 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7b1b      	ldrb	r3, [r3, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d109      	bne.n	8000f18 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	035a      	lsls	r2, r3, #13
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	e00b      	b.n	8000f30 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	f043 0220 	orr.w	r2, r3, #32
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	f043 0201 	orr.w	r2, r3, #1
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <HAL_ADC_Init+0x1cc>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f60:	d003      	beq.n	8000f6a <HAL_ADC_Init+0x146>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d104      	bne.n	8000f74 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	051b      	lsls	r3, r3, #20
 8000f72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_ADC_Init+0x1d0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d10b      	bne.n	8000fb0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	f023 0303 	bic.w	r3, r3, #3
 8000fa6:	f043 0201 	orr.w	r2, r3, #1
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fae:	e018      	b.n	8000fe2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	f023 0312 	bic.w	r3, r3, #18
 8000fb8:	f043 0210 	orr.w	r2, r3, #16
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	f043 0201 	orr.w	r2, r3, #1
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fd0:	e007      	b.n	8000fe2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	f043 0210 	orr.w	r2, r3, #16
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013c00 	.word	0x40013c00
 8000ff0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ff4:	ff1f0efe 	.word	0xff1f0efe

08000ff8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a64      	ldr	r2, [pc, #400]	; (80011a0 <HAL_ADC_Start_DMA+0x1a8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d004      	beq.n	800101c <HAL_ADC_Start_DMA+0x24>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a63      	ldr	r2, [pc, #396]	; (80011a4 <HAL_ADC_Start_DMA+0x1ac>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d106      	bne.n	800102a <HAL_ADC_Start_DMA+0x32>
 800101c:	4b60      	ldr	r3, [pc, #384]	; (80011a0 <HAL_ADC_Start_DMA+0x1a8>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001024:	2b00      	cmp	r3, #0
 8001026:	f040 80b3 	bne.w	8001190 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <HAL_ADC_Start_DMA+0x40>
 8001034:	2302      	movs	r3, #2
 8001036:	e0ae      	b.n	8001196 <HAL_ADC_Start_DMA+0x19e>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f000 f9cb 	bl	80013dc <ADC_Enable>
 8001046:	4603      	mov	r3, r0
 8001048:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800104a:	7dfb      	ldrb	r3, [r7, #23]
 800104c:	2b00      	cmp	r3, #0
 800104e:	f040 809a 	bne.w	8001186 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001056:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800105a:	f023 0301 	bic.w	r3, r3, #1
 800105e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <HAL_ADC_Start_DMA+0x1ac>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d105      	bne.n	800107c <HAL_ADC_Start_DMA+0x84>
 8001070:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <HAL_ADC_Start_DMA+0x1a8>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d115      	bne.n	80010a8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001092:	2b00      	cmp	r3, #0
 8001094:	d026      	beq.n	80010e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800109e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010a6:	e01d      	b.n	80010e4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a39      	ldr	r2, [pc, #228]	; (80011a0 <HAL_ADC_Start_DMA+0x1a8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d004      	beq.n	80010c8 <HAL_ADC_Start_DMA+0xd0>
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a38      	ldr	r2, [pc, #224]	; (80011a4 <HAL_ADC_Start_DMA+0x1ac>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d10d      	bne.n	80010e4 <HAL_ADC_Start_DMA+0xec>
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <HAL_ADC_Start_DMA+0x1a8>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d007      	beq.n	80010e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	f023 0206 	bic.w	r2, r3, #6
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80010fc:	e002      	b.n	8001104 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <HAL_ADC_Start_DMA+0x1b0>)
 8001112:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a24      	ldr	r2, [pc, #144]	; (80011ac <HAL_ADC_Start_DMA+0x1b4>)
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <HAL_ADC_Start_DMA+0x1b8>)
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f06f 0202 	mvn.w	r2, #2
 800112c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800113c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6a18      	ldr	r0, [r3, #32]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	334c      	adds	r3, #76	; 0x4c
 8001148:	4619      	mov	r1, r3
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f000 fbcb 	bl	80018e8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800115c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001160:	d108      	bne.n	8001174 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001170:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001172:	e00f      	b.n	8001194 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001182:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001184:	e006      	b.n	8001194 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800118e:	e001      	b.n	8001194 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001194:	7dfb      	ldrb	r3, [r7, #23]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012400 	.word	0x40012400
 80011a4:	40012800 	.word	0x40012800
 80011a8:	08001513 	.word	0x08001513
 80011ac:	0800158f 	.word	0x0800158f
 80011b0:	080015ab 	.word	0x080015ab

080011b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_ADC_ConfigChannel+0x20>
 8001208:	2302      	movs	r3, #2
 800120a:	e0dc      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x1da>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b06      	cmp	r3, #6
 800121a:	d81c      	bhi.n	8001256 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	3b05      	subs	r3, #5
 800122e:	221f      	movs	r2, #31
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	4019      	ands	r1, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	3b05      	subs	r3, #5
 8001248:	fa00 f203 	lsl.w	r2, r0, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	635a      	str	r2, [r3, #52]	; 0x34
 8001254:	e03c      	b.n	80012d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b0c      	cmp	r3, #12
 800125c:	d81c      	bhi.n	8001298 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b23      	subs	r3, #35	; 0x23
 8001270:	221f      	movs	r2, #31
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	4019      	ands	r1, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	3b23      	subs	r3, #35	; 0x23
 800128a:	fa00 f203 	lsl.w	r2, r0, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	631a      	str	r2, [r3, #48]	; 0x30
 8001296:	e01b      	b.n	80012d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	3b41      	subs	r3, #65	; 0x41
 80012aa:	221f      	movs	r2, #31
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4019      	ands	r1, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	3b41      	subs	r3, #65	; 0x41
 80012c4:	fa00 f203 	lsl.w	r2, r0, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d91c      	bls.n	8001312 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68d9      	ldr	r1, [r3, #12]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	3b1e      	subs	r3, #30
 80012ea:	2207      	movs	r2, #7
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4019      	ands	r1, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6898      	ldr	r0, [r3, #8]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	3b1e      	subs	r3, #30
 8001304:	fa00 f203 	lsl.w	r2, r0, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	e019      	b.n	8001346 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6919      	ldr	r1, [r3, #16]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	2207      	movs	r2, #7
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	4019      	ands	r1, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6898      	ldr	r0, [r3, #8]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4613      	mov	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	fa00 f203 	lsl.w	r2, r0, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d003      	beq.n	8001356 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001352:	2b11      	cmp	r3, #17
 8001354:	d132      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d125      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d126      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800137c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b10      	cmp	r3, #16
 8001384:	d11a      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	0c9a      	lsrs	r2, r3, #18
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800139c:	e002      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f9      	bne.n	800139e <HAL_ADC_ConfigChannel+0x1b2>
 80013aa:	e007      	b.n	80013bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	f043 0220 	orr.w	r2, r3, #32
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40012400 	.word	0x40012400
 80013d4:	2000000c 	.word	0x2000000c
 80013d8:	431bde83 	.word	0x431bde83

080013dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d040      	beq.n	800147c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0201 	orr.w	r2, r2, #1
 8001408:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <ADC_Enable+0xac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1f      	ldr	r2, [pc, #124]	; (800148c <ADC_Enable+0xb0>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	0c9b      	lsrs	r3, r3, #18
 8001416:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001418:	e002      	b.n	8001420 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	3b01      	subs	r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f9      	bne.n	800141a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001426:	f7ff fcf3 	bl	8000e10 <HAL_GetTick>
 800142a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800142c:	e01f      	b.n	800146e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800142e:	f7ff fcef 	bl	8000e10 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d918      	bls.n	800146e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b01      	cmp	r3, #1
 8001448:	d011      	beq.n	800146e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	f043 0210 	orr.w	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	f043 0201 	orr.w	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e007      	b.n	800147e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d1d8      	bne.n	800142e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000000c 	.word	0x2000000c
 800148c:	431bde83 	.word	0x431bde83

08001490 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d12e      	bne.n	8001508 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0201 	bic.w	r2, r2, #1
 80014b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ba:	f7ff fca9 	bl	8000e10 <HAL_GetTick>
 80014be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014c0:	e01b      	b.n	80014fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014c2:	f7ff fca5 	bl	8000e10 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d914      	bls.n	80014fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d10d      	bne.n	80014fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e007      	b.n	800150a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b01      	cmp	r3, #1
 8001506:	d0dc      	beq.n	80014c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001528:	2b00      	cmp	r3, #0
 800152a:	d127      	bne.n	800157c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001542:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001546:	d115      	bne.n	8001574 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800154c:	2b00      	cmp	r3, #0
 800154e:	d111      	bne.n	8001574 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff fe1d 	bl	80011b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800157a:	e004      	b.n	8001586 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4798      	blx	r3
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f7ff fe12 	bl	80011c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	f043 0204 	orr.w	r2, r3, #4
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f7ff fe01 	bl	80011d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4906      	ldr	r1, [pc, #24]	; (8001678 <__NVIC_EnableIRQ+0x34>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001744:	d301      	bcc.n	800174a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2301      	movs	r3, #1
 8001748:	e00f      	b.n	800176a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <SysTick_Config+0x40>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001752:	210f      	movs	r1, #15
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f7ff ff90 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <SysTick_Config+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <SysTick_Config+0x40>)
 8001764:	2207      	movs	r2, #7
 8001766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff2d 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff42 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff90 	bl	80016d0 <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff5f 	bl	800167c <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff35 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffa2 	bl	8001734 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e059      	b.n	80018c6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_DMA_Init+0xd4>)
 800181a:	429a      	cmp	r2, r3
 800181c:	d80f      	bhi.n	800183e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_DMA_Init+0xd8>)
 8001826:	4413      	add	r3, r2
 8001828:	4a2b      	ldr	r2, [pc, #172]	; (80018d8 <HAL_DMA_Init+0xdc>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a28      	ldr	r2, [pc, #160]	; (80018dc <HAL_DMA_Init+0xe0>)
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
 800183c:	e00e      	b.n	800185c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <HAL_DMA_Init+0xe4>)
 8001846:	4413      	add	r3, r2
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_DMA_Init+0xdc>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	009a      	lsls	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_DMA_Init+0xe8>)
 800185a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001872:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001876:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40020407 	.word	0x40020407
 80018d4:	bffdfff8 	.word	0xbffdfff8
 80018d8:	cccccccd 	.word	0xcccccccd
 80018dc:	40020000 	.word	0x40020000
 80018e0:	bffdfbf8 	.word	0xbffdfbf8
 80018e4:	40020400 	.word	0x40020400

080018e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_DMA_Start_IT+0x20>
 8001904:	2302      	movs	r3, #2
 8001906:	e04b      	b.n	80019a0 <HAL_DMA_Start_IT+0xb8>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d13a      	bne.n	8001992 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2202      	movs	r2, #2
 8001920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 fa6d 	bl	8001e20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 020e 	orr.w	r2, r2, #14
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e00f      	b.n	8001980 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0204 	bic.w	r2, r2, #4
 800196e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 020a 	orr.w	r2, r2, #10
 800197e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e005      	b.n	800199e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800199a:	2302      	movs	r3, #2
 800199c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800199e:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	2204      	movs	r2, #4
 80019c6:	409a      	lsls	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80f1 	beq.w	8001bb4 <HAL_DMA_IRQHandler+0x20c>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80eb 	beq.w	8001bb4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0204 	bic.w	r2, r2, #4
 80019fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <HAL_DMA_IRQHandler+0x1d8>)
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d958      	bls.n	8001aba <HAL_DMA_IRQHandler+0x112>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a5d      	ldr	r2, [pc, #372]	; (8001b84 <HAL_DMA_IRQHandler+0x1dc>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d04f      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x10a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5c      	ldr	r2, [pc, #368]	; (8001b88 <HAL_DMA_IRQHandler+0x1e0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d048      	beq.n	8001aae <HAL_DMA_IRQHandler+0x106>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a5a      	ldr	r2, [pc, #360]	; (8001b8c <HAL_DMA_IRQHandler+0x1e4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d040      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x100>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a59      	ldr	r2, [pc, #356]	; (8001b90 <HAL_DMA_IRQHandler+0x1e8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d038      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0xfa>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a57      	ldr	r2, [pc, #348]	; (8001b94 <HAL_DMA_IRQHandler+0x1ec>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d030      	beq.n	8001a9c <HAL_DMA_IRQHandler+0xf4>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a56      	ldr	r2, [pc, #344]	; (8001b98 <HAL_DMA_IRQHandler+0x1f0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d028      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xee>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a4d      	ldr	r2, [pc, #308]	; (8001b80 <HAL_DMA_IRQHandler+0x1d8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d020      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xe8>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <HAL_DMA_IRQHandler+0x1f4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d019      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xe4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	; (8001ba0 <HAL_DMA_IRQHandler+0x1f8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d012      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xe0>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a4f      	ldr	r2, [pc, #316]	; (8001ba4 <HAL_DMA_IRQHandler+0x1fc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00a      	beq.n	8001a82 <HAL_DMA_IRQHandler+0xda>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a4d      	ldr	r2, [pc, #308]	; (8001ba8 <HAL_DMA_IRQHandler+0x200>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d102      	bne.n	8001a7c <HAL_DMA_IRQHandler+0xd4>
 8001a76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a7a:	e01b      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001a7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a80:	e018      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	e015      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001a88:	2340      	movs	r3, #64	; 0x40
 8001a8a:	e013      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	e011      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001a90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a94:	e00e      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a9a:	e00b      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001a9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001aa0:	e008      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aa6:	e005      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aac:	e002      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001aae:	2340      	movs	r3, #64	; 0x40
 8001ab0:	e000      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x10c>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	4a3d      	ldr	r2, [pc, #244]	; (8001bac <HAL_DMA_IRQHandler+0x204>)
 8001ab6:	6053      	str	r3, [r2, #4]
 8001ab8:	e057      	b.n	8001b6a <HAL_DMA_IRQHandler+0x1c2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a31      	ldr	r2, [pc, #196]	; (8001b84 <HAL_DMA_IRQHandler+0x1dc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d04f      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x1bc>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <HAL_DMA_IRQHandler+0x1e0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d048      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x1b8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a2e      	ldr	r2, [pc, #184]	; (8001b8c <HAL_DMA_IRQHandler+0x1e4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d040      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x1b2>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a2c      	ldr	r2, [pc, #176]	; (8001b90 <HAL_DMA_IRQHandler+0x1e8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d038      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x1ac>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2b      	ldr	r2, [pc, #172]	; (8001b94 <HAL_DMA_IRQHandler+0x1ec>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d030      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x1a6>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <HAL_DMA_IRQHandler+0x1f0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d028      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x1a0>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <HAL_DMA_IRQHandler+0x1d8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d020      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x19a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <HAL_DMA_IRQHandler+0x1f4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d019      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x196>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a24      	ldr	r2, [pc, #144]	; (8001ba0 <HAL_DMA_IRQHandler+0x1f8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d012      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x192>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <HAL_DMA_IRQHandler+0x1fc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00a      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x18c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <HAL_DMA_IRQHandler+0x200>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d102      	bne.n	8001b2e <HAL_DMA_IRQHandler+0x186>
 8001b28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b2c:	e01b      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b2e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b32:	e018      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b38:	e015      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b3a:	2340      	movs	r3, #64	; 0x40
 8001b3c:	e013      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e011      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b46:	e00e      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b4c:	e00b      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b52:	e008      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b58:	e005      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5e:	e002      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b60:	2340      	movs	r3, #64	; 0x40
 8001b62:	e000      	b.n	8001b66 <HAL_DMA_IRQHandler+0x1be>
 8001b64:	2304      	movs	r3, #4
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <HAL_DMA_IRQHandler+0x208>)
 8001b68:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8136 	beq.w	8001de0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b7c:	e130      	b.n	8001de0 <HAL_DMA_IRQHandler+0x438>
 8001b7e:	bf00      	nop
 8001b80:	40020080 	.word	0x40020080
 8001b84:	40020008 	.word	0x40020008
 8001b88:	4002001c 	.word	0x4002001c
 8001b8c:	40020030 	.word	0x40020030
 8001b90:	40020044 	.word	0x40020044
 8001b94:	40020058 	.word	0x40020058
 8001b98:	4002006c 	.word	0x4002006c
 8001b9c:	40020408 	.word	0x40020408
 8001ba0:	4002041c 	.word	0x4002041c
 8001ba4:	40020430 	.word	0x40020430
 8001ba8:	40020444 	.word	0x40020444
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	2202      	movs	r2, #2
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80dd 	beq.w	8001d80 <HAL_DMA_IRQHandler+0x3d8>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80d7 	beq.w	8001d80 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10b      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020a 	bic.w	r2, r2, #10
 8001bee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b7b      	ldr	r3, [pc, #492]	; (8001dec <HAL_DMA_IRQHandler+0x444>)
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d958      	bls.n	8001cb6 <HAL_DMA_IRQHandler+0x30e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a79      	ldr	r2, [pc, #484]	; (8001df0 <HAL_DMA_IRQHandler+0x448>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d04f      	beq.n	8001cae <HAL_DMA_IRQHandler+0x306>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a78      	ldr	r2, [pc, #480]	; (8001df4 <HAL_DMA_IRQHandler+0x44c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d048      	beq.n	8001caa <HAL_DMA_IRQHandler+0x302>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a76      	ldr	r2, [pc, #472]	; (8001df8 <HAL_DMA_IRQHandler+0x450>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d040      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0x2fc>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a75      	ldr	r2, [pc, #468]	; (8001dfc <HAL_DMA_IRQHandler+0x454>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d038      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x2f6>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a73      	ldr	r2, [pc, #460]	; (8001e00 <HAL_DMA_IRQHandler+0x458>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d030      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x2f0>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a72      	ldr	r2, [pc, #456]	; (8001e04 <HAL_DMA_IRQHandler+0x45c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d028      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x2ea>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a69      	ldr	r2, [pc, #420]	; (8001dec <HAL_DMA_IRQHandler+0x444>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d020      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x2e4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <HAL_DMA_IRQHandler+0x460>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d019      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x2e0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6c      	ldr	r2, [pc, #432]	; (8001e0c <HAL_DMA_IRQHandler+0x464>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d012      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x2dc>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6b      	ldr	r2, [pc, #428]	; (8001e10 <HAL_DMA_IRQHandler+0x468>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d00a      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x2d6>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a69      	ldr	r2, [pc, #420]	; (8001e14 <HAL_DMA_IRQHandler+0x46c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d102      	bne.n	8001c78 <HAL_DMA_IRQHandler+0x2d0>
 8001c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c76:	e01b      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7c:	e018      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c82:	e015      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001c84:	2320      	movs	r3, #32
 8001c86:	e013      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e011      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c90:	e00e      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001c92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c96:	e00b      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9c:	e008      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001c9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca2:	e005      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca8:	e002      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001caa:	2320      	movs	r3, #32
 8001cac:	e000      	b.n	8001cb0 <HAL_DMA_IRQHandler+0x308>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	4a59      	ldr	r2, [pc, #356]	; (8001e18 <HAL_DMA_IRQHandler+0x470>)
 8001cb2:	6053      	str	r3, [r2, #4]
 8001cb4:	e057      	b.n	8001d66 <HAL_DMA_IRQHandler+0x3be>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a4d      	ldr	r2, [pc, #308]	; (8001df0 <HAL_DMA_IRQHandler+0x448>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d04f      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x3b8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a4b      	ldr	r2, [pc, #300]	; (8001df4 <HAL_DMA_IRQHandler+0x44c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d048      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x3b4>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a4a      	ldr	r2, [pc, #296]	; (8001df8 <HAL_DMA_IRQHandler+0x450>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d040      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x3ae>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a48      	ldr	r2, [pc, #288]	; (8001dfc <HAL_DMA_IRQHandler+0x454>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d038      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x3a8>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_DMA_IRQHandler+0x458>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d030      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x3a2>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a45      	ldr	r2, [pc, #276]	; (8001e04 <HAL_DMA_IRQHandler+0x45c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d028      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x39c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a3d      	ldr	r2, [pc, #244]	; (8001dec <HAL_DMA_IRQHandler+0x444>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d020      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x396>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a41      	ldr	r2, [pc, #260]	; (8001e08 <HAL_DMA_IRQHandler+0x460>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d019      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x392>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a40      	ldr	r2, [pc, #256]	; (8001e0c <HAL_DMA_IRQHandler+0x464>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d012      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x38e>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a3e      	ldr	r2, [pc, #248]	; (8001e10 <HAL_DMA_IRQHandler+0x468>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00a      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x388>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a3d      	ldr	r2, [pc, #244]	; (8001e14 <HAL_DMA_IRQHandler+0x46c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d102      	bne.n	8001d2a <HAL_DMA_IRQHandler+0x382>
 8001d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d28:	e01b      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2e:	e018      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d34:	e015      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d36:	2320      	movs	r3, #32
 8001d38:	e013      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e011      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d42:	e00e      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d48:	e00b      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4e:	e008      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d54:	e005      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d5a:	e002      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e000      	b.n	8001d62 <HAL_DMA_IRQHandler+0x3ba>
 8001d60:	2302      	movs	r3, #2
 8001d62:	4a2e      	ldr	r2, [pc, #184]	; (8001e1c <HAL_DMA_IRQHandler+0x474>)
 8001d64:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d034      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d7e:	e02f      	b.n	8001de0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	2208      	movs	r2, #8
 8001d86:	409a      	lsls	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d028      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x43a>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d023      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 020e 	bic.w	r2, r2, #14
 8001da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f202 	lsl.w	r2, r1, r2
 8001db8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
    }
  }
  return;
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
}
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020080 	.word	0x40020080
 8001df0:	40020008 	.word	0x40020008
 8001df4:	4002001c 	.word	0x4002001c
 8001df8:	40020030 	.word	0x40020030
 8001dfc:	40020044 	.word	0x40020044
 8001e00:	40020058 	.word	0x40020058
 8001e04:	4002006c 	.word	0x4002006c
 8001e08:	40020408 	.word	0x40020408
 8001e0c:	4002041c 	.word	0x4002041c
 8001e10:	40020430 	.word	0x40020430
 8001e14:	40020444 	.word	0x40020444
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40020000 	.word	0x40020000

08001e20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b10      	cmp	r3, #16
 8001e4c:	d108      	bne.n	8001e60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e5e:	e007      	b.n	8001e70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	60da      	str	r2, [r3, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b08b      	sub	sp, #44	; 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e179      	b.n	8002184 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e90:	2201      	movs	r2, #1
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8168 	bne.w	800217e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a96      	ldr	r2, [pc, #600]	; (800210c <HAL_GPIO_Init+0x290>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a94      	ldr	r2, [pc, #592]	; (800210c <HAL_GPIO_Init+0x290>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d875      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ebe:	4a94      	ldr	r2, [pc, #592]	; (8002110 <HAL_GPIO_Init+0x294>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d058      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a92      	ldr	r2, [pc, #584]	; (8002110 <HAL_GPIO_Init+0x294>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d86f      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eca:	4a92      	ldr	r2, [pc, #584]	; (8002114 <HAL_GPIO_Init+0x298>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d052      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a90      	ldr	r2, [pc, #576]	; (8002114 <HAL_GPIO_Init+0x298>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d869      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ed6:	4a90      	ldr	r2, [pc, #576]	; (8002118 <HAL_GPIO_Init+0x29c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04c      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001edc:	4a8e      	ldr	r2, [pc, #568]	; (8002118 <HAL_GPIO_Init+0x29c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d863      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ee2:	4a8e      	ldr	r2, [pc, #568]	; (800211c <HAL_GPIO_Init+0x2a0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d046      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a8c      	ldr	r2, [pc, #560]	; (800211c <HAL_GPIO_Init+0x2a0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d85d      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d82a      	bhi.n	8001f48 <HAL_GPIO_Init+0xcc>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d859      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_GPIO_Init+0x80>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f51 	.word	0x08001f51
 8001f04:	08001f63 	.word	0x08001f63
 8001f08:	08001fa5 	.word	0x08001fa5
 8001f0c:	08001fab 	.word	0x08001fab
 8001f10:	08001fab 	.word	0x08001fab
 8001f14:	08001fab 	.word	0x08001fab
 8001f18:	08001fab 	.word	0x08001fab
 8001f1c:	08001fab 	.word	0x08001fab
 8001f20:	08001fab 	.word	0x08001fab
 8001f24:	08001fab 	.word	0x08001fab
 8001f28:	08001fab 	.word	0x08001fab
 8001f2c:	08001fab 	.word	0x08001fab
 8001f30:	08001fab 	.word	0x08001fab
 8001f34:	08001fab 	.word	0x08001fab
 8001f38:	08001fab 	.word	0x08001fab
 8001f3c:	08001fab 	.word	0x08001fab
 8001f40:	08001f59 	.word	0x08001f59
 8001f44:	08001f6d 	.word	0x08001f6d
 8001f48:	4a75      	ldr	r2, [pc, #468]	; (8002120 <HAL_GPIO_Init+0x2a4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f4e:	e02c      	b.n	8001faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e029      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e024      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	3308      	adds	r3, #8
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e01f      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	330c      	adds	r3, #12
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e01a      	b.n	8001fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e013      	b.n	8001fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	611a      	str	r2, [r3, #16]
          break;
 8001f96:	e009      	b.n	8001fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	615a      	str	r2, [r3, #20]
          break;
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x130>
          break;
 8001faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	; 0xff
 8001fb0:	d801      	bhi.n	8001fb6 <HAL_GPIO_Init+0x13a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_Init+0x13e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_GPIO_Init+0x14c>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x152>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	3b08      	subs	r3, #8
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80c1 	beq.w	800217e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ffc:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_GPIO_Init+0x2a8>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a48      	ldr	r2, [pc, #288]	; (8002124 <HAL_GPIO_Init+0x2a8>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_GPIO_Init+0x2a8>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002014:	4a44      	ldr	r2, [pc, #272]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3c      	ldr	r2, [pc, #240]	; (800212c <HAL_GPIO_Init+0x2b0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d01f      	beq.n	8002080 <HAL_GPIO_Init+0x204>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3b      	ldr	r2, [pc, #236]	; (8002130 <HAL_GPIO_Init+0x2b4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d019      	beq.n	800207c <HAL_GPIO_Init+0x200>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3a      	ldr	r2, [pc, #232]	; (8002134 <HAL_GPIO_Init+0x2b8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d013      	beq.n	8002078 <HAL_GPIO_Init+0x1fc>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a39      	ldr	r2, [pc, #228]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00d      	beq.n	8002074 <HAL_GPIO_Init+0x1f8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a38      	ldr	r2, [pc, #224]	; (800213c <HAL_GPIO_Init+0x2c0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d007      	beq.n	8002070 <HAL_GPIO_Init+0x1f4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a37      	ldr	r2, [pc, #220]	; (8002140 <HAL_GPIO_Init+0x2c4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_GPIO_Init+0x1f0>
 8002068:	2305      	movs	r3, #5
 800206a:	e00a      	b.n	8002082 <HAL_GPIO_Init+0x206>
 800206c:	2306      	movs	r3, #6
 800206e:	e008      	b.n	8002082 <HAL_GPIO_Init+0x206>
 8002070:	2304      	movs	r3, #4
 8002072:	e006      	b.n	8002082 <HAL_GPIO_Init+0x206>
 8002074:	2303      	movs	r3, #3
 8002076:	e004      	b.n	8002082 <HAL_GPIO_Init+0x206>
 8002078:	2302      	movs	r3, #2
 800207a:	e002      	b.n	8002082 <HAL_GPIO_Init+0x206>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_GPIO_Init+0x206>
 8002080:	2300      	movs	r3, #0
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4093      	lsls	r3, r2
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002092:	4925      	ldr	r1, [pc, #148]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	4924      	ldr	r1, [pc, #144]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4920      	ldr	r1, [pc, #128]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	491a      	ldr	r1, [pc, #104]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4916      	ldr	r1, [pc, #88]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d025      	beq.n	8002148 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4910      	ldr	r1, [pc, #64]	; (8002144 <HAL_GPIO_Init+0x2c8>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
 8002108:	e025      	b.n	8002156 <HAL_GPIO_Init+0x2da>
 800210a:	bf00      	nop
 800210c:	10320000 	.word	0x10320000
 8002110:	10310000 	.word	0x10310000
 8002114:	10220000 	.word	0x10220000
 8002118:	10210000 	.word	0x10210000
 800211c:	10120000 	.word	0x10120000
 8002120:	10110000 	.word	0x10110000
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	40010800 	.word	0x40010800
 8002130:	40010c00 	.word	0x40010c00
 8002134:	40011000 	.word	0x40011000
 8002138:	40011400 	.word	0x40011400
 800213c:	40011800 	.word	0x40011800
 8002140:	40011c00 	.word	0x40011c00
 8002144:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_GPIO_Init+0x324>)
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	43db      	mvns	r3, r3
 8002150:	4913      	ldr	r1, [pc, #76]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002152:	4013      	ands	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	490e      	ldr	r1, [pc, #56]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
 800216e:	e006      	b.n	800217e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	43db      	mvns	r3, r3
 8002178:	4909      	ldr	r1, [pc, #36]	; (80021a0 <HAL_GPIO_Init+0x324>)
 800217a:	4013      	ands	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	3301      	adds	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	f47f ae7e 	bne.w	8001e90 <HAL_GPIO_Init+0x14>
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	372c      	adds	r7, #44	; 0x2c
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 f93a 	bl	800446c <HAL_GPIO_EXTI_Callback>
  }
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40010400 	.word	0x40010400

08002204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e272      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002224:	4b92      	ldr	r3, [pc, #584]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b04      	cmp	r3, #4
 800222e:	d00c      	beq.n	800224a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002230:	4b8f      	ldr	r3, [pc, #572]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d112      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
 800223c:	4b8c      	ldr	r3, [pc, #560]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d10b      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224a:	4b89      	ldr	r3, [pc, #548]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d06c      	beq.n	8002330 <HAL_RCC_OscConfig+0x12c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d168      	bne.n	8002330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e24c      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x76>
 800226c:	4b80      	ldr	r3, [pc, #512]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7f      	ldr	r2, [pc, #508]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e02e      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x98>
 8002282:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7a      	ldr	r2, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b78      	ldr	r3, [pc, #480]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a77      	ldr	r2, [pc, #476]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0xbc>
 80022a6:	4b72      	ldr	r3, [pc, #456]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a71      	ldr	r2, [pc, #452]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6e      	ldr	r2, [pc, #440]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 80022c0:	4b6b      	ldr	r3, [pc, #428]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a67      	ldr	r2, [pc, #412]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe fd96 	bl	8000e10 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe fd92 	bl	8000e10 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e200      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe4>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe fd82 	bl	8000e10 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe fd7e 	bl	8000e10 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1ec      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x10c>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d063      	beq.n	8002406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233e:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800234a:	4b49      	ldr	r3, [pc, #292]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x18c>
 8002356:	4b46      	ldr	r3, [pc, #280]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x176>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1c0      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4939      	ldr	r1, [pc, #228]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e03a      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_RCC_OscConfig+0x270>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe fd37 	bl	8000e10 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7fe fd33 	bl	8000e10 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1a1      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4927      	ldr	r1, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <HAL_RCC_OscConfig+0x270>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fd16 	bl	8000e10 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e8:	f7fe fd12 	bl	8000e10 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e180      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d03a      	beq.n	8002488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d019      	beq.n	800244e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7fe fcf6 	bl	8000e10 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7fe fcf2 	bl	8000e10 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e160      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_RCC_OscConfig+0x26c>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002446:	2001      	movs	r0, #1
 8002448:	f000 face 	bl	80029e8 <RCC_Delay>
 800244c:	e01c      	b.n	8002488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_RCC_OscConfig+0x274>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002454:	f7fe fcdc 	bl	8000e10 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245a:	e00f      	b.n	800247c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245c:	f7fe fcd8 	bl	8000e10 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d908      	bls.n	800247c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e146      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	42420000 	.word	0x42420000
 8002478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	4b92      	ldr	r3, [pc, #584]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e9      	bne.n	800245c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a6 	beq.w	80025e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b8b      	ldr	r3, [pc, #556]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a87      	ldr	r2, [pc, #540]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b85      	ldr	r3, [pc, #532]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b82      	ldr	r3, [pc, #520]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ce:	4b7f      	ldr	r3, [pc, #508]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7e      	ldr	r2, [pc, #504]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024da:	f7fe fc99 	bl	8000e10 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7fe fc95 	bl	8000e10 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b64      	cmp	r3, #100	; 0x64
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e103      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	4b75      	ldr	r3, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x312>
 8002508:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a6e      	ldr	r2, [pc, #440]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	e02d      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x334>
 800251e:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	e01c      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x356>
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a60      	ldr	r2, [pc, #384]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a5d      	ldr	r2, [pc, #372]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	e00b      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 800255a:	4b5b      	ldr	r3, [pc, #364]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a5a      	ldr	r2, [pc, #360]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	4b58      	ldr	r3, [pc, #352]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a57      	ldr	r2, [pc, #348]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7fe fc49 	bl	8000e10 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fc45 	bl	8000e10 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0b1      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCC_OscConfig+0x37e>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7fe fc33 	bl	8000e10 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe fc2f 	bl	8000e10 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e09b      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	4b40      	ldr	r3, [pc, #256]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b3c      	ldr	r3, [pc, #240]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a3b      	ldr	r2, [pc, #236]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d061      	beq.n	80026bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d146      	bne.n	800268e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe fc03 	bl	8000e10 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe fbff 	bl	8000e10 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e06d      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002620:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d108      	bne.n	8002648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4921      	ldr	r1, [pc, #132]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a19      	ldr	r1, [r3, #32]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	430b      	orrs	r3, r1
 800265a:	491b      	ldr	r1, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe fbd3 	bl	8000e10 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe fbcf 	bl	8000e10 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x46a>
 800268c:	e035      	b.n	80026fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fe fbbc 	bl	8000e10 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe fbb8 	bl	8000e10 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e026      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x498>
 80026ba:	e01e      	b.n	80026fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e019      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_OscConfig+0x500>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d0      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4965      	ldr	r1, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800276e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d040      	beq.n	8002828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d115      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e073      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06b      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f023 0203 	bic.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4936      	ldr	r1, [pc, #216]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f8:	f7fe fb0a 	bl	8000e10 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f7fe fb06 	bl	8000e10 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e053      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 020c 	and.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	429a      	cmp	r2, r3
 8002826:	d1eb      	bne.n	8002800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d210      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4922      	ldr	r1, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1cc>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1d0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fa68 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40022000 	.word	0x40022000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08006328 	.word	0x08006328
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	20000000 	.word	0x20000000

080028dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028f6:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <HAL_RCC_GetSysClockFreq+0x94>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x30>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x36>
 800290a:	e027      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800290e:	613b      	str	r3, [r7, #16]
      break;
 8002910:	e027      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	4a17      	ldr	r2, [pc, #92]	; (8002978 <HAL_RCC_GetSysClockFreq+0x9c>)
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCC_GetSysClockFreq+0x94>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0c5b      	lsrs	r3, r3, #17
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	4a11      	ldr	r2, [pc, #68]	; (800297c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800293e:	fb03 f202 	mul.w	r2, r3, r2
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e004      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a0c      	ldr	r2, [pc, #48]	; (8002980 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	613b      	str	r3, [r7, #16]
      break;
 800295a:	e002      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800295e:	613b      	str	r3, [r7, #16]
      break;
 8002960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002962:	693b      	ldr	r3, [r7, #16]
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	007a1200 	.word	0x007a1200
 8002978:	08006314 	.word	0x08006314
 800297c:	08006324 	.word	0x08006324
 8002980:	003d0900 	.word	0x003d0900

08002984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b02      	ldr	r3, [pc, #8]	; (8002994 <HAL_RCC_GetHCLKFreq+0x10>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	2000000c 	.word	0x2000000c

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff2 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08006338 	.word	0x08006338

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c4:	f7ff ffde 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0adb      	lsrs	r3, r3, #11
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08006338 	.word	0x08006338

080029e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <RCC_Delay+0x34>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <RCC_Delay+0x38>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0a5b      	lsrs	r3, r3, #9
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a04:	bf00      	nop
  }
  while (Delay --);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	60fa      	str	r2, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f9      	bne.n	8002a04 <RCC_Delay+0x1c>
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	2000000c 	.word	0x2000000c
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d07d      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a44:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4b4c      	ldr	r3, [pc, #304]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4a4b      	ldr	r2, [pc, #300]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	61d3      	str	r3, [r2, #28]
 8002a5c:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d118      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a78:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a42      	ldr	r2, [pc, #264]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a84:	f7fe f9c4 	bl	8000e10 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	e008      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7fe f9c0 	bl	8000e10 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e06d      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aaa:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d02e      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d027      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ad8:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ade:	4a29      	ldr	r2, [pc, #164]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d014      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fe f98f 	bl	8000e10 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe f98b 	bl	8000e10 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e036      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ee      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4917      	ldr	r1, [pc, #92]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	490b      	ldr	r1, [pc, #44]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	4904      	ldr	r1, [pc, #16]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	42420440 	.word	0x42420440

08002b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e041      	b.n	8002c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f001 fff8 	bl	8004bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 fc3a 	bl	8003448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d001      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e044      	b.n	8002cd2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <HAL_TIM_Base_Start_IT+0xac>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d018      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x6c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d013      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x6c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7c:	d00e      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x6c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d009      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x6c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0x6c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a15      	ldr	r2, [pc, #84]	; (8002cec <HAL_TIM_Base_Start_IT+0xbc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d111      	bne.n	8002cc0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d010      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbe:	e007      	b.n	8002cd0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	40012c00 	.word	0x40012c00
 8002ce0:	40013400 	.word	0x40013400
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40000c00 	.word	0x40000c00

08002cf0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e041      	b.n	8002d86 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f839 	bl	8002d8e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f000 fb8a 	bl	8003448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e041      	b.n	8002e36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f001 fed2 	bl	8004b70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f000 fb32 	bl	8003448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <HAL_TIM_PWM_Start+0x24>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e022      	b.n	8002eaa <HAL_TIM_PWM_Start+0x6a>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d109      	bne.n	8002e7e <HAL_TIM_PWM_Start+0x3e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	bf14      	ite	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	2300      	moveq	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	e015      	b.n	8002eaa <HAL_TIM_PWM_Start+0x6a>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d109      	bne.n	8002e98 <HAL_TIM_PWM_Start+0x58>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	bf14      	ite	ne
 8002e90:	2301      	movne	r3, #1
 8002e92:	2300      	moveq	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e008      	b.n	8002eaa <HAL_TIM_PWM_Start+0x6a>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e072      	b.n	8002f98 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0x82>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec0:	e013      	b.n	8002eea <HAL_TIM_PWM_Start+0xaa>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d104      	bne.n	8002ed2 <HAL_TIM_PWM_Start+0x92>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed0:	e00b      	b.n	8002eea <HAL_TIM_PWM_Start+0xaa>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d104      	bne.n	8002ee2 <HAL_TIM_PWM_Start+0xa2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee0:	e003      	b.n	8002eea <HAL_TIM_PWM_Start+0xaa>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	6839      	ldr	r1, [r7, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fcce 	bl	8003894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <HAL_TIM_PWM_Start+0x160>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_TIM_PWM_Start+0xcc>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <HAL_TIM_PWM_Start+0x164>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIM_PWM_Start+0xd0>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_TIM_PWM_Start+0xd2>
 8002f10:	2300      	movs	r3, #0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1d      	ldr	r2, [pc, #116]	; (8002fa0 <HAL_TIM_PWM_Start+0x160>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d018      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x122>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <HAL_TIM_PWM_Start+0x164>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x122>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f42:	d00e      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x122>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_TIM_PWM_Start+0x168>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d009      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x122>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a16      	ldr	r2, [pc, #88]	; (8002fac <HAL_TIM_PWM_Start+0x16c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_TIM_PWM_Start+0x122>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <HAL_TIM_PWM_Start+0x170>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d111      	bne.n	8002f86 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b06      	cmp	r3, #6
 8002f72:	d010      	beq.n	8002f96 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	e007      	b.n	8002f96 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40013400 	.word	0x40013400
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40000c00 	.word	0x40000c00

08002fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d122      	bne.n	8003010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d11b      	bne.n	8003010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0202 	mvn.w	r2, #2
 8002fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa0b 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 8002ffc:	e005      	b.n	800300a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f9fe 	bl	8003400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fa0d 	bl	8003424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b04      	cmp	r3, #4
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b04      	cmp	r3, #4
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0204 	mvn.w	r2, #4
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f9e1 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f9d4 	bl	8003400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f9e3 	bl	8003424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b08      	cmp	r3, #8
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b08      	cmp	r3, #8
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0208 	mvn.w	r2, #8
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2204      	movs	r2, #4
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f9b7 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f9aa 	bl	8003400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f9b9 	bl	8003424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d122      	bne.n	800310c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d11b      	bne.n	800310c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0210 	mvn.w	r2, #16
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2208      	movs	r2, #8
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f98d 	bl	8003412 <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f980 	bl	8003400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f98f 	bl	8003424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b01      	cmp	r3, #1
 8003118:	d10e      	bne.n	8003138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0201 	mvn.w	r2, #1
 8003130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f001 fa34 	bl	80045a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b80      	cmp	r3, #128	; 0x80
 8003144:	d10e      	bne.n	8003164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d107      	bne.n	8003164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fd2e 	bl	8003bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d10e      	bne.n	8003190 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d107      	bne.n	8003190 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f953 	bl	8003436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b20      	cmp	r3, #32
 800319c:	d10e      	bne.n	80031bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d107      	bne.n	80031bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0220 	mvn.w	r2, #32
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fcf9 	bl	8003bae <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80031de:	2302      	movs	r3, #2
 80031e0:	e048      	b.n	8003274 <HAL_TIM_OC_ConfigChannel+0xb0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d839      	bhi.n	8003264 <HAL_TIM_OC_ConfigChannel+0xa0>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800322d 	.word	0x0800322d
 80031fc:	08003265 	.word	0x08003265
 8003200:	08003265 	.word	0x08003265
 8003204:	08003265 	.word	0x08003265
 8003208:	0800323b 	.word	0x0800323b
 800320c:	08003265 	.word	0x08003265
 8003210:	08003265 	.word	0x08003265
 8003214:	08003265 	.word	0x08003265
 8003218:	08003249 	.word	0x08003249
 800321c:	08003265 	.word	0x08003265
 8003220:	08003265 	.word	0x08003265
 8003224:	08003265 	.word	0x08003265
 8003228:	08003257 	.word	0x08003257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f982 	bl	800353c <TIM_OC1_SetConfig>
      break;
 8003238:	e017      	b.n	800326a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f9eb 	bl	800361c <TIM_OC2_SetConfig>
      break;
 8003246:	e010      	b.n	800326a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fa58 	bl	8003704 <TIM_OC3_SetConfig>
      break;
 8003254:	e009      	b.n	800326a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fac5 	bl	80037ec <TIM_OC4_SetConfig>
      break;
 8003262:	e002      	b.n	800326a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
      break;
 8003268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003296:	2302      	movs	r3, #2
 8003298:	e0ae      	b.n	80033f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	f200 809f 	bhi.w	80033e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032e5 	.word	0x080032e5
 80032b4:	080033e9 	.word	0x080033e9
 80032b8:	080033e9 	.word	0x080033e9
 80032bc:	080033e9 	.word	0x080033e9
 80032c0:	08003325 	.word	0x08003325
 80032c4:	080033e9 	.word	0x080033e9
 80032c8:	080033e9 	.word	0x080033e9
 80032cc:	080033e9 	.word	0x080033e9
 80032d0:	08003367 	.word	0x08003367
 80032d4:	080033e9 	.word	0x080033e9
 80032d8:	080033e9 	.word	0x080033e9
 80032dc:	080033e9 	.word	0x080033e9
 80032e0:	080033a7 	.word	0x080033a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f926 	bl	800353c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0208 	orr.w	r2, r2, #8
 80032fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0204 	bic.w	r2, r2, #4
 800330e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6999      	ldr	r1, [r3, #24]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	619a      	str	r2, [r3, #24]
      break;
 8003322:	e064      	b.n	80033ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f976 	bl	800361c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6999      	ldr	r1, [r3, #24]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	021a      	lsls	r2, r3, #8
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	619a      	str	r2, [r3, #24]
      break;
 8003364:	e043      	b.n	80033ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	4618      	mov	r0, r3
 800336e:	f000 f9c9 	bl	8003704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0208 	orr.w	r2, r2, #8
 8003380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0204 	bic.w	r2, r2, #4
 8003390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69d9      	ldr	r1, [r3, #28]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	61da      	str	r2, [r3, #28]
      break;
 80033a4:	e023      	b.n	80033ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fa1d 	bl	80037ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69d9      	ldr	r1, [r3, #28]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	021a      	lsls	r2, r3, #8
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	61da      	str	r2, [r3, #28]
      break;
 80033e6:	e002      	b.n	80033ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	75fb      	strb	r3, [r7, #23]
      break;
 80033ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr

08003412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a33      	ldr	r2, [pc, #204]	; (8003528 <TIM_Base_SetConfig+0xe0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a32      	ldr	r2, [pc, #200]	; (800352c <TIM_Base_SetConfig+0xe4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00f      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d00b      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a2f      	ldr	r2, [pc, #188]	; (8003530 <TIM_Base_SetConfig+0xe8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a2e      	ldr	r2, [pc, #184]	; (8003534 <TIM_Base_SetConfig+0xec>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a2d      	ldr	r2, [pc, #180]	; (8003538 <TIM_Base_SetConfig+0xf0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a22      	ldr	r2, [pc, #136]	; (8003528 <TIM_Base_SetConfig+0xe0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <TIM_Base_SetConfig+0x82>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a21      	ldr	r2, [pc, #132]	; (800352c <TIM_Base_SetConfig+0xe4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00f      	beq.n	80034ca <TIM_Base_SetConfig+0x82>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d00b      	beq.n	80034ca <TIM_Base_SetConfig+0x82>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <TIM_Base_SetConfig+0xe8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_Base_SetConfig+0x82>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <TIM_Base_SetConfig+0xec>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0x82>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <TIM_Base_SetConfig+0xf0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d108      	bne.n	80034dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a09      	ldr	r2, [pc, #36]	; (8003528 <TIM_Base_SetConfig+0xe0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d003      	beq.n	8003510 <TIM_Base_SetConfig+0xc8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a08      	ldr	r2, [pc, #32]	; (800352c <TIM_Base_SetConfig+0xe4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d103      	bne.n	8003518 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	615a      	str	r2, [r3, #20]
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40013400 	.word	0x40013400
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00

0800353c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f023 0201 	bic.w	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 0302 	bic.w	r3, r3, #2
 8003584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a20      	ldr	r2, [pc, #128]	; (8003614 <TIM_OC1_SetConfig+0xd8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_OC1_SetConfig+0x64>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a1f      	ldr	r2, [pc, #124]	; (8003618 <TIM_OC1_SetConfig+0xdc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10c      	bne.n	80035ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0308 	bic.w	r3, r3, #8
 80035a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f023 0304 	bic.w	r3, r3, #4
 80035b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a15      	ldr	r2, [pc, #84]	; (8003614 <TIM_OC1_SetConfig+0xd8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_OC1_SetConfig+0x8e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a14      	ldr	r2, [pc, #80]	; (8003618 <TIM_OC1_SetConfig+0xdc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d111      	bne.n	80035ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	621a      	str	r2, [r3, #32]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40013400 	.word	0x40013400

0800361c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f023 0210 	bic.w	r2, r3, #16
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0320 	bic.w	r3, r3, #32
 8003666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <TIM_OC2_SetConfig+0xe0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_OC2_SetConfig+0x68>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a20      	ldr	r2, [pc, #128]	; (8003700 <TIM_OC2_SetConfig+0xe4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10d      	bne.n	80036a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800369e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a16      	ldr	r2, [pc, #88]	; (80036fc <TIM_OC2_SetConfig+0xe0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_OC2_SetConfig+0x94>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a15      	ldr	r2, [pc, #84]	; (8003700 <TIM_OC2_SetConfig+0xe4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d113      	bne.n	80036d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40013400 	.word	0x40013400

08003704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800374c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <TIM_OC3_SetConfig+0xe0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_OC3_SetConfig+0x66>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <TIM_OC3_SetConfig+0xe4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10d      	bne.n	8003786 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	021b      	lsls	r3, r3, #8
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <TIM_OC3_SetConfig+0xe0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <TIM_OC3_SetConfig+0x92>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <TIM_OC3_SetConfig+0xe4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d113      	bne.n	80037be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800379c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	621a      	str	r2, [r3, #32]
}
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40013400 	.word	0x40013400

080037ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	031b      	lsls	r3, r3, #12
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a11      	ldr	r2, [pc, #68]	; (800388c <TIM_OC4_SetConfig+0xa0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_OC4_SetConfig+0x68>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a10      	ldr	r2, [pc, #64]	; (8003890 <TIM_OC4_SetConfig+0xa4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d109      	bne.n	8003868 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800385a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400

08003894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	2201      	movs	r2, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1a      	ldr	r2, [r3, #32]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	401a      	ands	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1a      	ldr	r2, [r3, #32]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <HAL_TIMEx_PWMN_Start+0x24>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e022      	b.n	8003946 <HAL_TIMEx_PWMN_Start+0x6a>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b04      	cmp	r3, #4
 8003904:	d109      	bne.n	800391a <HAL_TIMEx_PWMN_Start+0x3e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	e015      	b.n	8003946 <HAL_TIMEx_PWMN_Start+0x6a>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d109      	bne.n	8003934 <HAL_TIMEx_PWMN_Start+0x58>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	bf14      	ite	ne
 800392c:	2301      	movne	r3, #1
 800392e:	2300      	moveq	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	e008      	b.n	8003946 <HAL_TIMEx_PWMN_Start+0x6a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	bf14      	ite	ne
 8003940:	2301      	movne	r3, #1
 8003942:	2300      	moveq	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e063      	b.n	8003a16 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d104      	bne.n	800395e <HAL_TIMEx_PWMN_Start+0x82>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800395c:	e013      	b.n	8003986 <HAL_TIMEx_PWMN_Start+0xaa>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d104      	bne.n	800396e <HAL_TIMEx_PWMN_Start+0x92>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800396c:	e00b      	b.n	8003986 <HAL_TIMEx_PWMN_Start+0xaa>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d104      	bne.n	800397e <HAL_TIMEx_PWMN_Start+0xa2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397c:	e003      	b.n	8003986 <HAL_TIMEx_PWMN_Start+0xaa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2204      	movs	r2, #4
 800398c:	6839      	ldr	r1, [r7, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f91f 	bl	8003bd2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <HAL_TIMEx_PWMN_Start+0x144>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d018      	beq.n	80039e0 <HAL_TIMEx_PWMN_Start+0x104>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <HAL_TIMEx_PWMN_Start+0x148>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <HAL_TIMEx_PWMN_Start+0x104>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d00e      	beq.n	80039e0 <HAL_TIMEx_PWMN_Start+0x104>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <HAL_TIMEx_PWMN_Start+0x14c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_TIMEx_PWMN_Start+0x104>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a16      	ldr	r2, [pc, #88]	; (8003a2c <HAL_TIMEx_PWMN_Start+0x150>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIMEx_PWMN_Start+0x104>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <HAL_TIMEx_PWMN_Start+0x154>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d111      	bne.n	8003a04 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d010      	beq.n	8003a14 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0201 	orr.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a02:	e007      	b.n	8003a14 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40013400 	.word	0x40013400
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00

08003a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e050      	b.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a19      	ldr	r2, [pc, #100]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10c      	bne.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40013400 	.word	0x40013400
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00

08003b0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e03d      	b.n	8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	2204      	movs	r2, #4
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	401a      	ands	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	621a      	str	r2, [r3, #32]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e042      	b.n	8003cb2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f001 f851 	bl	8004ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2224      	movs	r2, #36	; 0x24
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f91c 	bl	8003e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b08a      	sub	sp, #40	; 0x28
 8003cbe:	af02      	add	r7, sp, #8
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d16d      	bne.n	8003db6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_UART_Transmit+0x2c>
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e066      	b.n	8003db8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2221      	movs	r2, #33	; 0x21
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cf8:	f7fd f88a 	bl	8000e10 <HAL_GetTick>
 8003cfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	88fa      	ldrh	r2, [r7, #6]
 8003d02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d12:	d108      	bne.n	8003d26 <HAL_UART_Transmit+0x6c>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	e003      	b.n	8003d2e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d2e:	e02a      	b.n	8003d86 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2180      	movs	r1, #128	; 0x80
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f840 	bl	8003dc0 <UART_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e036      	b.n	8003db8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3302      	adds	r3, #2
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e007      	b.n	8003d78 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3301      	adds	r3, #1
 8003d76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1cf      	bne.n	8003d30 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2200      	movs	r2, #0
 8003d98:	2140      	movs	r1, #64	; 0x40
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f810 	bl	8003dc0 <UART_WaitOnFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e006      	b.n	8003db8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e000      	b.n	8003db8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b090      	sub	sp, #64	; 0x40
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd0:	e050      	b.n	8003e74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d04c      	beq.n	8003e74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003de0:	f7fd f816 	bl	8000e10 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d241      	bcs.n	8003e74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e10:	637a      	str	r2, [r7, #52]	; 0x34
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e5      	bne.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3314      	adds	r3, #20
 8003e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	613b      	str	r3, [r7, #16]
   return(result);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3314      	adds	r3, #20
 8003e42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e44:	623a      	str	r2, [r7, #32]
 8003e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	69f9      	ldr	r1, [r7, #28]
 8003e4a:	6a3a      	ldr	r2, [r7, #32]
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e5      	bne.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e00f      	b.n	8003e94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d09f      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3740      	adds	r7, #64	; 0x40
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ed6:	f023 030c 	bic.w	r3, r3, #12
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <UART_SetConfig+0x114>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d103      	bne.n	8003f0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fd5c 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	e002      	b.n	8003f12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7fe fd44 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8003f10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009a      	lsls	r2, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <UART_SetConfig+0x118>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	0119      	lsls	r1, r3, #4
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	009a      	lsls	r2, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <UART_SetConfig+0x118>)
 8003f4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2064      	movs	r0, #100	; 0x64
 8003f52:	fb00 f303 	mul.w	r3, r0, r3
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	3332      	adds	r3, #50	; 0x32
 8003f5c:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <UART_SetConfig+0x118>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f68:	4419      	add	r1, r3
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009a      	lsls	r2, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <UART_SetConfig+0x118>)
 8003f82:	fba3 0302 	umull	r0, r3, r3, r2
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2064      	movs	r0, #100	; 0x64
 8003f8a:	fb00 f303 	mul.w	r3, r0, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	3332      	adds	r3, #50	; 0x32
 8003f94:	4a07      	ldr	r2, [pc, #28]	; (8003fb4 <UART_SetConfig+0x118>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	f003 020f 	and.w	r2, r3, #15
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40013800 	.word	0x40013800
 8003fb4:	51eb851f 	.word	0x51eb851f

08003fb8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003fbe:	1d3b      	adds	r3, r7, #4
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003fc8:	4b27      	ldr	r3, [pc, #156]	; (8004068 <MX_ADC1_Init+0xb0>)
 8003fca:	4a28      	ldr	r2, [pc, #160]	; (800406c <MX_ADC1_Init+0xb4>)
 8003fcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003fce:	4b26      	ldr	r3, [pc, #152]	; (8004068 <MX_ADC1_Init+0xb0>)
 8003fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <MX_ADC1_Init+0xb0>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003fdc:	4b22      	ldr	r3, [pc, #136]	; (8004068 <MX_ADC1_Init+0xb0>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <MX_ADC1_Init+0xb0>)
 8003fe4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003fe8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fea:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <MX_ADC1_Init+0xb0>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <MX_ADC1_Init+0xb0>)
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ff6:	481c      	ldr	r0, [pc, #112]	; (8004068 <MX_ADC1_Init+0xb0>)
 8003ff8:	f7fc ff14 	bl	8000e24 <HAL_ADC_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8004002:	f000 fc19 	bl	8004838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004006:	2306      	movs	r3, #6
 8004008:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800400a:	2301      	movs	r3, #1
 800400c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800400e:	2306      	movs	r3, #6
 8004010:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4814      	ldr	r0, [pc, #80]	; (8004068 <MX_ADC1_Init+0xb0>)
 8004018:	f7fd f8e8 	bl	80011ec <HAL_ADC_ConfigChannel>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8004022:	f000 fc09 	bl	8004838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004026:	2307      	movs	r3, #7
 8004028:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800402a:	2302      	movs	r3, #2
 800402c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	4619      	mov	r1, r3
 8004032:	480d      	ldr	r0, [pc, #52]	; (8004068 <MX_ADC1_Init+0xb0>)
 8004034:	f7fd f8da 	bl	80011ec <HAL_ADC_ConfigChannel>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800403e:	f000 fbfb 	bl	8004838 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004042:	230e      	movs	r3, #14
 8004044:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004046:	2303      	movs	r3, #3
 8004048:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	4619      	mov	r1, r3
 800404e:	4806      	ldr	r0, [pc, #24]	; (8004068 <MX_ADC1_Init+0xb0>)
 8004050:	f7fd f8cc 	bl	80011ec <HAL_ADC_ConfigChannel>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800405a:	f000 fbed 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000080 	.word	0x20000080
 800406c:	40012400 	.word	0x40012400

08004070 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004078:	f107 0318 	add.w	r3, r7, #24
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a33      	ldr	r2, [pc, #204]	; (8004158 <HAL_ADC_MspInit+0xe8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d15f      	bne.n	8004150 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <HAL_ADC_MspInit+0xec>)
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	4a31      	ldr	r2, [pc, #196]	; (800415c <HAL_ADC_MspInit+0xec>)
 8004096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800409a:	6193      	str	r3, [r2, #24]
 800409c:	4b2f      	ldr	r3, [pc, #188]	; (800415c <HAL_ADC_MspInit+0xec>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a8:	4b2c      	ldr	r3, [pc, #176]	; (800415c <HAL_ADC_MspInit+0xec>)
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	4a2b      	ldr	r2, [pc, #172]	; (800415c <HAL_ADC_MspInit+0xec>)
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	6193      	str	r3, [r2, #24]
 80040b4:	4b29      	ldr	r3, [pc, #164]	; (800415c <HAL_ADC_MspInit+0xec>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040c0:	4b26      	ldr	r3, [pc, #152]	; (800415c <HAL_ADC_MspInit+0xec>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	4a25      	ldr	r2, [pc, #148]	; (800415c <HAL_ADC_MspInit+0xec>)
 80040c6:	f043 0310 	orr.w	r3, r3, #16
 80040ca:	6193      	str	r3, [r2, #24]
 80040cc:	4b23      	ldr	r3, [pc, #140]	; (800415c <HAL_ADC_MspInit+0xec>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040d8:	23c0      	movs	r3, #192	; 0xc0
 80040da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040dc:	2303      	movs	r3, #3
 80040de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e0:	f107 0318 	add.w	r3, r7, #24
 80040e4:	4619      	mov	r1, r3
 80040e6:	481e      	ldr	r0, [pc, #120]	; (8004160 <HAL_ADC_MspInit+0xf0>)
 80040e8:	f7fd fec8 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040ec:	2310      	movs	r3, #16
 80040ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040f0:	2303      	movs	r3, #3
 80040f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f4:	f107 0318 	add.w	r3, r7, #24
 80040f8:	4619      	mov	r1, r3
 80040fa:	481a      	ldr	r0, [pc, #104]	; (8004164 <HAL_ADC_MspInit+0xf4>)
 80040fc:	f7fd febe 	bl	8001e7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 8004102:	4a1a      	ldr	r2, [pc, #104]	; (800416c <HAL_ADC_MspInit+0xfc>)
 8004104:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004106:	4b18      	ldr	r3, [pc, #96]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 8004108:	2200      	movs	r2, #0
 800410a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800410c:	4b16      	ldr	r3, [pc, #88]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004112:	4b15      	ldr	r3, [pc, #84]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 8004114:	2280      	movs	r2, #128	; 0x80
 8004116:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 800411a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800411e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 8004122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004126:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 800412a:	2220      	movs	r2, #32
 800412c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800412e:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 8004130:	2200      	movs	r2, #0
 8004132:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004134:	480c      	ldr	r0, [pc, #48]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 8004136:	f7fd fb61 	bl	80017fc <HAL_DMA_Init>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8004140:	f000 fb7a 	bl	8004838 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a08      	ldr	r2, [pc, #32]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 8004148:	621a      	str	r2, [r3, #32]
 800414a:	4a07      	ldr	r2, [pc, #28]	; (8004168 <HAL_ADC_MspInit+0xf8>)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004150:	bf00      	nop
 8004152:	3728      	adds	r7, #40	; 0x28
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40012400 	.word	0x40012400
 800415c:	40021000 	.word	0x40021000
 8004160:	40010800 	.word	0x40010800
 8004164:	40011000 	.word	0x40011000
 8004168:	200000b0 	.word	0x200000b0
 800416c:	40020008 	.word	0x40020008

08004170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <MX_DMA_Init+0x38>)
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <MX_DMA_Init+0x38>)
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	6153      	str	r3, [r2, #20]
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <MX_DMA_Init+0x38>)
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800418e:	2200      	movs	r2, #0
 8004190:	2102      	movs	r1, #2
 8004192:	200b      	movs	r0, #11
 8004194:	f7fd fafb 	bl	800178e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004198:	200b      	movs	r0, #11
 800419a:	f7fd fb14 	bl	80017c6 <HAL_NVIC_EnableIRQ>

}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000

080041ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b2:	f107 0310 	add.w	r3, r7, #16
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	609a      	str	r2, [r3, #8]
 80041be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041c0:	4b2a      	ldr	r3, [pc, #168]	; (800426c <MX_GPIO_Init+0xc0>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	4a29      	ldr	r2, [pc, #164]	; (800426c <MX_GPIO_Init+0xc0>)
 80041c6:	f043 0320 	orr.w	r3, r3, #32
 80041ca:	6193      	str	r3, [r2, #24]
 80041cc:	4b27      	ldr	r3, [pc, #156]	; (800426c <MX_GPIO_Init+0xc0>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d8:	4b24      	ldr	r3, [pc, #144]	; (800426c <MX_GPIO_Init+0xc0>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	4a23      	ldr	r2, [pc, #140]	; (800426c <MX_GPIO_Init+0xc0>)
 80041de:	f043 0304 	orr.w	r3, r3, #4
 80041e2:	6193      	str	r3, [r2, #24]
 80041e4:	4b21      	ldr	r3, [pc, #132]	; (800426c <MX_GPIO_Init+0xc0>)
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041f0:	4b1e      	ldr	r3, [pc, #120]	; (800426c <MX_GPIO_Init+0xc0>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	4a1d      	ldr	r2, [pc, #116]	; (800426c <MX_GPIO_Init+0xc0>)
 80041f6:	f043 0310 	orr.w	r3, r3, #16
 80041fa:	6193      	str	r3, [r2, #24]
 80041fc:	4b1b      	ldr	r3, [pc, #108]	; (800426c <MX_GPIO_Init+0xc0>)
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004208:	4b18      	ldr	r3, [pc, #96]	; (800426c <MX_GPIO_Init+0xc0>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	4a17      	ldr	r2, [pc, #92]	; (800426c <MX_GPIO_Init+0xc0>)
 800420e:	f043 0308 	orr.w	r3, r3, #8
 8004212:	6193      	str	r3, [r2, #24]
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <MX_GPIO_Init+0xc0>)
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_RUN_Pin;
 8004220:	2320      	movs	r3, #32
 8004222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004228:	2301      	movs	r3, #1
 800422a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BT_RUN_GPIO_Port, &GPIO_InitStruct);
 800422c:	f107 0310 	add.w	r3, r7, #16
 8004230:	4619      	mov	r1, r3
 8004232:	480f      	ldr	r0, [pc, #60]	; (8004270 <MX_GPIO_Init+0xc4>)
 8004234:	f7fd fe22 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin;
 8004238:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800423c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800423e:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <MX_GPIO_Init+0xc8>)
 8004240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004246:	f107 0310 	add.w	r3, r7, #16
 800424a:	4619      	mov	r1, r3
 800424c:	4808      	ldr	r0, [pc, #32]	; (8004270 <MX_GPIO_Init+0xc4>)
 800424e:	f7fd fe15 	bl	8001e7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004252:	2200      	movs	r2, #0
 8004254:	2100      	movs	r1, #0
 8004256:	2028      	movs	r0, #40	; 0x28
 8004258:	f7fd fa99 	bl	800178e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800425c:	2028      	movs	r0, #40	; 0x28
 800425e:	f7fd fab2 	bl	80017c6 <HAL_NVIC_EnableIRQ>

}
 8004262:	bf00      	nop
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	40011000 	.word	0x40011000
 8004274:	10310000 	.word	0x10310000

08004278 <map>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	69b9      	ldr	r1, [r7, #24]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	1a8a      	subs	r2, r1, r2
 8004292:	fb03 f202 	mul.w	r2, r3, r2
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	1acb      	subs	r3, r1, r3
 800429c:	fb92 f2f3 	sdiv	r2, r2, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4413      	add	r3, r2
};
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
	...

080042b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b092      	sub	sp, #72	; 0x48
 80042b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042b6:	f7fc fd53 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042ba:	f000 f879 	bl	80043b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042be:	f7ff ff75 	bl	80041ac <MX_GPIO_Init>
  MX_DMA_Init();
 80042c2:	f7ff ff55 	bl	8004170 <MX_DMA_Init>
  MX_ADC1_Init();
 80042c6:	f7ff fe77 	bl	8003fb8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80042ca:	f000 fb75 	bl	80049b8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80042ce:	f000 fce1 	bl	8004c94 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80042d2:	f000 fc17 	bl	8004b04 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
//
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80042d6:	2100      	movs	r1, #0
 80042d8:	482b      	ldr	r0, [pc, #172]	; (8004388 <main+0xd8>)
 80042da:	f7fe fdb1 	bl	8002e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80042de:	2104      	movs	r1, #4
 80042e0:	4829      	ldr	r0, [pc, #164]	; (8004388 <main+0xd8>)
 80042e2:	f7fe fdad 	bl	8002e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80042e6:	2108      	movs	r1, #8
 80042e8:	4827      	ldr	r0, [pc, #156]	; (8004388 <main+0xd8>)
 80042ea:	f7fe fda9 	bl	8002e40 <HAL_TIM_PWM_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80042ee:	2100      	movs	r1, #0
 80042f0:	4825      	ldr	r0, [pc, #148]	; (8004388 <main+0xd8>)
 80042f2:	f7ff faf3 	bl	80038dc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80042f6:	2104      	movs	r1, #4
 80042f8:	4823      	ldr	r0, [pc, #140]	; (8004388 <main+0xd8>)
 80042fa:	f7ff faef 	bl	80038dc <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80042fe:	2108      	movs	r1, #8
 8004300:	4821      	ldr	r0, [pc, #132]	; (8004388 <main+0xd8>)
 8004302:	f7ff faeb 	bl	80038dc <HAL_TIMEx_PWMN_Start>

  HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, 3);
 8004306:	2203      	movs	r2, #3
 8004308:	4920      	ldr	r1, [pc, #128]	; (800438c <main+0xdc>)
 800430a:	4821      	ldr	r0, [pc, #132]	; (8004390 <main+0xe0>)
 800430c:	f7fc fe74 	bl	8000ff8 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim6);
 8004310:	4820      	ldr	r0, [pc, #128]	; (8004394 <main+0xe4>)
 8004312:	f7fe fc8d 	bl	8002c30 <HAL_TIM_Base_Start_IT>




	  char buffer[64];
	  sprintf(buffer,"%d,%d,%d\n",PWM_Output[0],PWM_Output[1],PWM_Output[2]);
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <main+0xe8>)
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <main+0xe8>)
 800431e:	885b      	ldrh	r3, [r3, #2]
 8004320:	4619      	mov	r1, r3
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <main+0xe8>)
 8004324:	889b      	ldrh	r3, [r3, #4]
 8004326:	4638      	mov	r0, r7
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	460b      	mov	r3, r1
 800432c:	491b      	ldr	r1, [pc, #108]	; (800439c <main+0xec>)
 800432e:	f000 fd5b 	bl	8004de8 <siprintf>

	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer),1000);
 8004332:	463b      	mov	r3, r7
 8004334:	4618      	mov	r0, r3
 8004336:	f7fb ff77 	bl	8000228 <strlen>
 800433a:	4603      	mov	r3, r0
 800433c:	b29a      	uxth	r2, r3
 800433e:	4639      	mov	r1, r7
 8004340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004344:	4816      	ldr	r0, [pc, #88]	; (80043a0 <main+0xf0>)
 8004346:	f7ff fcb8 	bl	8003cba <HAL_UART_Transmit>




	  bt_run = HAL_GPIO_ReadPin(BT_RUN_GPIO_Port, BT_RUN_Pin);
 800434a:	2120      	movs	r1, #32
 800434c:	4815      	ldr	r0, [pc, #84]	; (80043a4 <main+0xf4>)
 800434e:	f7fd ff29 	bl	80021a4 <HAL_GPIO_ReadPin>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <main+0xf8>)
 8004358:	701a      	strb	r2, [r3, #0]

	  if(!HAL_GPIO_ReadPin(BT_RUN_GPIO_Port, BT_RUN_Pin))
 800435a:	2120      	movs	r1, #32
 800435c:	4811      	ldr	r0, [pc, #68]	; (80043a4 <main+0xf4>)
 800435e:	f7fd ff21 	bl	80021a4 <HAL_GPIO_ReadPin>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1d6      	bne.n	8004316 <main+0x66>
	  {
		  while(!HAL_GPIO_ReadPin(BT_RUN_GPIO_Port, BT_RUN_Pin));
 8004368:	bf00      	nop
 800436a:	2120      	movs	r1, #32
 800436c:	480d      	ldr	r0, [pc, #52]	; (80043a4 <main+0xf4>)
 800436e:	f7fd ff19 	bl	80021a4 <HAL_GPIO_ReadPin>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f8      	beq.n	800436a <main+0xba>
		  status_run ^= 1;
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <main+0xfc>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	f083 0301 	eor.w	r3, r3, #1
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <main+0xfc>)
 8004384:	701a      	strb	r2, [r3, #0]
  {
 8004386:	e7c6      	b.n	8004316 <main+0x66>
 8004388:	20000140 	.word	0x20000140
 800438c:	2000011c 	.word	0x2000011c
 8004390:	20000080 	.word	0x20000080
 8004394:	20000188 	.word	0x20000188
 8004398:	200000f8 	.word	0x200000f8
 800439c:	08006308 	.word	0x08006308
 80043a0:	200001d0 	.word	0x200001d0
 80043a4:	40011000 	.word	0x40011000
 80043a8:	20000118 	.word	0x20000118
 80043ac:	20000119 	.word	0x20000119

080043b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b096      	sub	sp, #88	; 0x58
 80043b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043ba:	2228      	movs	r2, #40	; 0x28
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fd32 	bl	8004e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043c4:	f107 031c 	add.w	r3, r7, #28
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	611a      	str	r2, [r3, #16]
 80043e2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80043e4:	2301      	movs	r3, #1
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80043e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80043ee:	2300      	movs	r3, #0
 80043f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043f2:	2301      	movs	r3, #1
 80043f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043f6:	2302      	movs	r3, #2
 80043f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004400:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004404:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd fefa 	bl	8002204 <HAL_RCC_OscConfig>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8004416:	f000 fa0f 	bl	8004838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800441a:	230f      	movs	r3, #15
 800441c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800441e:	2302      	movs	r3, #2
 8004420:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800442c:	2300      	movs	r3, #0
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004430:	f107 031c 	add.w	r3, r7, #28
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe f966 	bl	8002708 <HAL_RCC_ClockConfig>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004442:	f000 f9f9 	bl	8004838 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004446:	2302      	movs	r3, #2
 8004448:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800444a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe fae6 	bl	8002a24 <HAL_RCCEx_PeriphCLKConfig>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800445e:	f000 f9eb 	bl	8004838 <Error_Handler>
  }
}
 8004462:	bf00      	nop
 8004464:	3758      	adds	r7, #88	; 0x58
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	80fb      	strh	r3, [r7, #6]


	if(GPIO_Pin == IN1_Pin)
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447c:	d109      	bne.n	8004492 <HAL_GPIO_EXTI_Callback+0x26>
	 EMF_Logic[0] = HAL_GPIO_ReadPin(IN1_GPIO_Port, IN1_Pin);
 800447e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004482:	4843      	ldr	r0, [pc, #268]	; (8004590 <HAL_GPIO_EXTI_Callback+0x124>)
 8004484:	f7fd fe8e 	bl	80021a4 <HAL_GPIO_ReadPin>
 8004488:	4603      	mov	r3, r0
 800448a:	461a      	mov	r2, r3
 800448c:	4b41      	ldr	r3, [pc, #260]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e01a      	b.n	80044c8 <HAL_GPIO_EXTI_Callback+0x5c>
	else if(GPIO_Pin == IN2_Pin)
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004498:	d109      	bne.n	80044ae <HAL_GPIO_EXTI_Callback+0x42>
	 EMF_Logic[1] = HAL_GPIO_ReadPin(IN2_GPIO_Port, IN2_Pin);
 800449a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800449e:	483c      	ldr	r0, [pc, #240]	; (8004590 <HAL_GPIO_EXTI_Callback+0x124>)
 80044a0:	f7fd fe80 	bl	80021a4 <HAL_GPIO_ReadPin>
 80044a4:	4603      	mov	r3, r0
 80044a6:	461a      	mov	r2, r3
 80044a8:	4b3a      	ldr	r3, [pc, #232]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 80044aa:	705a      	strb	r2, [r3, #1]
 80044ac:	e00c      	b.n	80044c8 <HAL_GPIO_EXTI_Callback+0x5c>
	else if(GPIO_Pin == IN3_Pin)
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b4:	d108      	bne.n	80044c8 <HAL_GPIO_EXTI_Callback+0x5c>
	 EMF_Logic[2] = HAL_GPIO_ReadPin(IN3_GPIO_Port, IN3_Pin);
 80044b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044ba:	4835      	ldr	r0, [pc, #212]	; (8004590 <HAL_GPIO_EXTI_Callback+0x124>)
 80044bc:	f7fd fe72 	bl	80021a4 <HAL_GPIO_ReadPin>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	4b33      	ldr	r3, [pc, #204]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 80044c6:	709a      	strb	r2, [r3, #2]


	if(EMF_Logic[0] == 1 && EMF_Logic[1] == 0 && EMF_Logic[2]==0)
 80044c8:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d10b      	bne.n	80044e8 <HAL_GPIO_EXTI_Callback+0x7c>
 80044d0:	4b30      	ldr	r3, [pc, #192]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d107      	bne.n	80044e8 <HAL_GPIO_EXTI_Callback+0x7c>
 80044d8:	4b2e      	ldr	r3, [pc, #184]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 80044da:	789b      	ldrb	r3, [r3, #2]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d103      	bne.n	80044e8 <HAL_GPIO_EXTI_Callback+0x7c>
		sector = 0;
 80044e0:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <HAL_GPIO_EXTI_Callback+0x12c>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e04f      	b.n	8004588 <HAL_GPIO_EXTI_Callback+0x11c>
	else if(EMF_Logic[0] == 1 && EMF_Logic[1] == 1 && EMF_Logic[2]==0)
 80044e8:	4b2a      	ldr	r3, [pc, #168]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d10b      	bne.n	8004508 <HAL_GPIO_EXTI_Callback+0x9c>
 80044f0:	4b28      	ldr	r3, [pc, #160]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 80044f2:	785b      	ldrb	r3, [r3, #1]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d107      	bne.n	8004508 <HAL_GPIO_EXTI_Callback+0x9c>
 80044f8:	4b26      	ldr	r3, [pc, #152]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 80044fa:	789b      	ldrb	r3, [r3, #2]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <HAL_GPIO_EXTI_Callback+0x9c>
		sector = 1;
 8004500:	4b25      	ldr	r3, [pc, #148]	; (8004598 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e03f      	b.n	8004588 <HAL_GPIO_EXTI_Callback+0x11c>
	else if(EMF_Logic[0] == 0 && EMF_Logic[1] == 1 && EMF_Logic[2]==0)
 8004508:	4b22      	ldr	r3, [pc, #136]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <HAL_GPIO_EXTI_Callback+0xbc>
 8004510:	4b20      	ldr	r3, [pc, #128]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 8004512:	785b      	ldrb	r3, [r3, #1]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_GPIO_EXTI_Callback+0xbc>
 8004518:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 800451a:	789b      	ldrb	r3, [r3, #2]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <HAL_GPIO_EXTI_Callback+0xbc>
		sector = 2;
 8004520:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004522:	2202      	movs	r2, #2
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	e02f      	b.n	8004588 <HAL_GPIO_EXTI_Callback+0x11c>
	else if(EMF_Logic[0] == 0 && EMF_Logic[1] == 1 && EMF_Logic[2]==1)
 8004528:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_GPIO_EXTI_Callback+0xdc>
 8004530:	4b18      	ldr	r3, [pc, #96]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d107      	bne.n	8004548 <HAL_GPIO_EXTI_Callback+0xdc>
 8004538:	4b16      	ldr	r3, [pc, #88]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 800453a:	789b      	ldrb	r3, [r3, #2]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d103      	bne.n	8004548 <HAL_GPIO_EXTI_Callback+0xdc>
		sector = 3;
 8004540:	4b15      	ldr	r3, [pc, #84]	; (8004598 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004542:	2203      	movs	r2, #3
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	e01f      	b.n	8004588 <HAL_GPIO_EXTI_Callback+0x11c>
	else if(EMF_Logic[0] == 0 && EMF_Logic[1] == 0 && EMF_Logic[2]==1)
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_GPIO_EXTI_Callback+0xfc>
 8004550:	4b10      	ldr	r3, [pc, #64]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 8004552:	785b      	ldrb	r3, [r3, #1]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d107      	bne.n	8004568 <HAL_GPIO_EXTI_Callback+0xfc>
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 800455a:	789b      	ldrb	r3, [r3, #2]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d103      	bne.n	8004568 <HAL_GPIO_EXTI_Callback+0xfc>
		sector = 4;
 8004560:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004562:	2204      	movs	r2, #4
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	e00f      	b.n	8004588 <HAL_GPIO_EXTI_Callback+0x11c>
	else if(EMF_Logic[0] == 1 && EMF_Logic[1] == 0 && EMF_Logic[2]==1)
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10b      	bne.n	8004588 <HAL_GPIO_EXTI_Callback+0x11c>
 8004570:	4b08      	ldr	r3, [pc, #32]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d107      	bne.n	8004588 <HAL_GPIO_EXTI_Callback+0x11c>
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_GPIO_EXTI_Callback+0x128>)
 800457a:	789b      	ldrb	r3, [r3, #2]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d103      	bne.n	8004588 <HAL_GPIO_EXTI_Callback+0x11c>
		sector = 5;
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_GPIO_EXTI_Callback+0x12c>)
 8004582:	2205      	movs	r2, #5
 8004584:	701a      	strb	r2, [r3, #0]



}
 8004586:	e7ff      	b.n	8004588 <HAL_GPIO_EXTI_Callback+0x11c>
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40011000 	.word	0x40011000
 8004594:	20000138 	.word	0x20000138
 8004598:	2000013b 	.word	0x2000013b
 800459c:	00000000 	.word	0x00000000

080045a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b5b0      	push	{r4, r5, r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a96      	ldr	r2, [pc, #600]	; (8004808 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	f040 8114 	bne.w	80047dc <HAL_TIM_PeriodElapsedCallback+0x23c>
	{

		ADC_Read[0] = ADC_Buffer[0] & 0xFFFF;
 80045b4:	4b95      	ldr	r3, [pc, #596]	; (800480c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	4b95      	ldr	r3, [pc, #596]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80045bc:	801a      	strh	r2, [r3, #0]
		ADC_Read[1] = (ADC_Buffer[0] >> 16) & 0xFFFF;
 80045be:	4b93      	ldr	r3, [pc, #588]	; (800480c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	4b92      	ldr	r3, [pc, #584]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80045c8:	805a      	strh	r2, [r3, #2]
		ADC_Read[2] = ADC_Buffer[1] & 0xFFFF;
 80045ca:	4b90      	ldr	r3, [pc, #576]	; (800480c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	4b8f      	ldr	r3, [pc, #572]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80045d2:	809a      	strh	r2, [r3, #4]

		ADC_Voltage[0] = ADC_Read[0] * 0.8058608;
 80045d4:	4b8e      	ldr	r3, [pc, #568]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fc f95d 	bl	8000898 <__aeabi_i2d>
 80045de:	a382      	add	r3, pc, #520	; (adr r3, 80047e8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f7fb fe28 	bl	8000238 <__aeabi_dmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	f7fc f9bc 	bl	800096c <__aeabi_d2f>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4a87      	ldr	r2, [pc, #540]	; (8004814 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80045f8:	6013      	str	r3, [r2, #0]
		ADC_Voltage[1] = ADC_Read[1] * 0.8058608;
 80045fa:	4b85      	ldr	r3, [pc, #532]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80045fc:	885b      	ldrh	r3, [r3, #2]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fc f94a 	bl	8000898 <__aeabi_i2d>
 8004604:	a378      	add	r3, pc, #480	; (adr r3, 80047e8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f7fb fe15 	bl	8000238 <__aeabi_dmul>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	f7fc f9a9 	bl	800096c <__aeabi_d2f>
 800461a:	4603      	mov	r3, r0
 800461c:	4a7d      	ldr	r2, [pc, #500]	; (8004814 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800461e:	6053      	str	r3, [r2, #4]
		ADC_Voltage[2] = ADC_Read[2] * 0.8058608;
 8004620:	4b7b      	ldr	r3, [pc, #492]	; (8004810 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004622:	889b      	ldrh	r3, [r3, #4]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fc f937 	bl	8000898 <__aeabi_i2d>
 800462a:	a36f      	add	r3, pc, #444	; (adr r3, 80047e8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f7fb fe02 	bl	8000238 <__aeabi_dmul>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	f7fc f996 	bl	800096c <__aeabi_d2f>
 8004640:	4603      	mov	r3, r0
 8004642:	4a74      	ldr	r2, [pc, #464]	; (8004814 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004644:	6093      	str	r3, [r2, #8]

		  float time,omega;
		  time = cnt * 0.001;
 8004646:	4b74      	ldr	r3, [pc, #464]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fc f914 	bl	8000878 <__aeabi_ui2d>
 8004650:	a367      	add	r3, pc, #412	; (adr r3, 80047f0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f7fb fdef 	bl	8000238 <__aeabi_dmul>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4610      	mov	r0, r2
 8004660:	4619      	mov	r1, r3
 8004662:	f7fc f983 	bl	800096c <__aeabi_d2f>
 8004666:	4603      	mov	r3, r0
 8004668:	613b      	str	r3, [r7, #16]

		  omega = 2 * M_PI * freq * time;
 800466a:	4b6c      	ldr	r3, [pc, #432]	; (800481c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7fc f924 	bl	80008bc <__aeabi_f2d>
 8004674:	a360      	add	r3, pc, #384	; (adr r3, 80047f8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f7fb fddd 	bl	8000238 <__aeabi_dmul>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4614      	mov	r4, r2
 8004684:	461d      	mov	r5, r3
 8004686:	6938      	ldr	r0, [r7, #16]
 8004688:	f7fc f918 	bl	80008bc <__aeabi_f2d>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4620      	mov	r0, r4
 8004692:	4629      	mov	r1, r5
 8004694:	f7fb fdd0 	bl	8000238 <__aeabi_dmul>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	f7fc f964 	bl	800096c <__aeabi_d2f>
 80046a4:	4603      	mov	r3, r0
 80046a6:	60fb      	str	r3, [r7, #12]


		  cnt++;
 80046a8:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3301      	adds	r3, #1
 80046ae:	4a5a      	ldr	r2, [pc, #360]	; (8004818 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80046b0:	6013      	str	r3, [r2, #0]

		  Vt[0] = 500 * sinf(omega);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f001 f84a 	bl	800574c <sinf>
 80046b8:	4603      	mov	r3, r0
 80046ba:	4959      	ldr	r1, [pc, #356]	; (8004820 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fb fee5 	bl	800048c <__aeabi_fmul>
 80046c2:	4603      	mov	r3, r0
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b57      	ldr	r3, [pc, #348]	; (8004824 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80046c8:	601a      	str	r2, [r3, #0]
		  Vt[1] = 500 * sinf(omega+2.0944);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7fc f8f6 	bl	80008bc <__aeabi_f2d>
 80046d0:	a34b      	add	r3, pc, #300	; (adr r3, 8004800 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f7fb ff93 	bl	8000600 <__adddf3>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	f7fc f943 	bl	800096c <__aeabi_d2f>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 f82f 	bl	800574c <sinf>
 80046ee:	4603      	mov	r3, r0
 80046f0:	494b      	ldr	r1, [pc, #300]	; (8004820 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fb feca 	bl	800048c <__aeabi_fmul>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	4b49      	ldr	r3, [pc, #292]	; (8004824 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80046fe:	605a      	str	r2, [r3, #4]
		  Vt[2] = 500 * sinf(omega-2.0944);
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7fc f8db 	bl	80008bc <__aeabi_f2d>
 8004706:	a33e      	add	r3, pc, #248	; (adr r3, 8004800 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f7fb ff76 	bl	80005fc <__aeabi_dsub>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	f7fc f928 	bl	800096c <__aeabi_d2f>
 800471c:	4603      	mov	r3, r0
 800471e:	4618      	mov	r0, r3
 8004720:	f001 f814 	bl	800574c <sinf>
 8004724:	4603      	mov	r3, r0
 8004726:	493e      	ldr	r1, [pc, #248]	; (8004820 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004728:	4618      	mov	r0, r3
 800472a:	f7fb feaf 	bl	800048c <__aeabi_fmul>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	4b3c      	ldr	r3, [pc, #240]	; (8004824 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004734:	609a      	str	r2, [r3, #8]

		  Vt_shift[0] = Vt[0] + 500;
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4939      	ldr	r1, [pc, #228]	; (8004820 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800473c:	4618      	mov	r0, r3
 800473e:	f7fc f96b 	bl	8000a18 <__addsf3>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004748:	601a      	str	r2, [r3, #0]
		  Vt_shift[1] = Vt[1] + 500;
 800474a:	4b36      	ldr	r3, [pc, #216]	; (8004824 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4934      	ldr	r1, [pc, #208]	; (8004820 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004750:	4618      	mov	r0, r3
 8004752:	f7fc f961 	bl	8000a18 <__addsf3>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	4b33      	ldr	r3, [pc, #204]	; (8004828 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800475c:	605a      	str	r2, [r3, #4]
		  Vt_shift[2] = Vt[2] + 500;
 800475e:	4b31      	ldr	r3, [pc, #196]	; (8004824 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	492f      	ldr	r1, [pc, #188]	; (8004820 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004764:	4618      	mov	r0, r3
 8004766:	f7fc f957 	bl	8000a18 <__addsf3>
 800476a:	4603      	mov	r3, r0
 800476c:	461a      	mov	r2, r3
 800476e:	4b2e      	ldr	r3, [pc, #184]	; (8004828 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004770:	609a      	str	r2, [r3, #8]

		  for(int i=0;i<3;i++)
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	e01b      	b.n	80047b0 <HAL_TIM_PeriodElapsedCallback+0x210>
		  {
			  long buff_v = Vt_shift[i];
 8004778:	4a2b      	ldr	r2, [pc, #172]	; (8004828 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004780:	4618      	mov	r0, r3
 8004782:	f7fc fac7 	bl	8000d14 <__aeabi_f2iz>
 8004786:	4603      	mov	r3, r0
 8004788:	60bb      	str	r3, [r7, #8]
			  PWM_Output[i] = map(buff_v, 0, 1000, 0, 500);
 800478a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2300      	movs	r3, #0
 8004792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004796:	2100      	movs	r1, #0
 8004798:	68b8      	ldr	r0, [r7, #8]
 800479a:	f7ff fd6d 	bl	8004278 <map>
 800479e:	4603      	mov	r3, r0
 80047a0:	b299      	uxth	r1, r3
 80047a2:	4a22      	ldr	r2, [pc, #136]	; (800482c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i=0;i<3;i++)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	3301      	adds	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	dde0      	ble.n	8004778 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		  }

		  if (status_run)
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00e      	beq.n	80047dc <HAL_TIM_PeriodElapsedCallback+0x23c>
		  {
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Output[0]);
 80047be:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80047c0:	881a      	ldrh	r2, [r3, #0]
 80047c2:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Output[1]);
 80047c8:	4b18      	ldr	r3, [pc, #96]	; (800482c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80047ca:	885a      	ldrh	r2, [r3, #2]
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Output[2]);
 80047d2:	4b16      	ldr	r3, [pc, #88]	; (800482c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80047d4:	889a      	ldrh	r2, [r3, #4]
 80047d6:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	63da      	str	r2, [r3, #60]	; 0x3c
		  }

	}
}
 80047dc:	bf00      	nop
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bdb0      	pop	{r4, r5, r7, pc}
 80047e4:	f3af 8000 	nop.w
 80047e8:	96a41bd4 	.word	0x96a41bd4
 80047ec:	3fe9c99c 	.word	0x3fe9c99c
 80047f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80047f4:	3f50624d 	.word	0x3f50624d
 80047f8:	54442d18 	.word	0x54442d18
 80047fc:	401921fb 	.word	0x401921fb
 8004800:	c985f06f 	.word	0xc985f06f
 8004804:	4000c154 	.word	0x4000c154
 8004808:	40001000 	.word	0x40001000
 800480c:	2000011c 	.word	0x2000011c
 8004810:	20000124 	.word	0x20000124
 8004814:	2000012c 	.word	0x2000012c
 8004818:	200000f4 	.word	0x200000f4
 800481c:	20000008 	.word	0x20000008
 8004820:	43fa0000 	.word	0x43fa0000
 8004824:	20000100 	.word	0x20000100
 8004828:	2000010c 	.word	0x2000010c
 800482c:	200000f8 	.word	0x200000f8
 8004830:	20000119 	.word	0x20000119
 8004834:	20000140 	.word	0x20000140

08004838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800483c:	b672      	cpsid	i
}
 800483e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004840:	e7fe      	b.n	8004840 <Error_Handler+0x8>
	...

08004844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800484a:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <HAL_MspInit+0x5c>)
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <HAL_MspInit+0x5c>)
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	6193      	str	r3, [r2, #24]
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_MspInit+0x5c>)
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_MspInit+0x5c>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <HAL_MspInit+0x5c>)
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486c:	61d3      	str	r3, [r2, #28]
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_MspInit+0x5c>)
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_MspInit+0x60>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_MspInit+0x60>)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40010000 	.word	0x40010000

080048a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80048ac:	e7fe      	b.n	80048ac <NMI_Handler+0x4>

080048ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ae:	b480      	push	{r7}
 80048b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048b2:	e7fe      	b.n	80048b2 <HardFault_Handler+0x4>

080048b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048b8:	e7fe      	b.n	80048b8 <MemManage_Handler+0x4>

080048ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048ba:	b480      	push	{r7}
 80048bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048be:	e7fe      	b.n	80048be <BusFault_Handler+0x4>

080048c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048c4:	e7fe      	b.n	80048c4 <UsageFault_Handler+0x4>

080048c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048c6:	b480      	push	{r7}
 80048c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048ca:	bf00      	nop
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048d2:	b480      	push	{r7}
 80048d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048de:	b480      	push	{r7}
 80048e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048e2:	bf00      	nop
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048ee:	f7fc fa7d 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048f2:	bf00      	nop
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80048fc:	4802      	ldr	r0, [pc, #8]	; (8004908 <DMA1_Channel1_IRQHandler+0x10>)
 80048fe:	f7fd f853 	bl	80019a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200000b0 	.word	0x200000b0

0800490c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IN1_Pin);
 8004910:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004914:	f7fd fc5e 	bl	80021d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IN2_Pin);
 8004918:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800491c:	f7fd fc5a 	bl	80021d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IN3_Pin);
 8004920:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004924:	f7fd fc56 	bl	80021d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004928:	bf00      	nop
 800492a:	bd80      	pop	{r7, pc}

0800492c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004930:	4802      	ldr	r0, [pc, #8]	; (800493c <TIM6_IRQHandler+0x10>)
 8004932:	f7fe fb3f 	bl	8002fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000188 	.word	0x20000188

08004940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <_sbrk+0x5c>)
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <_sbrk+0x60>)
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004954:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <_sbrk+0x64>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <_sbrk+0x64>)
 800495e:	4a12      	ldr	r2, [pc, #72]	; (80049a8 <_sbrk+0x68>)
 8004960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <_sbrk+0x64>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4413      	add	r3, r2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	429a      	cmp	r2, r3
 800496e:	d207      	bcs.n	8004980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004970:	f000 fa62 	bl	8004e38 <__errno>
 8004974:	4603      	mov	r3, r0
 8004976:	220c      	movs	r2, #12
 8004978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	e009      	b.n	8004994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004980:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <_sbrk+0x64>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004986:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <_sbrk+0x64>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	4a05      	ldr	r2, [pc, #20]	; (80049a4 <_sbrk+0x64>)
 8004990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004992:	68fb      	ldr	r3, [r7, #12]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	2000c000 	.word	0x2000c000
 80049a0:	00000400 	.word	0x00000400
 80049a4:	2000013c 	.word	0x2000013c
 80049a8:	20000360 	.word	0x20000360

080049ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b092      	sub	sp, #72	; 0x48
 80049bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	611a      	str	r2, [r3, #16]
 80049d8:	615a      	str	r2, [r3, #20]
 80049da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049dc:	1d3b      	adds	r3, r7, #4
 80049de:	2220      	movs	r2, #32
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fa20 	bl	8004e28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80049e8:	4b44      	ldr	r3, [pc, #272]	; (8004afc <MX_TIM1_Init+0x144>)
 80049ea:	4a45      	ldr	r2, [pc, #276]	; (8004b00 <MX_TIM1_Init+0x148>)
 80049ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 80049ee:	4b43      	ldr	r3, [pc, #268]	; (8004afc <MX_TIM1_Init+0x144>)
 80049f0:	220b      	movs	r2, #11
 80049f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049f4:	4b41      	ldr	r3, [pc, #260]	; (8004afc <MX_TIM1_Init+0x144>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500-1;
 80049fa:	4b40      	ldr	r3, [pc, #256]	; (8004afc <MX_TIM1_Init+0x144>)
 80049fc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004a00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a02:	4b3e      	ldr	r3, [pc, #248]	; (8004afc <MX_TIM1_Init+0x144>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a08:	4b3c      	ldr	r3, [pc, #240]	; (8004afc <MX_TIM1_Init+0x144>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a0e:	4b3b      	ldr	r3, [pc, #236]	; (8004afc <MX_TIM1_Init+0x144>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a14:	4839      	ldr	r0, [pc, #228]	; (8004afc <MX_TIM1_Init+0x144>)
 8004a16:	f7fe f9c3 	bl	8002da0 <HAL_TIM_PWM_Init>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004a20:	f7ff ff0a 	bl	8004838 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004a24:	4835      	ldr	r0, [pc, #212]	; (8004afc <MX_TIM1_Init+0x144>)
 8004a26:	f7fe f963 	bl	8002cf0 <HAL_TIM_OC_Init>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004a30:	f7ff ff02 	bl	8004838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a34:	2300      	movs	r3, #0
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a40:	4619      	mov	r1, r3
 8004a42:	482e      	ldr	r0, [pc, #184]	; (8004afc <MX_TIM1_Init+0x144>)
 8004a44:	f7fe fff6 	bl	8003a34 <HAL_TIMEx_MasterConfigSynchronization>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8004a4e:	f7ff fef3 	bl	8004838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a52:	2360      	movs	r3, #96	; 0x60
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a72:	2200      	movs	r2, #0
 8004a74:	4619      	mov	r1, r3
 8004a76:	4821      	ldr	r0, [pc, #132]	; (8004afc <MX_TIM1_Init+0x144>)
 8004a78:	f7fe fc00 	bl	800327c <HAL_TIM_PWM_ConfigChannel>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8004a82:	f7ff fed9 	bl	8004838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	481b      	ldr	r0, [pc, #108]	; (8004afc <MX_TIM1_Init+0x144>)
 8004a90:	f7fe fbf4 	bl	800327c <HAL_TIM_PWM_ConfigChannel>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8004a9a:	f7ff fecd 	bl	8004838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4814      	ldr	r0, [pc, #80]	; (8004afc <MX_TIM1_Init+0x144>)
 8004aac:	f7fe fb8a 	bl	80031c4 <HAL_TIM_OC_ConfigChannel>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8004ab6:	f7ff febf 	bl	8004838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8004ac6:	2364      	movs	r3, #100	; 0x64
 8004ac8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ad2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8004ad4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ad8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4807      	ldr	r0, [pc, #28]	; (8004afc <MX_TIM1_Init+0x144>)
 8004ae0:	f7ff f814 	bl	8003b0c <HAL_TIMEx_ConfigBreakDeadTime>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8004aea:	f7ff fea5 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004aee:	4803      	ldr	r0, [pc, #12]	; (8004afc <MX_TIM1_Init+0x144>)
 8004af0:	f000 f882 	bl	8004bf8 <HAL_TIM_MspPostInit>

}
 8004af4:	bf00      	nop
 8004af6:	3748      	adds	r7, #72	; 0x48
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000140 	.word	0x20000140
 8004b00:	40012c00 	.word	0x40012c00

08004b04 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <MX_TIM6_Init+0x64>)
 8004b14:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <MX_TIM6_Init+0x68>)
 8004b16:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <MX_TIM6_Init+0x64>)
 8004b1a:	2247      	movs	r2, #71	; 0x47
 8004b1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <MX_TIM6_Init+0x64>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8004b24:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <MX_TIM6_Init+0x64>)
 8004b26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <MX_TIM6_Init+0x64>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004b32:	480d      	ldr	r0, [pc, #52]	; (8004b68 <MX_TIM6_Init+0x64>)
 8004b34:	f7fe f82c 	bl	8002b90 <HAL_TIM_Base_Init>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004b3e:	f7ff fe7b 	bl	8004838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004b42:	2320      	movs	r3, #32
 8004b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004b4a:	463b      	mov	r3, r7
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4806      	ldr	r0, [pc, #24]	; (8004b68 <MX_TIM6_Init+0x64>)
 8004b50:	f7fe ff70 	bl	8003a34 <HAL_TIMEx_MasterConfigSynchronization>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004b5a:	f7ff fe6d 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000188 	.word	0x20000188
 8004b6c:	40001000 	.word	0x40001000

08004b70 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <HAL_TIM_PWM_MspInit+0x34>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d10b      	bne.n	8004b9a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_TIM_PWM_MspInit+0x38>)
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	4a08      	ldr	r2, [pc, #32]	; (8004ba8 <HAL_TIM_PWM_MspInit+0x38>)
 8004b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b8c:	6193      	str	r3, [r2, #24]
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_TIM_PWM_MspInit+0x38>)
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40021000 	.word	0x40021000

08004bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <HAL_TIM_Base_MspInit+0x44>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d113      	bne.n	8004be6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <HAL_TIM_Base_MspInit+0x48>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	4a0c      	ldr	r2, [pc, #48]	; (8004bf4 <HAL_TIM_Base_MspInit+0x48>)
 8004bc4:	f043 0310 	orr.w	r3, r3, #16
 8004bc8:	61d3      	str	r3, [r2, #28]
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <HAL_TIM_Base_MspInit+0x48>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2100      	movs	r1, #0
 8004bda:	2036      	movs	r0, #54	; 0x36
 8004bdc:	f7fc fdd7 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004be0:	2036      	movs	r0, #54	; 0x36
 8004be2:	f7fc fdf0 	bl	80017c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40001000 	.word	0x40001000
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c00:	f107 0310 	add.w	r3, r7, #16
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <HAL_TIM_MspPostInit+0x8c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d131      	bne.n	8004c7c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <HAL_TIM_MspPostInit+0x90>)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	4a1a      	ldr	r2, [pc, #104]	; (8004c88 <HAL_TIM_MspPostInit+0x90>)
 8004c1e:	f043 0308 	orr.w	r3, r3, #8
 8004c22:	6193      	str	r3, [r2, #24]
 8004c24:	4b18      	ldr	r3, [pc, #96]	; (8004c88 <HAL_TIM_MspPostInit+0x90>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c30:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <HAL_TIM_MspPostInit+0x90>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <HAL_TIM_MspPostInit+0x90>)
 8004c36:	f043 0304 	orr.w	r3, r3, #4
 8004c3a:	6193      	str	r3, [r2, #24]
 8004c3c:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <HAL_TIM_MspPostInit+0x90>)
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004c48:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c52:	2302      	movs	r3, #2
 8004c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c56:	f107 0310 	add.w	r3, r7, #16
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	480b      	ldr	r0, [pc, #44]	; (8004c8c <HAL_TIM_MspPostInit+0x94>)
 8004c5e:	f7fd f90d 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004c62:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c70:	f107 0310 	add.w	r3, r7, #16
 8004c74:	4619      	mov	r1, r3
 8004c76:	4806      	ldr	r0, [pc, #24]	; (8004c90 <HAL_TIM_MspPostInit+0x98>)
 8004c78:	f7fd f900 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004c7c:	bf00      	nop
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	40010c00 	.word	0x40010c00
 8004c90:	40010800 	.word	0x40010800

08004c94 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <MX_USART1_UART_Init+0x4c>)
 8004c9a:	4a12      	ldr	r2, [pc, #72]	; (8004ce4 <MX_USART1_UART_Init+0x50>)
 8004c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <MX_USART1_UART_Init+0x4c>)
 8004ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <MX_USART1_UART_Init+0x4c>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004cac:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <MX_USART1_UART_Init+0x4c>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <MX_USART1_UART_Init+0x4c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <MX_USART1_UART_Init+0x4c>)
 8004cba:	220c      	movs	r2, #12
 8004cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cbe:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <MX_USART1_UART_Init+0x4c>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <MX_USART1_UART_Init+0x4c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004cca:	4805      	ldr	r0, [pc, #20]	; (8004ce0 <MX_USART1_UART_Init+0x4c>)
 8004ccc:	f7fe ffa5 	bl	8003c1a <HAL_UART_Init>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004cd6:	f7ff fdaf 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	200001d0 	.word	0x200001d0
 8004ce4:	40013800 	.word	0x40013800

08004ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf0:	f107 0314 	add.w	r3, r7, #20
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a22      	ldr	r2, [pc, #136]	; (8004d8c <HAL_UART_MspInit+0xa4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d13d      	bne.n	8004d84 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d08:	4b21      	ldr	r3, [pc, #132]	; (8004d90 <HAL_UART_MspInit+0xa8>)
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	4a20      	ldr	r2, [pc, #128]	; (8004d90 <HAL_UART_MspInit+0xa8>)
 8004d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d12:	6193      	str	r3, [r2, #24]
 8004d14:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <HAL_UART_MspInit+0xa8>)
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d20:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_UART_MspInit+0xa8>)
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <HAL_UART_MspInit+0xa8>)
 8004d26:	f043 0308 	orr.w	r3, r3, #8
 8004d2a:	6193      	str	r3, [r2, #24]
 8004d2c:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <HAL_UART_MspInit+0xa8>)
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004d38:	2340      	movs	r3, #64	; 0x40
 8004d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d40:	2303      	movs	r3, #3
 8004d42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d44:	f107 0314 	add.w	r3, r7, #20
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4812      	ldr	r0, [pc, #72]	; (8004d94 <HAL_UART_MspInit+0xac>)
 8004d4c:	f7fd f896 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004d50:	2380      	movs	r3, #128	; 0x80
 8004d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5c:	f107 0314 	add.w	r3, r7, #20
 8004d60:	4619      	mov	r1, r3
 8004d62:	480c      	ldr	r0, [pc, #48]	; (8004d94 <HAL_UART_MspInit+0xac>)
 8004d64:	f7fd f88a 	bl	8001e7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_UART_MspInit+0xb0>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	f043 0304 	orr.w	r3, r3, #4
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	4a06      	ldr	r2, [pc, #24]	; (8004d98 <HAL_UART_MspInit+0xb0>)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004d84:	bf00      	nop
 8004d86:	3728      	adds	r7, #40	; 0x28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40013800 	.word	0x40013800
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40010c00 	.word	0x40010c00
 8004d98:	40010000 	.word	0x40010000

08004d9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004d9c:	f7ff fe06 	bl	80049ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004da0:	480b      	ldr	r0, [pc, #44]	; (8004dd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004da2:	490c      	ldr	r1, [pc, #48]	; (8004dd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004da4:	4a0c      	ldr	r2, [pc, #48]	; (8004dd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004da8:	e002      	b.n	8004db0 <LoopCopyDataInit>

08004daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dae:	3304      	adds	r3, #4

08004db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004db4:	d3f9      	bcc.n	8004daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004db8:	4c09      	ldr	r4, [pc, #36]	; (8004de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dbc:	e001      	b.n	8004dc2 <LoopFillZerobss>

08004dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dc0:	3204      	adds	r2, #4

08004dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dc4:	d3fb      	bcc.n	8004dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004dc6:	f000 f83d 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004dca:	f7ff fa71 	bl	80042b0 <main>
  bx lr
 8004dce:	4770      	bx	lr
  ldr r0, =_sdata
 8004dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004dd8:	0800674c 	.word	0x0800674c
  ldr r2, =_sbss
 8004ddc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004de0:	20000360 	.word	0x20000360

08004de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004de4:	e7fe      	b.n	8004de4 <ADC1_2_IRQHandler>
	...

08004de8 <siprintf>:
 8004de8:	b40e      	push	{r1, r2, r3}
 8004dea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dee:	b500      	push	{lr}
 8004df0:	b09c      	sub	sp, #112	; 0x70
 8004df2:	ab1d      	add	r3, sp, #116	; 0x74
 8004df4:	9002      	str	r0, [sp, #8]
 8004df6:	9006      	str	r0, [sp, #24]
 8004df8:	9107      	str	r1, [sp, #28]
 8004dfa:	9104      	str	r1, [sp, #16]
 8004dfc:	4808      	ldr	r0, [pc, #32]	; (8004e20 <siprintf+0x38>)
 8004dfe:	4909      	ldr	r1, [pc, #36]	; (8004e24 <siprintf+0x3c>)
 8004e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e04:	9105      	str	r1, [sp, #20]
 8004e06:	6800      	ldr	r0, [r0, #0]
 8004e08:	a902      	add	r1, sp, #8
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	f000 f98e 	bl	800512c <_svfiprintf_r>
 8004e10:	2200      	movs	r2, #0
 8004e12:	9b02      	ldr	r3, [sp, #8]
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	b01c      	add	sp, #112	; 0x70
 8004e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e1c:	b003      	add	sp, #12
 8004e1e:	4770      	bx	lr
 8004e20:	2000005c 	.word	0x2000005c
 8004e24:	ffff0208 	.word	0xffff0208

08004e28 <memset>:
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4402      	add	r2, r0
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d100      	bne.n	8004e32 <memset+0xa>
 8004e30:	4770      	bx	lr
 8004e32:	f803 1b01 	strb.w	r1, [r3], #1
 8004e36:	e7f9      	b.n	8004e2c <memset+0x4>

08004e38 <__errno>:
 8004e38:	4b01      	ldr	r3, [pc, #4]	; (8004e40 <__errno+0x8>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	2000005c 	.word	0x2000005c

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	2600      	movs	r6, #0
 8004e48:	4d0c      	ldr	r5, [pc, #48]	; (8004e7c <__libc_init_array+0x38>)
 8004e4a:	4c0d      	ldr	r4, [pc, #52]	; (8004e80 <__libc_init_array+0x3c>)
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	f001 fa4c 	bl	80062f0 <_init>
 8004e58:	2600      	movs	r6, #0
 8004e5a:	4d0a      	ldr	r5, [pc, #40]	; (8004e84 <__libc_init_array+0x40>)
 8004e5c:	4c0a      	ldr	r4, [pc, #40]	; (8004e88 <__libc_init_array+0x44>)
 8004e5e:	1b64      	subs	r4, r4, r5
 8004e60:	10a4      	asrs	r4, r4, #2
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	08006744 	.word	0x08006744
 8004e80:	08006744 	.word	0x08006744
 8004e84:	08006744 	.word	0x08006744
 8004e88:	08006748 	.word	0x08006748

08004e8c <__retarget_lock_acquire_recursive>:
 8004e8c:	4770      	bx	lr

08004e8e <__retarget_lock_release_recursive>:
 8004e8e:	4770      	bx	lr

08004e90 <_free_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4605      	mov	r5, r0
 8004e94:	2900      	cmp	r1, #0
 8004e96:	d040      	beq.n	8004f1a <_free_r+0x8a>
 8004e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e9c:	1f0c      	subs	r4, r1, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bfb8      	it	lt
 8004ea2:	18e4      	addlt	r4, r4, r3
 8004ea4:	f000 f8dc 	bl	8005060 <__malloc_lock>
 8004ea8:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <_free_r+0x8c>)
 8004eaa:	6813      	ldr	r3, [r2, #0]
 8004eac:	b933      	cbnz	r3, 8004ebc <_free_r+0x2c>
 8004eae:	6063      	str	r3, [r4, #4]
 8004eb0:	6014      	str	r4, [r2, #0]
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eb8:	f000 b8d8 	b.w	800506c <__malloc_unlock>
 8004ebc:	42a3      	cmp	r3, r4
 8004ebe:	d908      	bls.n	8004ed2 <_free_r+0x42>
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	1821      	adds	r1, r4, r0
 8004ec4:	428b      	cmp	r3, r1
 8004ec6:	bf01      	itttt	eq
 8004ec8:	6819      	ldreq	r1, [r3, #0]
 8004eca:	685b      	ldreq	r3, [r3, #4]
 8004ecc:	1809      	addeq	r1, r1, r0
 8004ece:	6021      	streq	r1, [r4, #0]
 8004ed0:	e7ed      	b.n	8004eae <_free_r+0x1e>
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	b10b      	cbz	r3, 8004edc <_free_r+0x4c>
 8004ed8:	42a3      	cmp	r3, r4
 8004eda:	d9fa      	bls.n	8004ed2 <_free_r+0x42>
 8004edc:	6811      	ldr	r1, [r2, #0]
 8004ede:	1850      	adds	r0, r2, r1
 8004ee0:	42a0      	cmp	r0, r4
 8004ee2:	d10b      	bne.n	8004efc <_free_r+0x6c>
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	4401      	add	r1, r0
 8004ee8:	1850      	adds	r0, r2, r1
 8004eea:	4283      	cmp	r3, r0
 8004eec:	6011      	str	r1, [r2, #0]
 8004eee:	d1e0      	bne.n	8004eb2 <_free_r+0x22>
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4408      	add	r0, r1
 8004ef6:	6010      	str	r0, [r2, #0]
 8004ef8:	6053      	str	r3, [r2, #4]
 8004efa:	e7da      	b.n	8004eb2 <_free_r+0x22>
 8004efc:	d902      	bls.n	8004f04 <_free_r+0x74>
 8004efe:	230c      	movs	r3, #12
 8004f00:	602b      	str	r3, [r5, #0]
 8004f02:	e7d6      	b.n	8004eb2 <_free_r+0x22>
 8004f04:	6820      	ldr	r0, [r4, #0]
 8004f06:	1821      	adds	r1, r4, r0
 8004f08:	428b      	cmp	r3, r1
 8004f0a:	bf01      	itttt	eq
 8004f0c:	6819      	ldreq	r1, [r3, #0]
 8004f0e:	685b      	ldreq	r3, [r3, #4]
 8004f10:	1809      	addeq	r1, r1, r0
 8004f12:	6021      	streq	r1, [r4, #0]
 8004f14:	6063      	str	r3, [r4, #4]
 8004f16:	6054      	str	r4, [r2, #4]
 8004f18:	e7cb      	b.n	8004eb2 <_free_r+0x22>
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	20000358 	.word	0x20000358

08004f20 <sbrk_aligned>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4e0e      	ldr	r6, [pc, #56]	; (8004f5c <sbrk_aligned+0x3c>)
 8004f24:	460c      	mov	r4, r1
 8004f26:	6831      	ldr	r1, [r6, #0]
 8004f28:	4605      	mov	r5, r0
 8004f2a:	b911      	cbnz	r1, 8004f32 <sbrk_aligned+0x12>
 8004f2c:	f000 fbaa 	bl	8005684 <_sbrk_r>
 8004f30:	6030      	str	r0, [r6, #0]
 8004f32:	4621      	mov	r1, r4
 8004f34:	4628      	mov	r0, r5
 8004f36:	f000 fba5 	bl	8005684 <_sbrk_r>
 8004f3a:	1c43      	adds	r3, r0, #1
 8004f3c:	d00a      	beq.n	8004f54 <sbrk_aligned+0x34>
 8004f3e:	1cc4      	adds	r4, r0, #3
 8004f40:	f024 0403 	bic.w	r4, r4, #3
 8004f44:	42a0      	cmp	r0, r4
 8004f46:	d007      	beq.n	8004f58 <sbrk_aligned+0x38>
 8004f48:	1a21      	subs	r1, r4, r0
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 fb9a 	bl	8005684 <_sbrk_r>
 8004f50:	3001      	adds	r0, #1
 8004f52:	d101      	bne.n	8004f58 <sbrk_aligned+0x38>
 8004f54:	f04f 34ff 	mov.w	r4, #4294967295
 8004f58:	4620      	mov	r0, r4
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	2000035c 	.word	0x2000035c

08004f60 <_malloc_r>:
 8004f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f64:	1ccd      	adds	r5, r1, #3
 8004f66:	f025 0503 	bic.w	r5, r5, #3
 8004f6a:	3508      	adds	r5, #8
 8004f6c:	2d0c      	cmp	r5, #12
 8004f6e:	bf38      	it	cc
 8004f70:	250c      	movcc	r5, #12
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	4607      	mov	r7, r0
 8004f76:	db01      	blt.n	8004f7c <_malloc_r+0x1c>
 8004f78:	42a9      	cmp	r1, r5
 8004f7a:	d905      	bls.n	8004f88 <_malloc_r+0x28>
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	2600      	movs	r6, #0
 8004f80:	603b      	str	r3, [r7, #0]
 8004f82:	4630      	mov	r0, r6
 8004f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800505c <_malloc_r+0xfc>
 8004f8c:	f000 f868 	bl	8005060 <__malloc_lock>
 8004f90:	f8d8 3000 	ldr.w	r3, [r8]
 8004f94:	461c      	mov	r4, r3
 8004f96:	bb5c      	cbnz	r4, 8004ff0 <_malloc_r+0x90>
 8004f98:	4629      	mov	r1, r5
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	f7ff ffc0 	bl	8004f20 <sbrk_aligned>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	d155      	bne.n	8005052 <_malloc_r+0xf2>
 8004fa6:	f8d8 4000 	ldr.w	r4, [r8]
 8004faa:	4626      	mov	r6, r4
 8004fac:	2e00      	cmp	r6, #0
 8004fae:	d145      	bne.n	800503c <_malloc_r+0xdc>
 8004fb0:	2c00      	cmp	r4, #0
 8004fb2:	d048      	beq.n	8005046 <_malloc_r+0xe6>
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	4638      	mov	r0, r7
 8004fba:	eb04 0903 	add.w	r9, r4, r3
 8004fbe:	f000 fb61 	bl	8005684 <_sbrk_r>
 8004fc2:	4581      	cmp	r9, r0
 8004fc4:	d13f      	bne.n	8005046 <_malloc_r+0xe6>
 8004fc6:	6821      	ldr	r1, [r4, #0]
 8004fc8:	4638      	mov	r0, r7
 8004fca:	1a6d      	subs	r5, r5, r1
 8004fcc:	4629      	mov	r1, r5
 8004fce:	f7ff ffa7 	bl	8004f20 <sbrk_aligned>
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	d037      	beq.n	8005046 <_malloc_r+0xe6>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	442b      	add	r3, r5
 8004fda:	6023      	str	r3, [r4, #0]
 8004fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d038      	beq.n	8005056 <_malloc_r+0xf6>
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	42a2      	cmp	r2, r4
 8004fe8:	d12b      	bne.n	8005042 <_malloc_r+0xe2>
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	e00f      	b.n	8005010 <_malloc_r+0xb0>
 8004ff0:	6822      	ldr	r2, [r4, #0]
 8004ff2:	1b52      	subs	r2, r2, r5
 8004ff4:	d41f      	bmi.n	8005036 <_malloc_r+0xd6>
 8004ff6:	2a0b      	cmp	r2, #11
 8004ff8:	d917      	bls.n	800502a <_malloc_r+0xca>
 8004ffa:	1961      	adds	r1, r4, r5
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	6025      	str	r5, [r4, #0]
 8005000:	bf18      	it	ne
 8005002:	6059      	strne	r1, [r3, #4]
 8005004:	6863      	ldr	r3, [r4, #4]
 8005006:	bf08      	it	eq
 8005008:	f8c8 1000 	streq.w	r1, [r8]
 800500c:	5162      	str	r2, [r4, r5]
 800500e:	604b      	str	r3, [r1, #4]
 8005010:	4638      	mov	r0, r7
 8005012:	f104 060b 	add.w	r6, r4, #11
 8005016:	f000 f829 	bl	800506c <__malloc_unlock>
 800501a:	f026 0607 	bic.w	r6, r6, #7
 800501e:	1d23      	adds	r3, r4, #4
 8005020:	1af2      	subs	r2, r6, r3
 8005022:	d0ae      	beq.n	8004f82 <_malloc_r+0x22>
 8005024:	1b9b      	subs	r3, r3, r6
 8005026:	50a3      	str	r3, [r4, r2]
 8005028:	e7ab      	b.n	8004f82 <_malloc_r+0x22>
 800502a:	42a3      	cmp	r3, r4
 800502c:	6862      	ldr	r2, [r4, #4]
 800502e:	d1dd      	bne.n	8004fec <_malloc_r+0x8c>
 8005030:	f8c8 2000 	str.w	r2, [r8]
 8005034:	e7ec      	b.n	8005010 <_malloc_r+0xb0>
 8005036:	4623      	mov	r3, r4
 8005038:	6864      	ldr	r4, [r4, #4]
 800503a:	e7ac      	b.n	8004f96 <_malloc_r+0x36>
 800503c:	4634      	mov	r4, r6
 800503e:	6876      	ldr	r6, [r6, #4]
 8005040:	e7b4      	b.n	8004fac <_malloc_r+0x4c>
 8005042:	4613      	mov	r3, r2
 8005044:	e7cc      	b.n	8004fe0 <_malloc_r+0x80>
 8005046:	230c      	movs	r3, #12
 8005048:	4638      	mov	r0, r7
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	f000 f80e 	bl	800506c <__malloc_unlock>
 8005050:	e797      	b.n	8004f82 <_malloc_r+0x22>
 8005052:	6025      	str	r5, [r4, #0]
 8005054:	e7dc      	b.n	8005010 <_malloc_r+0xb0>
 8005056:	605b      	str	r3, [r3, #4]
 8005058:	deff      	udf	#255	; 0xff
 800505a:	bf00      	nop
 800505c:	20000358 	.word	0x20000358

08005060 <__malloc_lock>:
 8005060:	4801      	ldr	r0, [pc, #4]	; (8005068 <__malloc_lock+0x8>)
 8005062:	f7ff bf13 	b.w	8004e8c <__retarget_lock_acquire_recursive>
 8005066:	bf00      	nop
 8005068:	20000354 	.word	0x20000354

0800506c <__malloc_unlock>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__malloc_unlock+0x8>)
 800506e:	f7ff bf0e 	b.w	8004e8e <__retarget_lock_release_recursive>
 8005072:	bf00      	nop
 8005074:	20000354 	.word	0x20000354

08005078 <__ssputs_r>:
 8005078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800507c:	461f      	mov	r7, r3
 800507e:	688e      	ldr	r6, [r1, #8]
 8005080:	4682      	mov	sl, r0
 8005082:	42be      	cmp	r6, r7
 8005084:	460c      	mov	r4, r1
 8005086:	4690      	mov	r8, r2
 8005088:	680b      	ldr	r3, [r1, #0]
 800508a:	d82c      	bhi.n	80050e6 <__ssputs_r+0x6e>
 800508c:	898a      	ldrh	r2, [r1, #12]
 800508e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005092:	d026      	beq.n	80050e2 <__ssputs_r+0x6a>
 8005094:	6965      	ldr	r5, [r4, #20]
 8005096:	6909      	ldr	r1, [r1, #16]
 8005098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800509c:	eba3 0901 	sub.w	r9, r3, r1
 80050a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050a4:	1c7b      	adds	r3, r7, #1
 80050a6:	444b      	add	r3, r9
 80050a8:	106d      	asrs	r5, r5, #1
 80050aa:	429d      	cmp	r5, r3
 80050ac:	bf38      	it	cc
 80050ae:	461d      	movcc	r5, r3
 80050b0:	0553      	lsls	r3, r2, #21
 80050b2:	d527      	bpl.n	8005104 <__ssputs_r+0x8c>
 80050b4:	4629      	mov	r1, r5
 80050b6:	f7ff ff53 	bl	8004f60 <_malloc_r>
 80050ba:	4606      	mov	r6, r0
 80050bc:	b360      	cbz	r0, 8005118 <__ssputs_r+0xa0>
 80050be:	464a      	mov	r2, r9
 80050c0:	6921      	ldr	r1, [r4, #16]
 80050c2:	f000 fafd 	bl	80056c0 <memcpy>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d0:	81a3      	strh	r3, [r4, #12]
 80050d2:	6126      	str	r6, [r4, #16]
 80050d4:	444e      	add	r6, r9
 80050d6:	6026      	str	r6, [r4, #0]
 80050d8:	463e      	mov	r6, r7
 80050da:	6165      	str	r5, [r4, #20]
 80050dc:	eba5 0509 	sub.w	r5, r5, r9
 80050e0:	60a5      	str	r5, [r4, #8]
 80050e2:	42be      	cmp	r6, r7
 80050e4:	d900      	bls.n	80050e8 <__ssputs_r+0x70>
 80050e6:	463e      	mov	r6, r7
 80050e8:	4632      	mov	r2, r6
 80050ea:	4641      	mov	r1, r8
 80050ec:	6820      	ldr	r0, [r4, #0]
 80050ee:	f000 faaf 	bl	8005650 <memmove>
 80050f2:	2000      	movs	r0, #0
 80050f4:	68a3      	ldr	r3, [r4, #8]
 80050f6:	1b9b      	subs	r3, r3, r6
 80050f8:	60a3      	str	r3, [r4, #8]
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	4433      	add	r3, r6
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005104:	462a      	mov	r2, r5
 8005106:	f000 fae9 	bl	80056dc <_realloc_r>
 800510a:	4606      	mov	r6, r0
 800510c:	2800      	cmp	r0, #0
 800510e:	d1e0      	bne.n	80050d2 <__ssputs_r+0x5a>
 8005110:	4650      	mov	r0, sl
 8005112:	6921      	ldr	r1, [r4, #16]
 8005114:	f7ff febc 	bl	8004e90 <_free_r>
 8005118:	230c      	movs	r3, #12
 800511a:	f8ca 3000 	str.w	r3, [sl]
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005128:	81a3      	strh	r3, [r4, #12]
 800512a:	e7e9      	b.n	8005100 <__ssputs_r+0x88>

0800512c <_svfiprintf_r>:
 800512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	4698      	mov	r8, r3
 8005132:	898b      	ldrh	r3, [r1, #12]
 8005134:	4607      	mov	r7, r0
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	460d      	mov	r5, r1
 800513a:	4614      	mov	r4, r2
 800513c:	b09d      	sub	sp, #116	; 0x74
 800513e:	d50e      	bpl.n	800515e <_svfiprintf_r+0x32>
 8005140:	690b      	ldr	r3, [r1, #16]
 8005142:	b963      	cbnz	r3, 800515e <_svfiprintf_r+0x32>
 8005144:	2140      	movs	r1, #64	; 0x40
 8005146:	f7ff ff0b 	bl	8004f60 <_malloc_r>
 800514a:	6028      	str	r0, [r5, #0]
 800514c:	6128      	str	r0, [r5, #16]
 800514e:	b920      	cbnz	r0, 800515a <_svfiprintf_r+0x2e>
 8005150:	230c      	movs	r3, #12
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	e0d0      	b.n	80052fc <_svfiprintf_r+0x1d0>
 800515a:	2340      	movs	r3, #64	; 0x40
 800515c:	616b      	str	r3, [r5, #20]
 800515e:	2300      	movs	r3, #0
 8005160:	9309      	str	r3, [sp, #36]	; 0x24
 8005162:	2320      	movs	r3, #32
 8005164:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005168:	2330      	movs	r3, #48	; 0x30
 800516a:	f04f 0901 	mov.w	r9, #1
 800516e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005172:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005314 <_svfiprintf_r+0x1e8>
 8005176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800517a:	4623      	mov	r3, r4
 800517c:	469a      	mov	sl, r3
 800517e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005182:	b10a      	cbz	r2, 8005188 <_svfiprintf_r+0x5c>
 8005184:	2a25      	cmp	r2, #37	; 0x25
 8005186:	d1f9      	bne.n	800517c <_svfiprintf_r+0x50>
 8005188:	ebba 0b04 	subs.w	fp, sl, r4
 800518c:	d00b      	beq.n	80051a6 <_svfiprintf_r+0x7a>
 800518e:	465b      	mov	r3, fp
 8005190:	4622      	mov	r2, r4
 8005192:	4629      	mov	r1, r5
 8005194:	4638      	mov	r0, r7
 8005196:	f7ff ff6f 	bl	8005078 <__ssputs_r>
 800519a:	3001      	adds	r0, #1
 800519c:	f000 80a9 	beq.w	80052f2 <_svfiprintf_r+0x1c6>
 80051a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051a2:	445a      	add	r2, fp
 80051a4:	9209      	str	r2, [sp, #36]	; 0x24
 80051a6:	f89a 3000 	ldrb.w	r3, [sl]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80a1 	beq.w	80052f2 <_svfiprintf_r+0x1c6>
 80051b0:	2300      	movs	r3, #0
 80051b2:	f04f 32ff 	mov.w	r2, #4294967295
 80051b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051ba:	f10a 0a01 	add.w	sl, sl, #1
 80051be:	9304      	str	r3, [sp, #16]
 80051c0:	9307      	str	r3, [sp, #28]
 80051c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051c6:	931a      	str	r3, [sp, #104]	; 0x68
 80051c8:	4654      	mov	r4, sl
 80051ca:	2205      	movs	r2, #5
 80051cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d0:	4850      	ldr	r0, [pc, #320]	; (8005314 <_svfiprintf_r+0x1e8>)
 80051d2:	f000 fa67 	bl	80056a4 <memchr>
 80051d6:	9a04      	ldr	r2, [sp, #16]
 80051d8:	b9d8      	cbnz	r0, 8005212 <_svfiprintf_r+0xe6>
 80051da:	06d0      	lsls	r0, r2, #27
 80051dc:	bf44      	itt	mi
 80051de:	2320      	movmi	r3, #32
 80051e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051e4:	0711      	lsls	r1, r2, #28
 80051e6:	bf44      	itt	mi
 80051e8:	232b      	movmi	r3, #43	; 0x2b
 80051ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ee:	f89a 3000 	ldrb.w	r3, [sl]
 80051f2:	2b2a      	cmp	r3, #42	; 0x2a
 80051f4:	d015      	beq.n	8005222 <_svfiprintf_r+0xf6>
 80051f6:	4654      	mov	r4, sl
 80051f8:	2000      	movs	r0, #0
 80051fa:	f04f 0c0a 	mov.w	ip, #10
 80051fe:	9a07      	ldr	r2, [sp, #28]
 8005200:	4621      	mov	r1, r4
 8005202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005206:	3b30      	subs	r3, #48	; 0x30
 8005208:	2b09      	cmp	r3, #9
 800520a:	d94d      	bls.n	80052a8 <_svfiprintf_r+0x17c>
 800520c:	b1b0      	cbz	r0, 800523c <_svfiprintf_r+0x110>
 800520e:	9207      	str	r2, [sp, #28]
 8005210:	e014      	b.n	800523c <_svfiprintf_r+0x110>
 8005212:	eba0 0308 	sub.w	r3, r0, r8
 8005216:	fa09 f303 	lsl.w	r3, r9, r3
 800521a:	4313      	orrs	r3, r2
 800521c:	46a2      	mov	sl, r4
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	e7d2      	b.n	80051c8 <_svfiprintf_r+0x9c>
 8005222:	9b03      	ldr	r3, [sp, #12]
 8005224:	1d19      	adds	r1, r3, #4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	9103      	str	r1, [sp, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	bfbb      	ittet	lt
 800522e:	425b      	neglt	r3, r3
 8005230:	f042 0202 	orrlt.w	r2, r2, #2
 8005234:	9307      	strge	r3, [sp, #28]
 8005236:	9307      	strlt	r3, [sp, #28]
 8005238:	bfb8      	it	lt
 800523a:	9204      	strlt	r2, [sp, #16]
 800523c:	7823      	ldrb	r3, [r4, #0]
 800523e:	2b2e      	cmp	r3, #46	; 0x2e
 8005240:	d10c      	bne.n	800525c <_svfiprintf_r+0x130>
 8005242:	7863      	ldrb	r3, [r4, #1]
 8005244:	2b2a      	cmp	r3, #42	; 0x2a
 8005246:	d134      	bne.n	80052b2 <_svfiprintf_r+0x186>
 8005248:	9b03      	ldr	r3, [sp, #12]
 800524a:	3402      	adds	r4, #2
 800524c:	1d1a      	adds	r2, r3, #4
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	9203      	str	r2, [sp, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	bfb8      	it	lt
 8005256:	f04f 33ff 	movlt.w	r3, #4294967295
 800525a:	9305      	str	r3, [sp, #20]
 800525c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005318 <_svfiprintf_r+0x1ec>
 8005260:	2203      	movs	r2, #3
 8005262:	4650      	mov	r0, sl
 8005264:	7821      	ldrb	r1, [r4, #0]
 8005266:	f000 fa1d 	bl	80056a4 <memchr>
 800526a:	b138      	cbz	r0, 800527c <_svfiprintf_r+0x150>
 800526c:	2240      	movs	r2, #64	; 0x40
 800526e:	9b04      	ldr	r3, [sp, #16]
 8005270:	eba0 000a 	sub.w	r0, r0, sl
 8005274:	4082      	lsls	r2, r0
 8005276:	4313      	orrs	r3, r2
 8005278:	3401      	adds	r4, #1
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005280:	2206      	movs	r2, #6
 8005282:	4826      	ldr	r0, [pc, #152]	; (800531c <_svfiprintf_r+0x1f0>)
 8005284:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005288:	f000 fa0c 	bl	80056a4 <memchr>
 800528c:	2800      	cmp	r0, #0
 800528e:	d038      	beq.n	8005302 <_svfiprintf_r+0x1d6>
 8005290:	4b23      	ldr	r3, [pc, #140]	; (8005320 <_svfiprintf_r+0x1f4>)
 8005292:	bb1b      	cbnz	r3, 80052dc <_svfiprintf_r+0x1b0>
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	3307      	adds	r3, #7
 8005298:	f023 0307 	bic.w	r3, r3, #7
 800529c:	3308      	adds	r3, #8
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a2:	4433      	add	r3, r6
 80052a4:	9309      	str	r3, [sp, #36]	; 0x24
 80052a6:	e768      	b.n	800517a <_svfiprintf_r+0x4e>
 80052a8:	460c      	mov	r4, r1
 80052aa:	2001      	movs	r0, #1
 80052ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80052b0:	e7a6      	b.n	8005200 <_svfiprintf_r+0xd4>
 80052b2:	2300      	movs	r3, #0
 80052b4:	f04f 0c0a 	mov.w	ip, #10
 80052b8:	4619      	mov	r1, r3
 80052ba:	3401      	adds	r4, #1
 80052bc:	9305      	str	r3, [sp, #20]
 80052be:	4620      	mov	r0, r4
 80052c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052c4:	3a30      	subs	r2, #48	; 0x30
 80052c6:	2a09      	cmp	r2, #9
 80052c8:	d903      	bls.n	80052d2 <_svfiprintf_r+0x1a6>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0c6      	beq.n	800525c <_svfiprintf_r+0x130>
 80052ce:	9105      	str	r1, [sp, #20]
 80052d0:	e7c4      	b.n	800525c <_svfiprintf_r+0x130>
 80052d2:	4604      	mov	r4, r0
 80052d4:	2301      	movs	r3, #1
 80052d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052da:	e7f0      	b.n	80052be <_svfiprintf_r+0x192>
 80052dc:	ab03      	add	r3, sp, #12
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	462a      	mov	r2, r5
 80052e2:	4638      	mov	r0, r7
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <_svfiprintf_r+0x1f8>)
 80052e6:	a904      	add	r1, sp, #16
 80052e8:	f3af 8000 	nop.w
 80052ec:	1c42      	adds	r2, r0, #1
 80052ee:	4606      	mov	r6, r0
 80052f0:	d1d6      	bne.n	80052a0 <_svfiprintf_r+0x174>
 80052f2:	89ab      	ldrh	r3, [r5, #12]
 80052f4:	065b      	lsls	r3, r3, #25
 80052f6:	f53f af2d 	bmi.w	8005154 <_svfiprintf_r+0x28>
 80052fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052fc:	b01d      	add	sp, #116	; 0x74
 80052fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005302:	ab03      	add	r3, sp, #12
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	462a      	mov	r2, r5
 8005308:	4638      	mov	r0, r7
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <_svfiprintf_r+0x1f8>)
 800530c:	a904      	add	r1, sp, #16
 800530e:	f000 f87d 	bl	800540c <_printf_i>
 8005312:	e7eb      	b.n	80052ec <_svfiprintf_r+0x1c0>
 8005314:	08006340 	.word	0x08006340
 8005318:	08006346 	.word	0x08006346
 800531c:	0800634a 	.word	0x0800634a
 8005320:	00000000 	.word	0x00000000
 8005324:	08005079 	.word	0x08005079

08005328 <_printf_common>:
 8005328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800532c:	4616      	mov	r6, r2
 800532e:	4699      	mov	r9, r3
 8005330:	688a      	ldr	r2, [r1, #8]
 8005332:	690b      	ldr	r3, [r1, #16]
 8005334:	4607      	mov	r7, r0
 8005336:	4293      	cmp	r3, r2
 8005338:	bfb8      	it	lt
 800533a:	4613      	movlt	r3, r2
 800533c:	6033      	str	r3, [r6, #0]
 800533e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005342:	460c      	mov	r4, r1
 8005344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005348:	b10a      	cbz	r2, 800534e <_printf_common+0x26>
 800534a:	3301      	adds	r3, #1
 800534c:	6033      	str	r3, [r6, #0]
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	0699      	lsls	r1, r3, #26
 8005352:	bf42      	ittt	mi
 8005354:	6833      	ldrmi	r3, [r6, #0]
 8005356:	3302      	addmi	r3, #2
 8005358:	6033      	strmi	r3, [r6, #0]
 800535a:	6825      	ldr	r5, [r4, #0]
 800535c:	f015 0506 	ands.w	r5, r5, #6
 8005360:	d106      	bne.n	8005370 <_printf_common+0x48>
 8005362:	f104 0a19 	add.w	sl, r4, #25
 8005366:	68e3      	ldr	r3, [r4, #12]
 8005368:	6832      	ldr	r2, [r6, #0]
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	42ab      	cmp	r3, r5
 800536e:	dc2b      	bgt.n	80053c8 <_printf_common+0xa0>
 8005370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005374:	1e13      	subs	r3, r2, #0
 8005376:	6822      	ldr	r2, [r4, #0]
 8005378:	bf18      	it	ne
 800537a:	2301      	movne	r3, #1
 800537c:	0692      	lsls	r2, r2, #26
 800537e:	d430      	bmi.n	80053e2 <_printf_common+0xba>
 8005380:	4649      	mov	r1, r9
 8005382:	4638      	mov	r0, r7
 8005384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005388:	47c0      	blx	r8
 800538a:	3001      	adds	r0, #1
 800538c:	d023      	beq.n	80053d6 <_printf_common+0xae>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	6922      	ldr	r2, [r4, #16]
 8005392:	f003 0306 	and.w	r3, r3, #6
 8005396:	2b04      	cmp	r3, #4
 8005398:	bf14      	ite	ne
 800539a:	2500      	movne	r5, #0
 800539c:	6833      	ldreq	r3, [r6, #0]
 800539e:	f04f 0600 	mov.w	r6, #0
 80053a2:	bf08      	it	eq
 80053a4:	68e5      	ldreq	r5, [r4, #12]
 80053a6:	f104 041a 	add.w	r4, r4, #26
 80053aa:	bf08      	it	eq
 80053ac:	1aed      	subeq	r5, r5, r3
 80053ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053b2:	bf08      	it	eq
 80053b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053b8:	4293      	cmp	r3, r2
 80053ba:	bfc4      	itt	gt
 80053bc:	1a9b      	subgt	r3, r3, r2
 80053be:	18ed      	addgt	r5, r5, r3
 80053c0:	42b5      	cmp	r5, r6
 80053c2:	d11a      	bne.n	80053fa <_printf_common+0xd2>
 80053c4:	2000      	movs	r0, #0
 80053c6:	e008      	b.n	80053da <_printf_common+0xb2>
 80053c8:	2301      	movs	r3, #1
 80053ca:	4652      	mov	r2, sl
 80053cc:	4649      	mov	r1, r9
 80053ce:	4638      	mov	r0, r7
 80053d0:	47c0      	blx	r8
 80053d2:	3001      	adds	r0, #1
 80053d4:	d103      	bne.n	80053de <_printf_common+0xb6>
 80053d6:	f04f 30ff 	mov.w	r0, #4294967295
 80053da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053de:	3501      	adds	r5, #1
 80053e0:	e7c1      	b.n	8005366 <_printf_common+0x3e>
 80053e2:	2030      	movs	r0, #48	; 0x30
 80053e4:	18e1      	adds	r1, r4, r3
 80053e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053f0:	4422      	add	r2, r4
 80053f2:	3302      	adds	r3, #2
 80053f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053f8:	e7c2      	b.n	8005380 <_printf_common+0x58>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4622      	mov	r2, r4
 80053fe:	4649      	mov	r1, r9
 8005400:	4638      	mov	r0, r7
 8005402:	47c0      	blx	r8
 8005404:	3001      	adds	r0, #1
 8005406:	d0e6      	beq.n	80053d6 <_printf_common+0xae>
 8005408:	3601      	adds	r6, #1
 800540a:	e7d9      	b.n	80053c0 <_printf_common+0x98>

0800540c <_printf_i>:
 800540c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005410:	7e0f      	ldrb	r7, [r1, #24]
 8005412:	4691      	mov	r9, r2
 8005414:	2f78      	cmp	r7, #120	; 0x78
 8005416:	4680      	mov	r8, r0
 8005418:	460c      	mov	r4, r1
 800541a:	469a      	mov	sl, r3
 800541c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800541e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005422:	d807      	bhi.n	8005434 <_printf_i+0x28>
 8005424:	2f62      	cmp	r7, #98	; 0x62
 8005426:	d80a      	bhi.n	800543e <_printf_i+0x32>
 8005428:	2f00      	cmp	r7, #0
 800542a:	f000 80d5 	beq.w	80055d8 <_printf_i+0x1cc>
 800542e:	2f58      	cmp	r7, #88	; 0x58
 8005430:	f000 80c1 	beq.w	80055b6 <_printf_i+0x1aa>
 8005434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800543c:	e03a      	b.n	80054b4 <_printf_i+0xa8>
 800543e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005442:	2b15      	cmp	r3, #21
 8005444:	d8f6      	bhi.n	8005434 <_printf_i+0x28>
 8005446:	a101      	add	r1, pc, #4	; (adr r1, 800544c <_printf_i+0x40>)
 8005448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800544c:	080054a5 	.word	0x080054a5
 8005450:	080054b9 	.word	0x080054b9
 8005454:	08005435 	.word	0x08005435
 8005458:	08005435 	.word	0x08005435
 800545c:	08005435 	.word	0x08005435
 8005460:	08005435 	.word	0x08005435
 8005464:	080054b9 	.word	0x080054b9
 8005468:	08005435 	.word	0x08005435
 800546c:	08005435 	.word	0x08005435
 8005470:	08005435 	.word	0x08005435
 8005474:	08005435 	.word	0x08005435
 8005478:	080055bf 	.word	0x080055bf
 800547c:	080054e5 	.word	0x080054e5
 8005480:	08005579 	.word	0x08005579
 8005484:	08005435 	.word	0x08005435
 8005488:	08005435 	.word	0x08005435
 800548c:	080055e1 	.word	0x080055e1
 8005490:	08005435 	.word	0x08005435
 8005494:	080054e5 	.word	0x080054e5
 8005498:	08005435 	.word	0x08005435
 800549c:	08005435 	.word	0x08005435
 80054a0:	08005581 	.word	0x08005581
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	1d1a      	adds	r2, r3, #4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	602a      	str	r2, [r5, #0]
 80054ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0a0      	b.n	80055fa <_printf_i+0x1ee>
 80054b8:	6820      	ldr	r0, [r4, #0]
 80054ba:	682b      	ldr	r3, [r5, #0]
 80054bc:	0607      	lsls	r7, r0, #24
 80054be:	f103 0104 	add.w	r1, r3, #4
 80054c2:	6029      	str	r1, [r5, #0]
 80054c4:	d501      	bpl.n	80054ca <_printf_i+0xbe>
 80054c6:	681e      	ldr	r6, [r3, #0]
 80054c8:	e003      	b.n	80054d2 <_printf_i+0xc6>
 80054ca:	0646      	lsls	r6, r0, #25
 80054cc:	d5fb      	bpl.n	80054c6 <_printf_i+0xba>
 80054ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054d2:	2e00      	cmp	r6, #0
 80054d4:	da03      	bge.n	80054de <_printf_i+0xd2>
 80054d6:	232d      	movs	r3, #45	; 0x2d
 80054d8:	4276      	negs	r6, r6
 80054da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054de:	230a      	movs	r3, #10
 80054e0:	4859      	ldr	r0, [pc, #356]	; (8005648 <_printf_i+0x23c>)
 80054e2:	e012      	b.n	800550a <_printf_i+0xfe>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	6820      	ldr	r0, [r4, #0]
 80054e8:	1d19      	adds	r1, r3, #4
 80054ea:	6029      	str	r1, [r5, #0]
 80054ec:	0605      	lsls	r5, r0, #24
 80054ee:	d501      	bpl.n	80054f4 <_printf_i+0xe8>
 80054f0:	681e      	ldr	r6, [r3, #0]
 80054f2:	e002      	b.n	80054fa <_printf_i+0xee>
 80054f4:	0641      	lsls	r1, r0, #25
 80054f6:	d5fb      	bpl.n	80054f0 <_printf_i+0xe4>
 80054f8:	881e      	ldrh	r6, [r3, #0]
 80054fa:	2f6f      	cmp	r7, #111	; 0x6f
 80054fc:	bf0c      	ite	eq
 80054fe:	2308      	moveq	r3, #8
 8005500:	230a      	movne	r3, #10
 8005502:	4851      	ldr	r0, [pc, #324]	; (8005648 <_printf_i+0x23c>)
 8005504:	2100      	movs	r1, #0
 8005506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800550a:	6865      	ldr	r5, [r4, #4]
 800550c:	2d00      	cmp	r5, #0
 800550e:	bfa8      	it	ge
 8005510:	6821      	ldrge	r1, [r4, #0]
 8005512:	60a5      	str	r5, [r4, #8]
 8005514:	bfa4      	itt	ge
 8005516:	f021 0104 	bicge.w	r1, r1, #4
 800551a:	6021      	strge	r1, [r4, #0]
 800551c:	b90e      	cbnz	r6, 8005522 <_printf_i+0x116>
 800551e:	2d00      	cmp	r5, #0
 8005520:	d04b      	beq.n	80055ba <_printf_i+0x1ae>
 8005522:	4615      	mov	r5, r2
 8005524:	fbb6 f1f3 	udiv	r1, r6, r3
 8005528:	fb03 6711 	mls	r7, r3, r1, r6
 800552c:	5dc7      	ldrb	r7, [r0, r7]
 800552e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005532:	4637      	mov	r7, r6
 8005534:	42bb      	cmp	r3, r7
 8005536:	460e      	mov	r6, r1
 8005538:	d9f4      	bls.n	8005524 <_printf_i+0x118>
 800553a:	2b08      	cmp	r3, #8
 800553c:	d10b      	bne.n	8005556 <_printf_i+0x14a>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	07de      	lsls	r6, r3, #31
 8005542:	d508      	bpl.n	8005556 <_printf_i+0x14a>
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	6861      	ldr	r1, [r4, #4]
 8005548:	4299      	cmp	r1, r3
 800554a:	bfde      	ittt	le
 800554c:	2330      	movle	r3, #48	; 0x30
 800554e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005552:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005556:	1b52      	subs	r2, r2, r5
 8005558:	6122      	str	r2, [r4, #16]
 800555a:	464b      	mov	r3, r9
 800555c:	4621      	mov	r1, r4
 800555e:	4640      	mov	r0, r8
 8005560:	f8cd a000 	str.w	sl, [sp]
 8005564:	aa03      	add	r2, sp, #12
 8005566:	f7ff fedf 	bl	8005328 <_printf_common>
 800556a:	3001      	adds	r0, #1
 800556c:	d14a      	bne.n	8005604 <_printf_i+0x1f8>
 800556e:	f04f 30ff 	mov.w	r0, #4294967295
 8005572:	b004      	add	sp, #16
 8005574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	f043 0320 	orr.w	r3, r3, #32
 800557e:	6023      	str	r3, [r4, #0]
 8005580:	2778      	movs	r7, #120	; 0x78
 8005582:	4832      	ldr	r0, [pc, #200]	; (800564c <_printf_i+0x240>)
 8005584:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	6829      	ldr	r1, [r5, #0]
 800558c:	061f      	lsls	r7, r3, #24
 800558e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005592:	d402      	bmi.n	800559a <_printf_i+0x18e>
 8005594:	065f      	lsls	r7, r3, #25
 8005596:	bf48      	it	mi
 8005598:	b2b6      	uxthmi	r6, r6
 800559a:	07df      	lsls	r7, r3, #31
 800559c:	bf48      	it	mi
 800559e:	f043 0320 	orrmi.w	r3, r3, #32
 80055a2:	6029      	str	r1, [r5, #0]
 80055a4:	bf48      	it	mi
 80055a6:	6023      	strmi	r3, [r4, #0]
 80055a8:	b91e      	cbnz	r6, 80055b2 <_printf_i+0x1a6>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	f023 0320 	bic.w	r3, r3, #32
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	2310      	movs	r3, #16
 80055b4:	e7a6      	b.n	8005504 <_printf_i+0xf8>
 80055b6:	4824      	ldr	r0, [pc, #144]	; (8005648 <_printf_i+0x23c>)
 80055b8:	e7e4      	b.n	8005584 <_printf_i+0x178>
 80055ba:	4615      	mov	r5, r2
 80055bc:	e7bd      	b.n	800553a <_printf_i+0x12e>
 80055be:	682b      	ldr	r3, [r5, #0]
 80055c0:	6826      	ldr	r6, [r4, #0]
 80055c2:	1d18      	adds	r0, r3, #4
 80055c4:	6961      	ldr	r1, [r4, #20]
 80055c6:	6028      	str	r0, [r5, #0]
 80055c8:	0635      	lsls	r5, r6, #24
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	d501      	bpl.n	80055d2 <_printf_i+0x1c6>
 80055ce:	6019      	str	r1, [r3, #0]
 80055d0:	e002      	b.n	80055d8 <_printf_i+0x1cc>
 80055d2:	0670      	lsls	r0, r6, #25
 80055d4:	d5fb      	bpl.n	80055ce <_printf_i+0x1c2>
 80055d6:	8019      	strh	r1, [r3, #0]
 80055d8:	2300      	movs	r3, #0
 80055da:	4615      	mov	r5, r2
 80055dc:	6123      	str	r3, [r4, #16]
 80055de:	e7bc      	b.n	800555a <_printf_i+0x14e>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	2100      	movs	r1, #0
 80055e4:	1d1a      	adds	r2, r3, #4
 80055e6:	602a      	str	r2, [r5, #0]
 80055e8:	681d      	ldr	r5, [r3, #0]
 80055ea:	6862      	ldr	r2, [r4, #4]
 80055ec:	4628      	mov	r0, r5
 80055ee:	f000 f859 	bl	80056a4 <memchr>
 80055f2:	b108      	cbz	r0, 80055f8 <_printf_i+0x1ec>
 80055f4:	1b40      	subs	r0, r0, r5
 80055f6:	6060      	str	r0, [r4, #4]
 80055f8:	6863      	ldr	r3, [r4, #4]
 80055fa:	6123      	str	r3, [r4, #16]
 80055fc:	2300      	movs	r3, #0
 80055fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005602:	e7aa      	b.n	800555a <_printf_i+0x14e>
 8005604:	462a      	mov	r2, r5
 8005606:	4649      	mov	r1, r9
 8005608:	4640      	mov	r0, r8
 800560a:	6923      	ldr	r3, [r4, #16]
 800560c:	47d0      	blx	sl
 800560e:	3001      	adds	r0, #1
 8005610:	d0ad      	beq.n	800556e <_printf_i+0x162>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	079b      	lsls	r3, r3, #30
 8005616:	d413      	bmi.n	8005640 <_printf_i+0x234>
 8005618:	68e0      	ldr	r0, [r4, #12]
 800561a:	9b03      	ldr	r3, [sp, #12]
 800561c:	4298      	cmp	r0, r3
 800561e:	bfb8      	it	lt
 8005620:	4618      	movlt	r0, r3
 8005622:	e7a6      	b.n	8005572 <_printf_i+0x166>
 8005624:	2301      	movs	r3, #1
 8005626:	4632      	mov	r2, r6
 8005628:	4649      	mov	r1, r9
 800562a:	4640      	mov	r0, r8
 800562c:	47d0      	blx	sl
 800562e:	3001      	adds	r0, #1
 8005630:	d09d      	beq.n	800556e <_printf_i+0x162>
 8005632:	3501      	adds	r5, #1
 8005634:	68e3      	ldr	r3, [r4, #12]
 8005636:	9903      	ldr	r1, [sp, #12]
 8005638:	1a5b      	subs	r3, r3, r1
 800563a:	42ab      	cmp	r3, r5
 800563c:	dcf2      	bgt.n	8005624 <_printf_i+0x218>
 800563e:	e7eb      	b.n	8005618 <_printf_i+0x20c>
 8005640:	2500      	movs	r5, #0
 8005642:	f104 0619 	add.w	r6, r4, #25
 8005646:	e7f5      	b.n	8005634 <_printf_i+0x228>
 8005648:	08006351 	.word	0x08006351
 800564c:	08006362 	.word	0x08006362

08005650 <memmove>:
 8005650:	4288      	cmp	r0, r1
 8005652:	b510      	push	{r4, lr}
 8005654:	eb01 0402 	add.w	r4, r1, r2
 8005658:	d902      	bls.n	8005660 <memmove+0x10>
 800565a:	4284      	cmp	r4, r0
 800565c:	4623      	mov	r3, r4
 800565e:	d807      	bhi.n	8005670 <memmove+0x20>
 8005660:	1e43      	subs	r3, r0, #1
 8005662:	42a1      	cmp	r1, r4
 8005664:	d008      	beq.n	8005678 <memmove+0x28>
 8005666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800566a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800566e:	e7f8      	b.n	8005662 <memmove+0x12>
 8005670:	4601      	mov	r1, r0
 8005672:	4402      	add	r2, r0
 8005674:	428a      	cmp	r2, r1
 8005676:	d100      	bne.n	800567a <memmove+0x2a>
 8005678:	bd10      	pop	{r4, pc}
 800567a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800567e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005682:	e7f7      	b.n	8005674 <memmove+0x24>

08005684 <_sbrk_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	2300      	movs	r3, #0
 8005688:	4d05      	ldr	r5, [pc, #20]	; (80056a0 <_sbrk_r+0x1c>)
 800568a:	4604      	mov	r4, r0
 800568c:	4608      	mov	r0, r1
 800568e:	602b      	str	r3, [r5, #0]
 8005690:	f7ff f956 	bl	8004940 <_sbrk>
 8005694:	1c43      	adds	r3, r0, #1
 8005696:	d102      	bne.n	800569e <_sbrk_r+0x1a>
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	b103      	cbz	r3, 800569e <_sbrk_r+0x1a>
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	20000350 	.word	0x20000350

080056a4 <memchr>:
 80056a4:	4603      	mov	r3, r0
 80056a6:	b510      	push	{r4, lr}
 80056a8:	b2c9      	uxtb	r1, r1
 80056aa:	4402      	add	r2, r0
 80056ac:	4293      	cmp	r3, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	d101      	bne.n	80056b6 <memchr+0x12>
 80056b2:	2000      	movs	r0, #0
 80056b4:	e003      	b.n	80056be <memchr+0x1a>
 80056b6:	7804      	ldrb	r4, [r0, #0]
 80056b8:	3301      	adds	r3, #1
 80056ba:	428c      	cmp	r4, r1
 80056bc:	d1f6      	bne.n	80056ac <memchr+0x8>
 80056be:	bd10      	pop	{r4, pc}

080056c0 <memcpy>:
 80056c0:	440a      	add	r2, r1
 80056c2:	4291      	cmp	r1, r2
 80056c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c8:	d100      	bne.n	80056cc <memcpy+0xc>
 80056ca:	4770      	bx	lr
 80056cc:	b510      	push	{r4, lr}
 80056ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d2:	4291      	cmp	r1, r2
 80056d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d8:	d1f9      	bne.n	80056ce <memcpy+0xe>
 80056da:	bd10      	pop	{r4, pc}

080056dc <_realloc_r>:
 80056dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e0:	4680      	mov	r8, r0
 80056e2:	4614      	mov	r4, r2
 80056e4:	460e      	mov	r6, r1
 80056e6:	b921      	cbnz	r1, 80056f2 <_realloc_r+0x16>
 80056e8:	4611      	mov	r1, r2
 80056ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ee:	f7ff bc37 	b.w	8004f60 <_malloc_r>
 80056f2:	b92a      	cbnz	r2, 8005700 <_realloc_r+0x24>
 80056f4:	f7ff fbcc 	bl	8004e90 <_free_r>
 80056f8:	4625      	mov	r5, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005700:	f000 f81b 	bl	800573a <_malloc_usable_size_r>
 8005704:	4284      	cmp	r4, r0
 8005706:	4607      	mov	r7, r0
 8005708:	d802      	bhi.n	8005710 <_realloc_r+0x34>
 800570a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800570e:	d812      	bhi.n	8005736 <_realloc_r+0x5a>
 8005710:	4621      	mov	r1, r4
 8005712:	4640      	mov	r0, r8
 8005714:	f7ff fc24 	bl	8004f60 <_malloc_r>
 8005718:	4605      	mov	r5, r0
 800571a:	2800      	cmp	r0, #0
 800571c:	d0ed      	beq.n	80056fa <_realloc_r+0x1e>
 800571e:	42bc      	cmp	r4, r7
 8005720:	4622      	mov	r2, r4
 8005722:	4631      	mov	r1, r6
 8005724:	bf28      	it	cs
 8005726:	463a      	movcs	r2, r7
 8005728:	f7ff ffca 	bl	80056c0 <memcpy>
 800572c:	4631      	mov	r1, r6
 800572e:	4640      	mov	r0, r8
 8005730:	f7ff fbae 	bl	8004e90 <_free_r>
 8005734:	e7e1      	b.n	80056fa <_realloc_r+0x1e>
 8005736:	4635      	mov	r5, r6
 8005738:	e7df      	b.n	80056fa <_realloc_r+0x1e>

0800573a <_malloc_usable_size_r>:
 800573a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800573e:	1f18      	subs	r0, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	bfbc      	itt	lt
 8005744:	580b      	ldrlt	r3, [r1, r0]
 8005746:	18c0      	addlt	r0, r0, r3
 8005748:	4770      	bx	lr
	...

0800574c <sinf>:
 800574c:	b507      	push	{r0, r1, r2, lr}
 800574e:	4a1b      	ldr	r2, [pc, #108]	; (80057bc <sinf+0x70>)
 8005750:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005754:	4293      	cmp	r3, r2
 8005756:	4601      	mov	r1, r0
 8005758:	dc06      	bgt.n	8005768 <sinf+0x1c>
 800575a:	2200      	movs	r2, #0
 800575c:	2100      	movs	r1, #0
 800575e:	b003      	add	sp, #12
 8005760:	f85d eb04 	ldr.w	lr, [sp], #4
 8005764:	f000 b8ac 	b.w	80058c0 <__kernel_sinf>
 8005768:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800576c:	db04      	blt.n	8005778 <sinf+0x2c>
 800576e:	f7fb f951 	bl	8000a14 <__aeabi_fsub>
 8005772:	b003      	add	sp, #12
 8005774:	f85d fb04 	ldr.w	pc, [sp], #4
 8005778:	4669      	mov	r1, sp
 800577a:	f000 f917 	bl	80059ac <__ieee754_rem_pio2f>
 800577e:	f000 0003 	and.w	r0, r0, #3
 8005782:	2801      	cmp	r0, #1
 8005784:	d008      	beq.n	8005798 <sinf+0x4c>
 8005786:	2802      	cmp	r0, #2
 8005788:	d00b      	beq.n	80057a2 <sinf+0x56>
 800578a:	b990      	cbnz	r0, 80057b2 <sinf+0x66>
 800578c:	2201      	movs	r2, #1
 800578e:	9901      	ldr	r1, [sp, #4]
 8005790:	9800      	ldr	r0, [sp, #0]
 8005792:	f000 f895 	bl	80058c0 <__kernel_sinf>
 8005796:	e7ec      	b.n	8005772 <sinf+0x26>
 8005798:	9901      	ldr	r1, [sp, #4]
 800579a:	9800      	ldr	r0, [sp, #0]
 800579c:	f000 f810 	bl	80057c0 <__kernel_cosf>
 80057a0:	e7e7      	b.n	8005772 <sinf+0x26>
 80057a2:	2201      	movs	r2, #1
 80057a4:	9901      	ldr	r1, [sp, #4]
 80057a6:	9800      	ldr	r0, [sp, #0]
 80057a8:	f000 f88a 	bl	80058c0 <__kernel_sinf>
 80057ac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80057b0:	e7df      	b.n	8005772 <sinf+0x26>
 80057b2:	9901      	ldr	r1, [sp, #4]
 80057b4:	9800      	ldr	r0, [sp, #0]
 80057b6:	f000 f803 	bl	80057c0 <__kernel_cosf>
 80057ba:	e7f7      	b.n	80057ac <sinf+0x60>
 80057bc:	3f490fd8 	.word	0x3f490fd8

080057c0 <__kernel_cosf>:
 80057c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c4:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80057c8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80057cc:	4606      	mov	r6, r0
 80057ce:	4688      	mov	r8, r1
 80057d0:	da03      	bge.n	80057da <__kernel_cosf+0x1a>
 80057d2:	f7fb fa9f 	bl	8000d14 <__aeabi_f2iz>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d05c      	beq.n	8005894 <__kernel_cosf+0xd4>
 80057da:	4631      	mov	r1, r6
 80057dc:	4630      	mov	r0, r6
 80057de:	f7fa fe55 	bl	800048c <__aeabi_fmul>
 80057e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80057e6:	4605      	mov	r5, r0
 80057e8:	f7fa fe50 	bl	800048c <__aeabi_fmul>
 80057ec:	492b      	ldr	r1, [pc, #172]	; (800589c <__kernel_cosf+0xdc>)
 80057ee:	4607      	mov	r7, r0
 80057f0:	4628      	mov	r0, r5
 80057f2:	f7fa fe4b 	bl	800048c <__aeabi_fmul>
 80057f6:	492a      	ldr	r1, [pc, #168]	; (80058a0 <__kernel_cosf+0xe0>)
 80057f8:	f7fb f90e 	bl	8000a18 <__addsf3>
 80057fc:	4629      	mov	r1, r5
 80057fe:	f7fa fe45 	bl	800048c <__aeabi_fmul>
 8005802:	4928      	ldr	r1, [pc, #160]	; (80058a4 <__kernel_cosf+0xe4>)
 8005804:	f7fb f906 	bl	8000a14 <__aeabi_fsub>
 8005808:	4629      	mov	r1, r5
 800580a:	f7fa fe3f 	bl	800048c <__aeabi_fmul>
 800580e:	4926      	ldr	r1, [pc, #152]	; (80058a8 <__kernel_cosf+0xe8>)
 8005810:	f7fb f902 	bl	8000a18 <__addsf3>
 8005814:	4629      	mov	r1, r5
 8005816:	f7fa fe39 	bl	800048c <__aeabi_fmul>
 800581a:	4924      	ldr	r1, [pc, #144]	; (80058ac <__kernel_cosf+0xec>)
 800581c:	f7fb f8fa 	bl	8000a14 <__aeabi_fsub>
 8005820:	4629      	mov	r1, r5
 8005822:	f7fa fe33 	bl	800048c <__aeabi_fmul>
 8005826:	4922      	ldr	r1, [pc, #136]	; (80058b0 <__kernel_cosf+0xf0>)
 8005828:	f7fb f8f6 	bl	8000a18 <__addsf3>
 800582c:	4629      	mov	r1, r5
 800582e:	f7fa fe2d 	bl	800048c <__aeabi_fmul>
 8005832:	4629      	mov	r1, r5
 8005834:	f7fa fe2a 	bl	800048c <__aeabi_fmul>
 8005838:	4641      	mov	r1, r8
 800583a:	4605      	mov	r5, r0
 800583c:	4630      	mov	r0, r6
 800583e:	f7fa fe25 	bl	800048c <__aeabi_fmul>
 8005842:	4601      	mov	r1, r0
 8005844:	4628      	mov	r0, r5
 8005846:	f7fb f8e5 	bl	8000a14 <__aeabi_fsub>
 800584a:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <__kernel_cosf+0xf4>)
 800584c:	4605      	mov	r5, r0
 800584e:	429c      	cmp	r4, r3
 8005850:	dc0a      	bgt.n	8005868 <__kernel_cosf+0xa8>
 8005852:	4601      	mov	r1, r0
 8005854:	4638      	mov	r0, r7
 8005856:	f7fb f8dd 	bl	8000a14 <__aeabi_fsub>
 800585a:	4601      	mov	r1, r0
 800585c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005860:	f7fb f8d8 	bl	8000a14 <__aeabi_fsub>
 8005864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005868:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <__kernel_cosf+0xf8>)
 800586a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800586e:	429c      	cmp	r4, r3
 8005870:	bfcc      	ite	gt
 8005872:	4c12      	ldrgt	r4, [pc, #72]	; (80058bc <__kernel_cosf+0xfc>)
 8005874:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8005878:	4621      	mov	r1, r4
 800587a:	f7fb f8cb 	bl	8000a14 <__aeabi_fsub>
 800587e:	4621      	mov	r1, r4
 8005880:	4606      	mov	r6, r0
 8005882:	4638      	mov	r0, r7
 8005884:	f7fb f8c6 	bl	8000a14 <__aeabi_fsub>
 8005888:	4629      	mov	r1, r5
 800588a:	f7fb f8c3 	bl	8000a14 <__aeabi_fsub>
 800588e:	4601      	mov	r1, r0
 8005890:	4630      	mov	r0, r6
 8005892:	e7e5      	b.n	8005860 <__kernel_cosf+0xa0>
 8005894:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005898:	e7e4      	b.n	8005864 <__kernel_cosf+0xa4>
 800589a:	bf00      	nop
 800589c:	ad47d74e 	.word	0xad47d74e
 80058a0:	310f74f6 	.word	0x310f74f6
 80058a4:	3493f27c 	.word	0x3493f27c
 80058a8:	37d00d01 	.word	0x37d00d01
 80058ac:	3ab60b61 	.word	0x3ab60b61
 80058b0:	3d2aaaab 	.word	0x3d2aaaab
 80058b4:	3e999999 	.word	0x3e999999
 80058b8:	3f480000 	.word	0x3f480000
 80058bc:	3e900000 	.word	0x3e900000

080058c0 <__kernel_sinf>:
 80058c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80058c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80058cc:	4604      	mov	r4, r0
 80058ce:	460f      	mov	r7, r1
 80058d0:	4691      	mov	r9, r2
 80058d2:	da03      	bge.n	80058dc <__kernel_sinf+0x1c>
 80058d4:	f7fb fa1e 	bl	8000d14 <__aeabi_f2iz>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d035      	beq.n	8005948 <__kernel_sinf+0x88>
 80058dc:	4621      	mov	r1, r4
 80058de:	4620      	mov	r0, r4
 80058e0:	f7fa fdd4 	bl	800048c <__aeabi_fmul>
 80058e4:	4605      	mov	r5, r0
 80058e6:	4601      	mov	r1, r0
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7fa fdcf 	bl	800048c <__aeabi_fmul>
 80058ee:	4929      	ldr	r1, [pc, #164]	; (8005994 <__kernel_sinf+0xd4>)
 80058f0:	4606      	mov	r6, r0
 80058f2:	4628      	mov	r0, r5
 80058f4:	f7fa fdca 	bl	800048c <__aeabi_fmul>
 80058f8:	4927      	ldr	r1, [pc, #156]	; (8005998 <__kernel_sinf+0xd8>)
 80058fa:	f7fb f88b 	bl	8000a14 <__aeabi_fsub>
 80058fe:	4629      	mov	r1, r5
 8005900:	f7fa fdc4 	bl	800048c <__aeabi_fmul>
 8005904:	4925      	ldr	r1, [pc, #148]	; (800599c <__kernel_sinf+0xdc>)
 8005906:	f7fb f887 	bl	8000a18 <__addsf3>
 800590a:	4629      	mov	r1, r5
 800590c:	f7fa fdbe 	bl	800048c <__aeabi_fmul>
 8005910:	4923      	ldr	r1, [pc, #140]	; (80059a0 <__kernel_sinf+0xe0>)
 8005912:	f7fb f87f 	bl	8000a14 <__aeabi_fsub>
 8005916:	4629      	mov	r1, r5
 8005918:	f7fa fdb8 	bl	800048c <__aeabi_fmul>
 800591c:	4921      	ldr	r1, [pc, #132]	; (80059a4 <__kernel_sinf+0xe4>)
 800591e:	f7fb f87b 	bl	8000a18 <__addsf3>
 8005922:	4680      	mov	r8, r0
 8005924:	f1b9 0f00 	cmp.w	r9, #0
 8005928:	d111      	bne.n	800594e <__kernel_sinf+0x8e>
 800592a:	4601      	mov	r1, r0
 800592c:	4628      	mov	r0, r5
 800592e:	f7fa fdad 	bl	800048c <__aeabi_fmul>
 8005932:	491d      	ldr	r1, [pc, #116]	; (80059a8 <__kernel_sinf+0xe8>)
 8005934:	f7fb f86e 	bl	8000a14 <__aeabi_fsub>
 8005938:	4631      	mov	r1, r6
 800593a:	f7fa fda7 	bl	800048c <__aeabi_fmul>
 800593e:	4601      	mov	r1, r0
 8005940:	4620      	mov	r0, r4
 8005942:	f7fb f869 	bl	8000a18 <__addsf3>
 8005946:	4604      	mov	r4, r0
 8005948:	4620      	mov	r0, r4
 800594a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800594e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005952:	4638      	mov	r0, r7
 8005954:	f7fa fd9a 	bl	800048c <__aeabi_fmul>
 8005958:	4641      	mov	r1, r8
 800595a:	4681      	mov	r9, r0
 800595c:	4630      	mov	r0, r6
 800595e:	f7fa fd95 	bl	800048c <__aeabi_fmul>
 8005962:	4601      	mov	r1, r0
 8005964:	4648      	mov	r0, r9
 8005966:	f7fb f855 	bl	8000a14 <__aeabi_fsub>
 800596a:	4629      	mov	r1, r5
 800596c:	f7fa fd8e 	bl	800048c <__aeabi_fmul>
 8005970:	4639      	mov	r1, r7
 8005972:	f7fb f84f 	bl	8000a14 <__aeabi_fsub>
 8005976:	490c      	ldr	r1, [pc, #48]	; (80059a8 <__kernel_sinf+0xe8>)
 8005978:	4605      	mov	r5, r0
 800597a:	4630      	mov	r0, r6
 800597c:	f7fa fd86 	bl	800048c <__aeabi_fmul>
 8005980:	4601      	mov	r1, r0
 8005982:	4628      	mov	r0, r5
 8005984:	f7fb f848 	bl	8000a18 <__addsf3>
 8005988:	4601      	mov	r1, r0
 800598a:	4620      	mov	r0, r4
 800598c:	f7fb f842 	bl	8000a14 <__aeabi_fsub>
 8005990:	e7d9      	b.n	8005946 <__kernel_sinf+0x86>
 8005992:	bf00      	nop
 8005994:	2f2ec9d3 	.word	0x2f2ec9d3
 8005998:	32d72f34 	.word	0x32d72f34
 800599c:	3638ef1b 	.word	0x3638ef1b
 80059a0:	39500d01 	.word	0x39500d01
 80059a4:	3c088889 	.word	0x3c088889
 80059a8:	3e2aaaab 	.word	0x3e2aaaab

080059ac <__ieee754_rem_pio2f>:
 80059ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	4aa0      	ldr	r2, [pc, #640]	; (8005c34 <__ieee754_rem_pio2f+0x288>)
 80059b2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80059b6:	4296      	cmp	r6, r2
 80059b8:	460c      	mov	r4, r1
 80059ba:	4682      	mov	sl, r0
 80059bc:	b087      	sub	sp, #28
 80059be:	dc04      	bgt.n	80059ca <__ieee754_rem_pio2f+0x1e>
 80059c0:	2300      	movs	r3, #0
 80059c2:	6008      	str	r0, [r1, #0]
 80059c4:	604b      	str	r3, [r1, #4]
 80059c6:	2500      	movs	r5, #0
 80059c8:	e01a      	b.n	8005a00 <__ieee754_rem_pio2f+0x54>
 80059ca:	4a9b      	ldr	r2, [pc, #620]	; (8005c38 <__ieee754_rem_pio2f+0x28c>)
 80059cc:	4296      	cmp	r6, r2
 80059ce:	dc4b      	bgt.n	8005a68 <__ieee754_rem_pio2f+0xbc>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	499a      	ldr	r1, [pc, #616]	; (8005c3c <__ieee754_rem_pio2f+0x290>)
 80059d4:	4f9a      	ldr	r7, [pc, #616]	; (8005c40 <__ieee754_rem_pio2f+0x294>)
 80059d6:	f026 060f 	bic.w	r6, r6, #15
 80059da:	dd23      	ble.n	8005a24 <__ieee754_rem_pio2f+0x78>
 80059dc:	f7fb f81a 	bl	8000a14 <__aeabi_fsub>
 80059e0:	42be      	cmp	r6, r7
 80059e2:	4605      	mov	r5, r0
 80059e4:	d010      	beq.n	8005a08 <__ieee754_rem_pio2f+0x5c>
 80059e6:	4997      	ldr	r1, [pc, #604]	; (8005c44 <__ieee754_rem_pio2f+0x298>)
 80059e8:	f7fb f814 	bl	8000a14 <__aeabi_fsub>
 80059ec:	4601      	mov	r1, r0
 80059ee:	6020      	str	r0, [r4, #0]
 80059f0:	4628      	mov	r0, r5
 80059f2:	f7fb f80f 	bl	8000a14 <__aeabi_fsub>
 80059f6:	4993      	ldr	r1, [pc, #588]	; (8005c44 <__ieee754_rem_pio2f+0x298>)
 80059f8:	f7fb f80c 	bl	8000a14 <__aeabi_fsub>
 80059fc:	2501      	movs	r5, #1
 80059fe:	6060      	str	r0, [r4, #4]
 8005a00:	4628      	mov	r0, r5
 8005a02:	b007      	add	sp, #28
 8005a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a08:	498f      	ldr	r1, [pc, #572]	; (8005c48 <__ieee754_rem_pio2f+0x29c>)
 8005a0a:	f7fb f803 	bl	8000a14 <__aeabi_fsub>
 8005a0e:	498f      	ldr	r1, [pc, #572]	; (8005c4c <__ieee754_rem_pio2f+0x2a0>)
 8005a10:	4605      	mov	r5, r0
 8005a12:	f7fa ffff 	bl	8000a14 <__aeabi_fsub>
 8005a16:	4601      	mov	r1, r0
 8005a18:	6020      	str	r0, [r4, #0]
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f7fa fffa 	bl	8000a14 <__aeabi_fsub>
 8005a20:	498a      	ldr	r1, [pc, #552]	; (8005c4c <__ieee754_rem_pio2f+0x2a0>)
 8005a22:	e7e9      	b.n	80059f8 <__ieee754_rem_pio2f+0x4c>
 8005a24:	f7fa fff8 	bl	8000a18 <__addsf3>
 8005a28:	42be      	cmp	r6, r7
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	d00e      	beq.n	8005a4c <__ieee754_rem_pio2f+0xa0>
 8005a2e:	4985      	ldr	r1, [pc, #532]	; (8005c44 <__ieee754_rem_pio2f+0x298>)
 8005a30:	f7fa fff2 	bl	8000a18 <__addsf3>
 8005a34:	4601      	mov	r1, r0
 8005a36:	6020      	str	r0, [r4, #0]
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f7fa ffeb 	bl	8000a14 <__aeabi_fsub>
 8005a3e:	4981      	ldr	r1, [pc, #516]	; (8005c44 <__ieee754_rem_pio2f+0x298>)
 8005a40:	f7fa ffea 	bl	8000a18 <__addsf3>
 8005a44:	f04f 35ff 	mov.w	r5, #4294967295
 8005a48:	6060      	str	r0, [r4, #4]
 8005a4a:	e7d9      	b.n	8005a00 <__ieee754_rem_pio2f+0x54>
 8005a4c:	497e      	ldr	r1, [pc, #504]	; (8005c48 <__ieee754_rem_pio2f+0x29c>)
 8005a4e:	f7fa ffe3 	bl	8000a18 <__addsf3>
 8005a52:	497e      	ldr	r1, [pc, #504]	; (8005c4c <__ieee754_rem_pio2f+0x2a0>)
 8005a54:	4605      	mov	r5, r0
 8005a56:	f7fa ffdf 	bl	8000a18 <__addsf3>
 8005a5a:	4601      	mov	r1, r0
 8005a5c:	6020      	str	r0, [r4, #0]
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f7fa ffd8 	bl	8000a14 <__aeabi_fsub>
 8005a64:	4979      	ldr	r1, [pc, #484]	; (8005c4c <__ieee754_rem_pio2f+0x2a0>)
 8005a66:	e7eb      	b.n	8005a40 <__ieee754_rem_pio2f+0x94>
 8005a68:	4a79      	ldr	r2, [pc, #484]	; (8005c50 <__ieee754_rem_pio2f+0x2a4>)
 8005a6a:	4296      	cmp	r6, r2
 8005a6c:	f300 8091 	bgt.w	8005b92 <__ieee754_rem_pio2f+0x1e6>
 8005a70:	f000 f8fa 	bl	8005c68 <fabsf>
 8005a74:	4977      	ldr	r1, [pc, #476]	; (8005c54 <__ieee754_rem_pio2f+0x2a8>)
 8005a76:	4607      	mov	r7, r0
 8005a78:	f7fa fd08 	bl	800048c <__aeabi_fmul>
 8005a7c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005a80:	f7fa ffca 	bl	8000a18 <__addsf3>
 8005a84:	f7fb f946 	bl	8000d14 <__aeabi_f2iz>
 8005a88:	4605      	mov	r5, r0
 8005a8a:	f7fb f879 	bl	8000b80 <__aeabi_i2f>
 8005a8e:	496b      	ldr	r1, [pc, #428]	; (8005c3c <__ieee754_rem_pio2f+0x290>)
 8005a90:	4681      	mov	r9, r0
 8005a92:	f7fa fcfb 	bl	800048c <__aeabi_fmul>
 8005a96:	4601      	mov	r1, r0
 8005a98:	4638      	mov	r0, r7
 8005a9a:	f7fa ffbb 	bl	8000a14 <__aeabi_fsub>
 8005a9e:	4969      	ldr	r1, [pc, #420]	; (8005c44 <__ieee754_rem_pio2f+0x298>)
 8005aa0:	4680      	mov	r8, r0
 8005aa2:	4648      	mov	r0, r9
 8005aa4:	f7fa fcf2 	bl	800048c <__aeabi_fmul>
 8005aa8:	2d1f      	cmp	r5, #31
 8005aaa:	4607      	mov	r7, r0
 8005aac:	dc0c      	bgt.n	8005ac8 <__ieee754_rem_pio2f+0x11c>
 8005aae:	4a6a      	ldr	r2, [pc, #424]	; (8005c58 <__ieee754_rem_pio2f+0x2ac>)
 8005ab0:	1e69      	subs	r1, r5, #1
 8005ab2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005ab6:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <__ieee754_rem_pio2f+0x11c>
 8005abe:	4639      	mov	r1, r7
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	f7fa ffa7 	bl	8000a14 <__aeabi_fsub>
 8005ac6:	e00b      	b.n	8005ae0 <__ieee754_rem_pio2f+0x134>
 8005ac8:	4639      	mov	r1, r7
 8005aca:	4640      	mov	r0, r8
 8005acc:	f7fa ffa2 	bl	8000a14 <__aeabi_fsub>
 8005ad0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005ad4:	ebc3 53d6 	rsb	r3, r3, r6, lsr #23
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8005ade:	dc01      	bgt.n	8005ae4 <__ieee754_rem_pio2f+0x138>
 8005ae0:	6020      	str	r0, [r4, #0]
 8005ae2:	e026      	b.n	8005b32 <__ieee754_rem_pio2f+0x186>
 8005ae4:	4958      	ldr	r1, [pc, #352]	; (8005c48 <__ieee754_rem_pio2f+0x29c>)
 8005ae6:	4648      	mov	r0, r9
 8005ae8:	f7fa fcd0 	bl	800048c <__aeabi_fmul>
 8005aec:	4607      	mov	r7, r0
 8005aee:	4601      	mov	r1, r0
 8005af0:	4640      	mov	r0, r8
 8005af2:	f7fa ff8f 	bl	8000a14 <__aeabi_fsub>
 8005af6:	4601      	mov	r1, r0
 8005af8:	4606      	mov	r6, r0
 8005afa:	4640      	mov	r0, r8
 8005afc:	f7fa ff8a 	bl	8000a14 <__aeabi_fsub>
 8005b00:	4639      	mov	r1, r7
 8005b02:	f7fa ff87 	bl	8000a14 <__aeabi_fsub>
 8005b06:	4607      	mov	r7, r0
 8005b08:	4950      	ldr	r1, [pc, #320]	; (8005c4c <__ieee754_rem_pio2f+0x2a0>)
 8005b0a:	4648      	mov	r0, r9
 8005b0c:	f7fa fcbe 	bl	800048c <__aeabi_fmul>
 8005b10:	4639      	mov	r1, r7
 8005b12:	f7fa ff7f 	bl	8000a14 <__aeabi_fsub>
 8005b16:	4601      	mov	r1, r0
 8005b18:	4607      	mov	r7, r0
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	f7fa ff7a 	bl	8000a14 <__aeabi_fsub>
 8005b20:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005b24:	ebab 0b03 	sub.w	fp, fp, r3
 8005b28:	f1bb 0f19 	cmp.w	fp, #25
 8005b2c:	dc16      	bgt.n	8005b5c <__ieee754_rem_pio2f+0x1b0>
 8005b2e:	46b0      	mov	r8, r6
 8005b30:	6020      	str	r0, [r4, #0]
 8005b32:	6826      	ldr	r6, [r4, #0]
 8005b34:	4640      	mov	r0, r8
 8005b36:	4631      	mov	r1, r6
 8005b38:	f7fa ff6c 	bl	8000a14 <__aeabi_fsub>
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	f7fa ff69 	bl	8000a14 <__aeabi_fsub>
 8005b42:	f1ba 0f00 	cmp.w	sl, #0
 8005b46:	6060      	str	r0, [r4, #4]
 8005b48:	f6bf af5a 	bge.w	8005a00 <__ieee754_rem_pio2f+0x54>
 8005b4c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005b50:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005b54:	6026      	str	r6, [r4, #0]
 8005b56:	6060      	str	r0, [r4, #4]
 8005b58:	426d      	negs	r5, r5
 8005b5a:	e751      	b.n	8005a00 <__ieee754_rem_pio2f+0x54>
 8005b5c:	493f      	ldr	r1, [pc, #252]	; (8005c5c <__ieee754_rem_pio2f+0x2b0>)
 8005b5e:	4648      	mov	r0, r9
 8005b60:	f7fa fc94 	bl	800048c <__aeabi_fmul>
 8005b64:	4607      	mov	r7, r0
 8005b66:	4601      	mov	r1, r0
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f7fa ff53 	bl	8000a14 <__aeabi_fsub>
 8005b6e:	4601      	mov	r1, r0
 8005b70:	4680      	mov	r8, r0
 8005b72:	4630      	mov	r0, r6
 8005b74:	f7fa ff4e 	bl	8000a14 <__aeabi_fsub>
 8005b78:	4639      	mov	r1, r7
 8005b7a:	f7fa ff4b 	bl	8000a14 <__aeabi_fsub>
 8005b7e:	4606      	mov	r6, r0
 8005b80:	4937      	ldr	r1, [pc, #220]	; (8005c60 <__ieee754_rem_pio2f+0x2b4>)
 8005b82:	4648      	mov	r0, r9
 8005b84:	f7fa fc82 	bl	800048c <__aeabi_fmul>
 8005b88:	4631      	mov	r1, r6
 8005b8a:	f7fa ff43 	bl	8000a14 <__aeabi_fsub>
 8005b8e:	4607      	mov	r7, r0
 8005b90:	e795      	b.n	8005abe <__ieee754_rem_pio2f+0x112>
 8005b92:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005b96:	db05      	blt.n	8005ba4 <__ieee754_rem_pio2f+0x1f8>
 8005b98:	4601      	mov	r1, r0
 8005b9a:	f7fa ff3b 	bl	8000a14 <__aeabi_fsub>
 8005b9e:	6060      	str	r0, [r4, #4]
 8005ba0:	6020      	str	r0, [r4, #0]
 8005ba2:	e710      	b.n	80059c6 <__ieee754_rem_pio2f+0x1a>
 8005ba4:	15f7      	asrs	r7, r6, #23
 8005ba6:	3f86      	subs	r7, #134	; 0x86
 8005ba8:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8005bac:	4630      	mov	r0, r6
 8005bae:	f7fb f8b1 	bl	8000d14 <__aeabi_f2iz>
 8005bb2:	f7fa ffe5 	bl	8000b80 <__aeabi_i2f>
 8005bb6:	4601      	mov	r1, r0
 8005bb8:	9003      	str	r0, [sp, #12]
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7fa ff2a 	bl	8000a14 <__aeabi_fsub>
 8005bc0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005bc4:	f7fa fc62 	bl	800048c <__aeabi_fmul>
 8005bc8:	4606      	mov	r6, r0
 8005bca:	f7fb f8a3 	bl	8000d14 <__aeabi_f2iz>
 8005bce:	f7fa ffd7 	bl	8000b80 <__aeabi_i2f>
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	9004      	str	r0, [sp, #16]
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7fa ff1b 	bl	8000a14 <__aeabi_fsub>
 8005bde:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005be2:	f7fa fc53 	bl	800048c <__aeabi_fmul>
 8005be6:	2100      	movs	r1, #0
 8005be8:	9005      	str	r0, [sp, #20]
 8005bea:	f7fb f861 	bl	8000cb0 <__aeabi_fcmpeq>
 8005bee:	b1f0      	cbz	r0, 8005c2e <__ieee754_rem_pio2f+0x282>
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f7fb f85c 	bl	8000cb0 <__aeabi_fcmpeq>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	bf14      	ite	ne
 8005bfc:	2301      	movne	r3, #1
 8005bfe:	2302      	moveq	r3, #2
 8005c00:	4a18      	ldr	r2, [pc, #96]	; (8005c64 <__ieee754_rem_pio2f+0x2b8>)
 8005c02:	4621      	mov	r1, r4
 8005c04:	9201      	str	r2, [sp, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	a803      	add	r0, sp, #12
 8005c0a:	9200      	str	r2, [sp, #0]
 8005c0c:	463a      	mov	r2, r7
 8005c0e:	f000 f82f 	bl	8005c70 <__kernel_rem_pio2f>
 8005c12:	f1ba 0f00 	cmp.w	sl, #0
 8005c16:	4605      	mov	r5, r0
 8005c18:	f6bf aef2 	bge.w	8005a00 <__ieee754_rem_pio2f+0x54>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	6863      	ldr	r3, [r4, #4]
 8005c26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005c2a:	6063      	str	r3, [r4, #4]
 8005c2c:	e794      	b.n	8005b58 <__ieee754_rem_pio2f+0x1ac>
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e7e6      	b.n	8005c00 <__ieee754_rem_pio2f+0x254>
 8005c32:	bf00      	nop
 8005c34:	3f490fd8 	.word	0x3f490fd8
 8005c38:	4016cbe3 	.word	0x4016cbe3
 8005c3c:	3fc90f80 	.word	0x3fc90f80
 8005c40:	3fc90fd0 	.word	0x3fc90fd0
 8005c44:	37354443 	.word	0x37354443
 8005c48:	37354400 	.word	0x37354400
 8005c4c:	2e85a308 	.word	0x2e85a308
 8005c50:	43490f80 	.word	0x43490f80
 8005c54:	3f22f984 	.word	0x3f22f984
 8005c58:	08006374 	.word	0x08006374
 8005c5c:	2e85a300 	.word	0x2e85a300
 8005c60:	248d3132 	.word	0x248d3132
 8005c64:	080063f4 	.word	0x080063f4

08005c68 <fabsf>:
 8005c68:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c6c:	4770      	bx	lr
	...

08005c70 <__kernel_rem_pio2f>:
 8005c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c74:	b0db      	sub	sp, #364	; 0x16c
 8005c76:	9202      	str	r2, [sp, #8]
 8005c78:	9304      	str	r3, [sp, #16]
 8005c7a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005c7c:	4bbb      	ldr	r3, [pc, #748]	; (8005f6c <__kernel_rem_pio2f+0x2fc>)
 8005c7e:	9005      	str	r0, [sp, #20]
 8005c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c84:	9100      	str	r1, [sp, #0]
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	9b04      	ldr	r3, [sp, #16]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	9303      	str	r3, [sp, #12]
 8005c8e:	9b02      	ldr	r3, [sp, #8]
 8005c90:	1d1a      	adds	r2, r3, #4
 8005c92:	f2c0 809b 	blt.w	8005dcc <__kernel_rem_pio2f+0x15c>
 8005c96:	1edc      	subs	r4, r3, #3
 8005c98:	bf48      	it	mi
 8005c9a:	1d1c      	addmi	r4, r3, #4
 8005c9c:	10e4      	asrs	r4, r4, #3
 8005c9e:	2500      	movs	r5, #0
 8005ca0:	f04f 0b00 	mov.w	fp, #0
 8005ca4:	1c67      	adds	r7, r4, #1
 8005ca6:	00fb      	lsls	r3, r7, #3
 8005ca8:	9306      	str	r3, [sp, #24]
 8005caa:	9b02      	ldr	r3, [sp, #8]
 8005cac:	9a03      	ldr	r2, [sp, #12]
 8005cae:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8005cb2:	9b01      	ldr	r3, [sp, #4]
 8005cb4:	eba4 0802 	sub.w	r8, r4, r2
 8005cb8:	eb03 0902 	add.w	r9, r3, r2
 8005cbc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8005cbe:	ae1e      	add	r6, sp, #120	; 0x78
 8005cc0:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8005cc4:	454d      	cmp	r5, r9
 8005cc6:	f340 8083 	ble.w	8005dd0 <__kernel_rem_pio2f+0x160>
 8005cca:	9a04      	ldr	r2, [sp, #16]
 8005ccc:	ab1e      	add	r3, sp, #120	; 0x78
 8005cce:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8005cd2:	f04f 0900 	mov.w	r9, #0
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8005cdc:	9a01      	ldr	r2, [sp, #4]
 8005cde:	4591      	cmp	r9, r2
 8005ce0:	f340 809e 	ble.w	8005e20 <__kernel_rem_pio2f+0x1b0>
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	aa0a      	add	r2, sp, #40	; 0x28
 8005ce8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cec:	9308      	str	r3, [sp, #32]
 8005cee:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8005cf0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005cf4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005cf8:	9307      	str	r3, [sp, #28]
 8005cfa:	ac0a      	add	r4, sp, #40	; 0x28
 8005cfc:	4626      	mov	r6, r4
 8005cfe:	46c3      	mov	fp, r8
 8005d00:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8005d04:	ab5a      	add	r3, sp, #360	; 0x168
 8005d06:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8005d0a:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8005d0e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8005d12:	f1bb 0f00 	cmp.w	fp, #0
 8005d16:	f300 8088 	bgt.w	8005e2a <__kernel_rem_pio2f+0x1ba>
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 fa5b 	bl	80061d8 <scalbnf>
 8005d22:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8005d26:	4605      	mov	r5, r0
 8005d28:	f7fa fbb0 	bl	800048c <__aeabi_fmul>
 8005d2c:	f000 faa0 	bl	8006270 <floorf>
 8005d30:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8005d34:	f7fa fbaa 	bl	800048c <__aeabi_fmul>
 8005d38:	4601      	mov	r1, r0
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7fa fe6a 	bl	8000a14 <__aeabi_fsub>
 8005d40:	4605      	mov	r5, r0
 8005d42:	f7fa ffe7 	bl	8000d14 <__aeabi_f2iz>
 8005d46:	4606      	mov	r6, r0
 8005d48:	f7fa ff1a 	bl	8000b80 <__aeabi_i2f>
 8005d4c:	4601      	mov	r1, r0
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f7fa fe60 	bl	8000a14 <__aeabi_fsub>
 8005d54:	2f00      	cmp	r7, #0
 8005d56:	4681      	mov	r9, r0
 8005d58:	f340 8086 	ble.w	8005e68 <__kernel_rem_pio2f+0x1f8>
 8005d5c:	f108 32ff 	add.w	r2, r8, #4294967295
 8005d60:	ab0a      	add	r3, sp, #40	; 0x28
 8005d62:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8005d66:	f1c7 0108 	rsb	r1, r7, #8
 8005d6a:	fa45 f301 	asr.w	r3, r5, r1
 8005d6e:	441e      	add	r6, r3
 8005d70:	408b      	lsls	r3, r1
 8005d72:	1aed      	subs	r5, r5, r3
 8005d74:	ab0a      	add	r3, sp, #40	; 0x28
 8005d76:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005d7a:	f1c7 0307 	rsb	r3, r7, #7
 8005d7e:	411d      	asrs	r5, r3
 8005d80:	2d00      	cmp	r5, #0
 8005d82:	dd7f      	ble.n	8005e84 <__kernel_rem_pio2f+0x214>
 8005d84:	2200      	movs	r2, #0
 8005d86:	4692      	mov	sl, r2
 8005d88:	3601      	adds	r6, #1
 8005d8a:	4590      	cmp	r8, r2
 8005d8c:	f300 80b0 	bgt.w	8005ef0 <__kernel_rem_pio2f+0x280>
 8005d90:	2f00      	cmp	r7, #0
 8005d92:	dd05      	ble.n	8005da0 <__kernel_rem_pio2f+0x130>
 8005d94:	2f01      	cmp	r7, #1
 8005d96:	f000 80bd 	beq.w	8005f14 <__kernel_rem_pio2f+0x2a4>
 8005d9a:	2f02      	cmp	r7, #2
 8005d9c:	f000 80c5 	beq.w	8005f2a <__kernel_rem_pio2f+0x2ba>
 8005da0:	2d02      	cmp	r5, #2
 8005da2:	d16f      	bne.n	8005e84 <__kernel_rem_pio2f+0x214>
 8005da4:	4649      	mov	r1, r9
 8005da6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005daa:	f7fa fe33 	bl	8000a14 <__aeabi_fsub>
 8005dae:	4681      	mov	r9, r0
 8005db0:	f1ba 0f00 	cmp.w	sl, #0
 8005db4:	d066      	beq.n	8005e84 <__kernel_rem_pio2f+0x214>
 8005db6:	4639      	mov	r1, r7
 8005db8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005dbc:	f000 fa0c 	bl	80061d8 <scalbnf>
 8005dc0:	4601      	mov	r1, r0
 8005dc2:	4648      	mov	r0, r9
 8005dc4:	f7fa fe26 	bl	8000a14 <__aeabi_fsub>
 8005dc8:	4681      	mov	r9, r0
 8005dca:	e05b      	b.n	8005e84 <__kernel_rem_pio2f+0x214>
 8005dcc:	2400      	movs	r4, #0
 8005dce:	e766      	b.n	8005c9e <__kernel_rem_pio2f+0x2e>
 8005dd0:	eb18 0f05 	cmn.w	r8, r5
 8005dd4:	d407      	bmi.n	8005de6 <__kernel_rem_pio2f+0x176>
 8005dd6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8005dda:	f7fa fed1 	bl	8000b80 <__aeabi_i2f>
 8005dde:	f846 0b04 	str.w	r0, [r6], #4
 8005de2:	3501      	adds	r5, #1
 8005de4:	e76e      	b.n	8005cc4 <__kernel_rem_pio2f+0x54>
 8005de6:	4658      	mov	r0, fp
 8005de8:	e7f9      	b.n	8005dde <__kernel_rem_pio2f+0x16e>
 8005dea:	9307      	str	r3, [sp, #28]
 8005dec:	9b05      	ldr	r3, [sp, #20]
 8005dee:	f8da 1000 	ldr.w	r1, [sl]
 8005df2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005df6:	f7fa fb49 	bl	800048c <__aeabi_fmul>
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	f7fa fe0b 	bl	8000a18 <__addsf3>
 8005e02:	4606      	mov	r6, r0
 8005e04:	9b07      	ldr	r3, [sp, #28]
 8005e06:	f108 0801 	add.w	r8, r8, #1
 8005e0a:	9a03      	ldr	r2, [sp, #12]
 8005e0c:	f1aa 0a04 	sub.w	sl, sl, #4
 8005e10:	4590      	cmp	r8, r2
 8005e12:	ddea      	ble.n	8005dea <__kernel_rem_pio2f+0x17a>
 8005e14:	f84b 6b04 	str.w	r6, [fp], #4
 8005e18:	f109 0901 	add.w	r9, r9, #1
 8005e1c:	3504      	adds	r5, #4
 8005e1e:	e75d      	b.n	8005cdc <__kernel_rem_pio2f+0x6c>
 8005e20:	46aa      	mov	sl, r5
 8005e22:	461e      	mov	r6, r3
 8005e24:	f04f 0800 	mov.w	r8, #0
 8005e28:	e7ef      	b.n	8005e0a <__kernel_rem_pio2f+0x19a>
 8005e2a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f7fa fb2c 	bl	800048c <__aeabi_fmul>
 8005e34:	f7fa ff6e 	bl	8000d14 <__aeabi_f2iz>
 8005e38:	f7fa fea2 	bl	8000b80 <__aeabi_i2f>
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	9009      	str	r0, [sp, #36]	; 0x24
 8005e40:	f7fa fb24 	bl	800048c <__aeabi_fmul>
 8005e44:	4601      	mov	r1, r0
 8005e46:	4628      	mov	r0, r5
 8005e48:	f7fa fde4 	bl	8000a14 <__aeabi_fsub>
 8005e4c:	f7fa ff62 	bl	8000d14 <__aeabi_f2iz>
 8005e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e56:	f846 0b04 	str.w	r0, [r6], #4
 8005e5a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fa fdda 	bl	8000a18 <__addsf3>
 8005e64:	4605      	mov	r5, r0
 8005e66:	e754      	b.n	8005d12 <__kernel_rem_pio2f+0xa2>
 8005e68:	d106      	bne.n	8005e78 <__kernel_rem_pio2f+0x208>
 8005e6a:	f108 33ff 	add.w	r3, r8, #4294967295
 8005e6e:	aa0a      	add	r2, sp, #40	; 0x28
 8005e70:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005e74:	11ed      	asrs	r5, r5, #7
 8005e76:	e783      	b.n	8005d80 <__kernel_rem_pio2f+0x110>
 8005e78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005e7c:	f7fa ff36 	bl	8000cec <__aeabi_fcmpge>
 8005e80:	4605      	mov	r5, r0
 8005e82:	bb98      	cbnz	r0, 8005eec <__kernel_rem_pio2f+0x27c>
 8005e84:	2100      	movs	r1, #0
 8005e86:	4648      	mov	r0, r9
 8005e88:	f7fa ff12 	bl	8000cb0 <__aeabi_fcmpeq>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	f000 8098 	beq.w	8005fc2 <__kernel_rem_pio2f+0x352>
 8005e92:	f108 34ff 	add.w	r4, r8, #4294967295
 8005e96:	4623      	mov	r3, r4
 8005e98:	2200      	movs	r2, #0
 8005e9a:	9901      	ldr	r1, [sp, #4]
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	da4c      	bge.n	8005f3a <__kernel_rem_pio2f+0x2ca>
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	d067      	beq.n	8005f74 <__kernel_rem_pio2f+0x304>
 8005ea4:	ab0a      	add	r3, sp, #40	; 0x28
 8005ea6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005eaa:	3f08      	subs	r7, #8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8086 	beq.w	8005fbe <__kernel_rem_pio2f+0x34e>
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005eb8:	f000 f98e 	bl	80061d8 <scalbnf>
 8005ebc:	46a2      	mov	sl, r4
 8005ebe:	4681      	mov	r9, r0
 8005ec0:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8005ec4:	af46      	add	r7, sp, #280	; 0x118
 8005ec6:	f1ba 0f00 	cmp.w	sl, #0
 8005eca:	f280 80af 	bge.w	800602c <__kernel_rem_pio2f+0x3bc>
 8005ece:	4627      	mov	r7, r4
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2f00      	cmp	r7, #0
 8005ed4:	f2c0 80d9 	blt.w	800608a <__kernel_rem_pio2f+0x41a>
 8005ed8:	a946      	add	r1, sp, #280	; 0x118
 8005eda:	4690      	mov	r8, r2
 8005edc:	f04f 0a00 	mov.w	sl, #0
 8005ee0:	4b23      	ldr	r3, [pc, #140]	; (8005f70 <__kernel_rem_pio2f+0x300>)
 8005ee2:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8005ee6:	eba4 0907 	sub.w	r9, r4, r7
 8005eea:	e0c2      	b.n	8006072 <__kernel_rem_pio2f+0x402>
 8005eec:	2502      	movs	r5, #2
 8005eee:	e749      	b.n	8005d84 <__kernel_rem_pio2f+0x114>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	f1ba 0f00 	cmp.w	sl, #0
 8005ef6:	d108      	bne.n	8005f0a <__kernel_rem_pio2f+0x29a>
 8005ef8:	b11b      	cbz	r3, 8005f02 <__kernel_rem_pio2f+0x292>
 8005efa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	2301      	movs	r3, #1
 8005f02:	469a      	mov	sl, r3
 8005f04:	3201      	adds	r2, #1
 8005f06:	3404      	adds	r4, #4
 8005f08:	e73f      	b.n	8005d8a <__kernel_rem_pio2f+0x11a>
 8005f0a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	4653      	mov	r3, sl
 8005f12:	e7f6      	b.n	8005f02 <__kernel_rem_pio2f+0x292>
 8005f14:	f108 32ff 	add.w	r2, r8, #4294967295
 8005f18:	ab0a      	add	r3, sp, #40	; 0x28
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f22:	a90a      	add	r1, sp, #40	; 0x28
 8005f24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005f28:	e73a      	b.n	8005da0 <__kernel_rem_pio2f+0x130>
 8005f2a:	f108 32ff 	add.w	r2, r8, #4294967295
 8005f2e:	ab0a      	add	r3, sp, #40	; 0x28
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f38:	e7f3      	b.n	8005f22 <__kernel_rem_pio2f+0x2b2>
 8005f3a:	a90a      	add	r1, sp, #40	; 0x28
 8005f3c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	430a      	orrs	r2, r1
 8005f44:	e7a9      	b.n	8005e9a <__kernel_rem_pio2f+0x22a>
 8005f46:	3401      	adds	r4, #1
 8005f48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005f4c:	2a00      	cmp	r2, #0
 8005f4e:	d0fa      	beq.n	8005f46 <__kernel_rem_pio2f+0x2d6>
 8005f50:	9b04      	ldr	r3, [sp, #16]
 8005f52:	aa1e      	add	r2, sp, #120	; 0x78
 8005f54:	4443      	add	r3, r8
 8005f56:	f108 0601 	add.w	r6, r8, #1
 8005f5a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005f5e:	4444      	add	r4, r8
 8005f60:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8005f64:	42b4      	cmp	r4, r6
 8005f66:	da08      	bge.n	8005f7a <__kernel_rem_pio2f+0x30a>
 8005f68:	46a0      	mov	r8, r4
 8005f6a:	e6c6      	b.n	8005cfa <__kernel_rem_pio2f+0x8a>
 8005f6c:	08006738 	.word	0x08006738
 8005f70:	0800670c 	.word	0x0800670c
 8005f74:	2401      	movs	r4, #1
 8005f76:	9b08      	ldr	r3, [sp, #32]
 8005f78:	e7e6      	b.n	8005f48 <__kernel_rem_pio2f+0x2d8>
 8005f7a:	9b07      	ldr	r3, [sp, #28]
 8005f7c:	46ab      	mov	fp, r5
 8005f7e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f82:	f7fa fdfd 	bl	8000b80 <__aeabi_i2f>
 8005f86:	f04f 0a00 	mov.w	sl, #0
 8005f8a:	f04f 0800 	mov.w	r8, #0
 8005f8e:	6028      	str	r0, [r5, #0]
 8005f90:	9b03      	ldr	r3, [sp, #12]
 8005f92:	459a      	cmp	sl, r3
 8005f94:	dd04      	ble.n	8005fa0 <__kernel_rem_pio2f+0x330>
 8005f96:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8005f9a:	3504      	adds	r5, #4
 8005f9c:	3601      	adds	r6, #1
 8005f9e:	e7e1      	b.n	8005f64 <__kernel_rem_pio2f+0x2f4>
 8005fa0:	9b05      	ldr	r3, [sp, #20]
 8005fa2:	f85b 0904 	ldr.w	r0, [fp], #-4
 8005fa6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8005faa:	f7fa fa6f 	bl	800048c <__aeabi_fmul>
 8005fae:	4601      	mov	r1, r0
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	f7fa fd31 	bl	8000a18 <__addsf3>
 8005fb6:	f10a 0a01 	add.w	sl, sl, #1
 8005fba:	4680      	mov	r8, r0
 8005fbc:	e7e8      	b.n	8005f90 <__kernel_rem_pio2f+0x320>
 8005fbe:	3c01      	subs	r4, #1
 8005fc0:	e770      	b.n	8005ea4 <__kernel_rem_pio2f+0x234>
 8005fc2:	9b06      	ldr	r3, [sp, #24]
 8005fc4:	9a02      	ldr	r2, [sp, #8]
 8005fc6:	4648      	mov	r0, r9
 8005fc8:	1a99      	subs	r1, r3, r2
 8005fca:	f000 f905 	bl	80061d8 <scalbnf>
 8005fce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	f7fa fe8a 	bl	8000cec <__aeabi_fcmpge>
 8005fd8:	b300      	cbz	r0, 800601c <__kernel_rem_pio2f+0x3ac>
 8005fda:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7fa fa54 	bl	800048c <__aeabi_fmul>
 8005fe4:	f7fa fe96 	bl	8000d14 <__aeabi_f2iz>
 8005fe8:	f7fa fdca 	bl	8000b80 <__aeabi_i2f>
 8005fec:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005ff0:	4681      	mov	r9, r0
 8005ff2:	f7fa fa4b 	bl	800048c <__aeabi_fmul>
 8005ff6:	4601      	mov	r1, r0
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f7fa fd0b 	bl	8000a14 <__aeabi_fsub>
 8005ffe:	f7fa fe89 	bl	8000d14 <__aeabi_f2iz>
 8006002:	ab0a      	add	r3, sp, #40	; 0x28
 8006004:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006008:	4648      	mov	r0, r9
 800600a:	f7fa fe83 	bl	8000d14 <__aeabi_f2iz>
 800600e:	f108 0401 	add.w	r4, r8, #1
 8006012:	ab0a      	add	r3, sp, #40	; 0x28
 8006014:	3708      	adds	r7, #8
 8006016:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800601a:	e74a      	b.n	8005eb2 <__kernel_rem_pio2f+0x242>
 800601c:	4620      	mov	r0, r4
 800601e:	f7fa fe79 	bl	8000d14 <__aeabi_f2iz>
 8006022:	ab0a      	add	r3, sp, #40	; 0x28
 8006024:	4644      	mov	r4, r8
 8006026:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800602a:	e742      	b.n	8005eb2 <__kernel_rem_pio2f+0x242>
 800602c:	ab0a      	add	r3, sp, #40	; 0x28
 800602e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006032:	f7fa fda5 	bl	8000b80 <__aeabi_i2f>
 8006036:	4649      	mov	r1, r9
 8006038:	f7fa fa28 	bl	800048c <__aeabi_fmul>
 800603c:	4641      	mov	r1, r8
 800603e:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8006042:	4648      	mov	r0, r9
 8006044:	f7fa fa22 	bl	800048c <__aeabi_fmul>
 8006048:	f10a 3aff 	add.w	sl, sl, #4294967295
 800604c:	4681      	mov	r9, r0
 800604e:	e73a      	b.n	8005ec6 <__kernel_rem_pio2f+0x256>
 8006050:	f853 0b04 	ldr.w	r0, [r3], #4
 8006054:	f85b 1b04 	ldr.w	r1, [fp], #4
 8006058:	9203      	str	r2, [sp, #12]
 800605a:	9302      	str	r3, [sp, #8]
 800605c:	f7fa fa16 	bl	800048c <__aeabi_fmul>
 8006060:	4601      	mov	r1, r0
 8006062:	4640      	mov	r0, r8
 8006064:	f7fa fcd8 	bl	8000a18 <__addsf3>
 8006068:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800606c:	4680      	mov	r8, r0
 800606e:	f10a 0a01 	add.w	sl, sl, #1
 8006072:	9901      	ldr	r1, [sp, #4]
 8006074:	458a      	cmp	sl, r1
 8006076:	dc01      	bgt.n	800607c <__kernel_rem_pio2f+0x40c>
 8006078:	45ca      	cmp	sl, r9
 800607a:	dde9      	ble.n	8006050 <__kernel_rem_pio2f+0x3e0>
 800607c:	ab5a      	add	r3, sp, #360	; 0x168
 800607e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8006082:	f849 8ca0 	str.w	r8, [r9, #-160]
 8006086:	3f01      	subs	r7, #1
 8006088:	e723      	b.n	8005ed2 <__kernel_rem_pio2f+0x262>
 800608a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800608c:	2b02      	cmp	r3, #2
 800608e:	dc07      	bgt.n	80060a0 <__kernel_rem_pio2f+0x430>
 8006090:	2b00      	cmp	r3, #0
 8006092:	dc4e      	bgt.n	8006132 <__kernel_rem_pio2f+0x4c2>
 8006094:	d02e      	beq.n	80060f4 <__kernel_rem_pio2f+0x484>
 8006096:	f006 0007 	and.w	r0, r6, #7
 800609a:	b05b      	add	sp, #364	; 0x16c
 800609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d1f7      	bne.n	8006096 <__kernel_rem_pio2f+0x426>
 80060a6:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 80060aa:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80060ae:	46b8      	mov	r8, r7
 80060b0:	46a2      	mov	sl, r4
 80060b2:	f1ba 0f00 	cmp.w	sl, #0
 80060b6:	dc49      	bgt.n	800614c <__kernel_rem_pio2f+0x4dc>
 80060b8:	46a1      	mov	r9, r4
 80060ba:	f1b9 0f01 	cmp.w	r9, #1
 80060be:	dc60      	bgt.n	8006182 <__kernel_rem_pio2f+0x512>
 80060c0:	2000      	movs	r0, #0
 80060c2:	2c01      	cmp	r4, #1
 80060c4:	dc76      	bgt.n	80061b4 <__kernel_rem_pio2f+0x544>
 80060c6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80060c8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80060ca:	2d00      	cmp	r5, #0
 80060cc:	d178      	bne.n	80061c0 <__kernel_rem_pio2f+0x550>
 80060ce:	9900      	ldr	r1, [sp, #0]
 80060d0:	600a      	str	r2, [r1, #0]
 80060d2:	460a      	mov	r2, r1
 80060d4:	604b      	str	r3, [r1, #4]
 80060d6:	6090      	str	r0, [r2, #8]
 80060d8:	e7dd      	b.n	8006096 <__kernel_rem_pio2f+0x426>
 80060da:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80060de:	f7fa fc9b 	bl	8000a18 <__addsf3>
 80060e2:	3c01      	subs	r4, #1
 80060e4:	2c00      	cmp	r4, #0
 80060e6:	daf8      	bge.n	80060da <__kernel_rem_pio2f+0x46a>
 80060e8:	b10d      	cbz	r5, 80060ee <__kernel_rem_pio2f+0x47e>
 80060ea:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	6018      	str	r0, [r3, #0]
 80060f2:	e7d0      	b.n	8006096 <__kernel_rem_pio2f+0x426>
 80060f4:	2000      	movs	r0, #0
 80060f6:	af32      	add	r7, sp, #200	; 0xc8
 80060f8:	e7f4      	b.n	80060e4 <__kernel_rem_pio2f+0x474>
 80060fa:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 80060fe:	f7fa fc8b 	bl	8000a18 <__addsf3>
 8006102:	f108 38ff 	add.w	r8, r8, #4294967295
 8006106:	f1b8 0f00 	cmp.w	r8, #0
 800610a:	daf6      	bge.n	80060fa <__kernel_rem_pio2f+0x48a>
 800610c:	b1ad      	cbz	r5, 800613a <__kernel_rem_pio2f+0x4ca>
 800610e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8006112:	9a00      	ldr	r2, [sp, #0]
 8006114:	4601      	mov	r1, r0
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800611a:	f7fa fc7b 	bl	8000a14 <__aeabi_fsub>
 800611e:	f04f 0801 	mov.w	r8, #1
 8006122:	4544      	cmp	r4, r8
 8006124:	da0b      	bge.n	800613e <__kernel_rem_pio2f+0x4ce>
 8006126:	b10d      	cbz	r5, 800612c <__kernel_rem_pio2f+0x4bc>
 8006128:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800612c:	9b00      	ldr	r3, [sp, #0]
 800612e:	6058      	str	r0, [r3, #4]
 8006130:	e7b1      	b.n	8006096 <__kernel_rem_pio2f+0x426>
 8006132:	46a0      	mov	r8, r4
 8006134:	2000      	movs	r0, #0
 8006136:	af32      	add	r7, sp, #200	; 0xc8
 8006138:	e7e5      	b.n	8006106 <__kernel_rem_pio2f+0x496>
 800613a:	4603      	mov	r3, r0
 800613c:	e7e9      	b.n	8006112 <__kernel_rem_pio2f+0x4a2>
 800613e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8006142:	f7fa fc69 	bl	8000a18 <__addsf3>
 8006146:	f108 0801 	add.w	r8, r8, #1
 800614a:	e7ea      	b.n	8006122 <__kernel_rem_pio2f+0x4b2>
 800614c:	f8d8 3000 	ldr.w	r3, [r8]
 8006150:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	9302      	str	r3, [sp, #8]
 800615a:	9201      	str	r2, [sp, #4]
 800615c:	f7fa fc5c 	bl	8000a18 <__addsf3>
 8006160:	9a01      	ldr	r2, [sp, #4]
 8006162:	4601      	mov	r1, r0
 8006164:	4681      	mov	r9, r0
 8006166:	4610      	mov	r0, r2
 8006168:	f7fa fc54 	bl	8000a14 <__aeabi_fsub>
 800616c:	9b02      	ldr	r3, [sp, #8]
 800616e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006172:	4619      	mov	r1, r3
 8006174:	f7fa fc50 	bl	8000a18 <__addsf3>
 8006178:	f848 0904 	str.w	r0, [r8], #-4
 800617c:	f8c8 9000 	str.w	r9, [r8]
 8006180:	e797      	b.n	80060b2 <__kernel_rem_pio2f+0x442>
 8006182:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8006186:	f8d7 a000 	ldr.w	sl, [r7]
 800618a:	4618      	mov	r0, r3
 800618c:	4651      	mov	r1, sl
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	f7fa fc42 	bl	8000a18 <__addsf3>
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	4601      	mov	r1, r0
 8006198:	4680      	mov	r8, r0
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa fc3a 	bl	8000a14 <__aeabi_fsub>
 80061a0:	4651      	mov	r1, sl
 80061a2:	f7fa fc39 	bl	8000a18 <__addsf3>
 80061a6:	f847 0904 	str.w	r0, [r7], #-4
 80061aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80061ae:	f8c7 8000 	str.w	r8, [r7]
 80061b2:	e782      	b.n	80060ba <__kernel_rem_pio2f+0x44a>
 80061b4:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80061b8:	f7fa fc2e 	bl	8000a18 <__addsf3>
 80061bc:	3c01      	subs	r4, #1
 80061be:	e780      	b.n	80060c2 <__kernel_rem_pio2f+0x452>
 80061c0:	9900      	ldr	r1, [sp, #0]
 80061c2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80061c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80061ca:	600a      	str	r2, [r1, #0]
 80061cc:	604b      	str	r3, [r1, #4]
 80061ce:	460a      	mov	r2, r1
 80061d0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80061d4:	e77f      	b.n	80060d6 <__kernel_rem_pio2f+0x466>
 80061d6:	bf00      	nop

080061d8 <scalbnf>:
 80061d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	4603      	mov	r3, r0
 80061e0:	460d      	mov	r5, r1
 80061e2:	4604      	mov	r4, r0
 80061e4:	d02e      	beq.n	8006244 <scalbnf+0x6c>
 80061e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80061ea:	d304      	bcc.n	80061f6 <scalbnf+0x1e>
 80061ec:	4601      	mov	r1, r0
 80061ee:	f7fa fc13 	bl	8000a18 <__addsf3>
 80061f2:	4603      	mov	r3, r0
 80061f4:	e026      	b.n	8006244 <scalbnf+0x6c>
 80061f6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80061fa:	d118      	bne.n	800622e <scalbnf+0x56>
 80061fc:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8006200:	f7fa f944 	bl	800048c <__aeabi_fmul>
 8006204:	4a17      	ldr	r2, [pc, #92]	; (8006264 <scalbnf+0x8c>)
 8006206:	4603      	mov	r3, r0
 8006208:	4295      	cmp	r5, r2
 800620a:	db0c      	blt.n	8006226 <scalbnf+0x4e>
 800620c:	4604      	mov	r4, r0
 800620e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006212:	3a19      	subs	r2, #25
 8006214:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006218:	428d      	cmp	r5, r1
 800621a:	dd0a      	ble.n	8006232 <scalbnf+0x5a>
 800621c:	4912      	ldr	r1, [pc, #72]	; (8006268 <scalbnf+0x90>)
 800621e:	4618      	mov	r0, r3
 8006220:	f361 001e 	bfi	r0, r1, #0, #31
 8006224:	e000      	b.n	8006228 <scalbnf+0x50>
 8006226:	4911      	ldr	r1, [pc, #68]	; (800626c <scalbnf+0x94>)
 8006228:	f7fa f930 	bl	800048c <__aeabi_fmul>
 800622c:	e7e1      	b.n	80061f2 <scalbnf+0x1a>
 800622e:	0dd2      	lsrs	r2, r2, #23
 8006230:	e7f0      	b.n	8006214 <scalbnf+0x3c>
 8006232:	1951      	adds	r1, r2, r5
 8006234:	29fe      	cmp	r1, #254	; 0xfe
 8006236:	dcf1      	bgt.n	800621c <scalbnf+0x44>
 8006238:	2900      	cmp	r1, #0
 800623a:	dd05      	ble.n	8006248 <scalbnf+0x70>
 800623c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8006240:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8006244:	4618      	mov	r0, r3
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	f111 0f16 	cmn.w	r1, #22
 800624c:	da01      	bge.n	8006252 <scalbnf+0x7a>
 800624e:	4907      	ldr	r1, [pc, #28]	; (800626c <scalbnf+0x94>)
 8006250:	e7e5      	b.n	800621e <scalbnf+0x46>
 8006252:	f101 0019 	add.w	r0, r1, #25
 8006256:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800625a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800625e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8006262:	e7e1      	b.n	8006228 <scalbnf+0x50>
 8006264:	ffff3cb0 	.word	0xffff3cb0
 8006268:	7149f2ca 	.word	0x7149f2ca
 800626c:	0da24260 	.word	0x0da24260

08006270 <floorf>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8006276:	3d7f      	subs	r5, #127	; 0x7f
 8006278:	2d16      	cmp	r5, #22
 800627a:	4601      	mov	r1, r0
 800627c:	4604      	mov	r4, r0
 800627e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006282:	dc25      	bgt.n	80062d0 <floorf+0x60>
 8006284:	2d00      	cmp	r5, #0
 8006286:	da0e      	bge.n	80062a6 <floorf+0x36>
 8006288:	4916      	ldr	r1, [pc, #88]	; (80062e4 <floorf+0x74>)
 800628a:	f7fa fbc5 	bl	8000a18 <__addsf3>
 800628e:	2100      	movs	r1, #0
 8006290:	f7fa fd36 	bl	8000d00 <__aeabi_fcmpgt>
 8006294:	b128      	cbz	r0, 80062a2 <floorf+0x32>
 8006296:	2c00      	cmp	r4, #0
 8006298:	da22      	bge.n	80062e0 <floorf+0x70>
 800629a:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <floorf+0x78>)
 800629c:	2e00      	cmp	r6, #0
 800629e:	bf18      	it	ne
 80062a0:	461c      	movne	r4, r3
 80062a2:	4621      	mov	r1, r4
 80062a4:	e01a      	b.n	80062dc <floorf+0x6c>
 80062a6:	4e11      	ldr	r6, [pc, #68]	; (80062ec <floorf+0x7c>)
 80062a8:	412e      	asrs	r6, r5
 80062aa:	4230      	tst	r0, r6
 80062ac:	d016      	beq.n	80062dc <floorf+0x6c>
 80062ae:	490d      	ldr	r1, [pc, #52]	; (80062e4 <floorf+0x74>)
 80062b0:	f7fa fbb2 	bl	8000a18 <__addsf3>
 80062b4:	2100      	movs	r1, #0
 80062b6:	f7fa fd23 	bl	8000d00 <__aeabi_fcmpgt>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d0f1      	beq.n	80062a2 <floorf+0x32>
 80062be:	2c00      	cmp	r4, #0
 80062c0:	bfbe      	ittt	lt
 80062c2:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80062c6:	412b      	asrlt	r3, r5
 80062c8:	18e4      	addlt	r4, r4, r3
 80062ca:	ea24 0406 	bic.w	r4, r4, r6
 80062ce:	e7e8      	b.n	80062a2 <floorf+0x32>
 80062d0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80062d4:	d302      	bcc.n	80062dc <floorf+0x6c>
 80062d6:	f7fa fb9f 	bl	8000a18 <__addsf3>
 80062da:	4601      	mov	r1, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	2400      	movs	r4, #0
 80062e2:	e7de      	b.n	80062a2 <floorf+0x32>
 80062e4:	7149f2ca 	.word	0x7149f2ca
 80062e8:	bf800000 	.word	0xbf800000
 80062ec:	007fffff 	.word	0x007fffff

080062f0 <_init>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	bf00      	nop
 80062f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f6:	bc08      	pop	{r3}
 80062f8:	469e      	mov	lr, r3
 80062fa:	4770      	bx	lr

080062fc <_fini>:
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fe:	bf00      	nop
 8006300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006302:	bc08      	pop	{r3}
 8006304:	469e      	mov	lr, r3
 8006306:	4770      	bx	lr
